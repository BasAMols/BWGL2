{
  "version": 3,
  "sources": ["../ts/classes/util/math/vector2.ts", "../ts/classes/elements/element.ts", "../ts/classes/elements/domElement.ts", "../ts/classes/util/event.ts", "../ts/classes/webgl2/buffer.ts", "../ts/classes/webgl2/shaderManager.ts", "../ts/classes/webgl2/shaders/fragmentShaderSource.ts", "../ts/classes/webgl2/shaders/vertexShaderSource.ts", "../ts/classes/webgl2/shaders/shadowVertexShader.ts", "../ts/classes/webgl2/initialise.ts", "../ts/classes/elements/renderer.ts", "../ts/classes/input/gamepad.ts", "../ts/classes/input/gamepadManager.ts", "../ts/classes/elements/domText.ts", "../ts/classes/input/inputDevices.ts", "../ts/classes/util/utils.ts", "../ts/classes/util/math/vector3.ts", "../node_modules/gl-matrix/esm/common.js", "../node_modules/gl-matrix/esm/mat4.js", "../node_modules/gl-matrix/esm/vec3.js", "../ts/classes/util/math/matrix4.ts", "../ts/classes/util/math/quaternion.ts", "../ts/classes/util/math/transform.ts", "../ts/classes/webgl2/meshes/sceneObject.ts", "../ts/classes/webgl2/meshes/containerObject.ts", "../ts/classes/webgl2/meshes/baseMesh.ts", "../ts/classes/webgl2/meshes/cone.ts", "../ts/classes/webgl2/meshes/cylinder.ts", "../ts/classes/webgl2/meshes/arrow.ts", "../ts/classes/webgl2/meshes/icoSphere.ts", "../ts/classes/webgl2/lights/shadowMap.ts", "../ts/classes/webgl2/lights/light.ts", "../ts/classes/webgl2/lights/lightManager.ts", "../ts/classes/webgl2/scene.ts", "../ts/classes/webgl2/camera.ts", "../ts/classes/webgl2/material.ts", "../ts/classes/webgl2/meshes/plane.ts", "../ts/classes/testLevel.ts", "../ts/classes/ticker.ts", "../ts/classes/util/loader.ts", "../ts/game.ts", "../ts/index.ts"],
  "sourcesContent": ["export function v2(n: [number, number?] | number, y?: number) {\r\n\tif (typeof n === 'number') {\r\n\t\treturn Vector2.f(n, y);\r\n\t} else if (typeof n === 'undefined') {\r\n\t\treturn Vector2.f(0);\r\n\t} else {\r\n\t\treturn Vector2.f(...n);\r\n\t}\r\n}\r\n\r\nexport class Vector2 {\r\n\tx: number;\r\n\ty: number;\r\n\tstatic Vector2: {};\r\n\tconstructor(x: number, y: number) {\r\n\t\tthis.x = (x === undefined) ? 0 : x;\r\n\t\tthis.y = (y === undefined) ? 0 : y;\r\n\t}\r\n\r\n\tstatic f(x: number = 0, y: number = x) {\r\n\t\treturn new Vector2(x, y);\r\n\t}\r\n\r\n\tisZero(): boolean {\r\n\t\treturn (this.x === 0 && this.y === 0)\r\n\t}\r\n\r\n\tclone(): Vector2 {\r\n\t\treturn new Vector2(this.x, this.y);\r\n\t}\r\n\r\n\tadd(vector: Vector2) {\r\n\t\treturn new Vector2(this.x + vector.x, this.y + vector.y);\r\n\t}\r\n\r\n\tmultiply(vector: Vector2) {\r\n\t\treturn new Vector2(this.x * vector.x, this.y * vector.y);\r\n\t}\r\n\r\n\tsubtract(vector: Vector2) {\r\n\t\treturn new Vector2(this.x - vector.x, this.y - vector.y);\r\n\t}\r\n\r\n\tscale(scalar: number) {\r\n\t\treturn new Vector2(this.x * scalar, this.y * scalar);\r\n\t}\r\n\r\n\tdot(vector: Vector2) {\r\n\t\treturn (this.x * vector.x + this.y + vector.y);\r\n\t}\r\n\r\n\tmoveTowards(vector: Vector2, t: number) {\r\n\t\tt = Math.min(t, 1); // still allow negative t\r\n\t\tvar diff = vector.subtract(this);\r\n\t\treturn this.add(diff.scale(t));\r\n\t}\r\n\r\n\tmagnitude() {\r\n\t\treturn Math.sqrt(this.magnitudeSqr());\r\n\t}\r\n\r\n\tmagnitudeSqr() {\r\n\t\treturn (this.x * this.x + this.y * this.y);\r\n\t}\r\n\r\n\tclampMagnitude( max:number = 1 ) {\r\n\t\tif (this.magnitude() === 0) return v2(0);\r\n\t\treturn this.scale( 1/ this.magnitude() || 1 ).scale( Math.min( max, this.magnitude() ) );\r\n\t}\r\n\r\n\tdistance(vector: Vector2) {\r\n\t\treturn Math.sqrt(this.distanceSqr(vector));\r\n\t}\r\n\r\n\tdistanceSqr(vector: Vector2) {\r\n\t\tvar deltaX = this.x - vector.x;\r\n\t\tvar deltaY = this.y - vector.y;\r\n\t\treturn (deltaX * deltaX + deltaY * deltaY);\r\n\t}\r\n\r\n\tnormalize() {\r\n\t\tvar mag = this.magnitude();\r\n\t\tvar vector = this.clone();\r\n\t\tif (Math.abs(mag) < 1e-9) {\r\n\t\t\tvector.x = 0;\r\n\t\t\tvector.y = 0;\r\n\t\t} else {\r\n\t\t\tvector.x /= mag;\r\n\t\t\tvector.y /= mag;\r\n\t\t}\r\n\t\treturn vector;\r\n\t}\r\n\r\n\tangleDegrees() {\r\n\t\treturn this.angle() * (180/Math.PI);\r\n\t}\r\n\r\n\tangle() {\r\n\t\treturn Math.atan2(this.y, this.x);\r\n\t}\r\n\r\n\r\n\trotate(rad: number) {\r\n\t\tvar cos = Math.cos(rad);\r\n\t\tvar sin = Math.sin(rad);\r\n\t\treturn new Vector2(\r\n\t\t\tthis.x * cos - this.y * sin,\r\n\t\t\tthis.x * sin + this.y * cos\r\n\t\t);\r\n\t}\r\n\r\n\ttoPrecision(precision: number) {\r\n\t\tvar vector = this.clone();\r\n\t\tvector.x = +vector.x.toFixed(precision);\r\n\t\tvector.y = +vector.y.toFixed(precision);\r\n\t\treturn vector;\r\n\t}\r\n\r\n\ttoString() {\r\n\t\tvar vector = this.toPrecision(1);\r\n\t\treturn (\"[\" + vector.x + \"; \" + vector.y + \"]\");\r\n\t}\r\n\r\n\tpublic clamp(min:Vector2, max:Vector2) {\r\n\t\treturn Vector2.clamp(this, min, max);\r\n    }\r\n\r\n\tpublic static min(a:Vector2, b:Vector2) {\r\n        return new Vector2(\r\n\t\t\tMath.min(a.x, b.x),\r\n\t\t\tMath.min(a.y, b.y),\r\n\t\t)\r\n    }\r\n\r\n\tpublic static max(a:Vector2, b:Vector2) {\r\n\t\treturn new Vector2(\r\n\t\t\tMath.max(a.x, b.x),\r\n\t\t\tMath.max(a.y, b.y),\r\n\t\t)\r\n    }\r\n\r\n\tpublic static clamp(value:Vector2, min:Vector2, max:Vector2) {\r\n        return Vector2.max(Vector2.min(value, min), max);\r\n    }\r\n\r\n\tpublic clampMagnitute(mag: number) {\r\n\t\treturn Vector2.clampMagnitute(this, mag);\r\n    }\r\n\r\n\tget array() {\r\n\t\treturn [this.x, this.y];\r\n\t}\r\n\r\n\tset array(a: [number, number]) {\r\n\t\t[this.x, this.y] = a;\r\n\t}\r\n\r\n\tget surfaceArea():number {\r\n\t\treturn this.x*this.y\r\n\t}\r\n\r\n\r\n\tpublic static clampMagnitute(value:Vector2, mag: number) {\r\n\t\tvar ratio = value.magnitude() / mag;\r\n\t\treturn new Vector2(value.x / ratio, value.y / ratio);\r\n    }\r\n\r\n\tstatic get zero() {\r\n\t\treturn new Vector2(0, 0);\r\n\t}\r\n\tstatic get down() {\r\n\t\treturn new Vector2(0, -1);\r\n\t}\r\n\tstatic get up() {\r\n\t\treturn new Vector2(0, 1);\r\n\t}\r\n\tstatic get right() {\r\n\t\treturn new Vector2(1, 0);\r\n\t}\r\n\tstatic get left() {\r\n\t\treturn new Vector2(-1, 0);\r\n\t}\r\n\tstatic get fromDegree() {\r\n\t\treturn new Vector2(0, 0);\r\n\t}\r\n}\r\n", "import { glob } from '../../game';\r\nimport { TickerReturnData } from '../ticker';\r\nimport { Events } from \"../util/event\";\r\n\r\nexport type ElementAttributes = {\r\n\r\n};\r\n\r\nexport abstract class Element {\r\n    public abstract rendererType: 'dom' | 'gl';\r\n\r\n    private events: Events<unknown>[] = [];\r\n\r\n    get t(): TickerReturnData {\r\n        return glob.game.t;\r\n    }\r\n\r\n    public parent!: Element;\r\n\r\n    public build(): void {\r\n        //\r\n    }\r\n\r\n    addEvent(e: Events<unknown>) {\r\n        this.events.push(e);\r\n    }\r\n\r\n    getEvent(id: string) {\r\n        return this.events.find((e) => id === e.id);\r\n    }\r\n}\r\n", "import { Element, ElementAttributes } from '../elements/element';\r\nimport { Vector2, v2 } from '../util/math/vector2';\r\nimport { TickerReturnData } from '../ticker';\r\n\r\n\r\nexport type DomElementAttributes = ElementAttributes & {\r\n    id?: string,\r\n    background?: string,\r\n    position?: Vector2;\r\n    size?: Vector2;\r\n};\r\nexport class DomElement<T extends keyof HTMLElementTagNameMap> extends Element {\r\n    public dom: HTMLElementTagNameMap[T];\r\n    public children: DomElement<any>[] = [];\r\n    public rendererType = 'dom' as const;\r\n    private _position: Vector2 = v2(0);\r\n    public get position(): Vector2 {\r\n        return this._position;\r\n    }\r\n    public set position(value: Vector2) {\r\n        this._position = value;\r\n        this.x = value.x;\r\n        this.y = value.y\r\n    }\r\n    public size: Vector2 = v2(0);\r\n\r\n    public get id() { return this.dom.id; }\r\n\r\n    public set id(value: string) {\r\n        if (value) {\r\n            this.dom.id = value;\r\n        }\r\n    }\r\n\r\n    public get x(): number {\r\n        return Math.round(Number(this.dom.style.left.replace(/\\D/g,'')));\r\n    }\r\n    public set x(n: number) {\r\n        if (this.dom){\r\n            this.dom.style.left = `${n}px`;\r\n        }\r\n    }\r\n    public get y(): number {\r\n        return Math.round(Number(this.dom.style.bottom.replace(/\\D/g,'')));\r\n    }\r\n    public set y(n: number) {\r\n        if (this.dom){\r\n            this.dom.style.bottom = `${n}px`;\r\n        }\r\n    }\r\n\r\n    public set visible(value: boolean) {\r\n        this.dom? this.dom.style.display = value ? 'block' : 'none': null\r\n    }\r\n\r\n    public set background(v: string) {\r\n        this.dom.style.background = v;\r\n    }\r\n\r\n    public get width() {\r\n        return Math.round(Number(this.dom.style.width.replace(/\\D/g,'')));\r\n    }\r\n    public set width(value: number) {\r\n        if (this.dom) {\r\n            this.dom.style.width = `${value}px`;\r\n            this.dom.setAttribute('width', String(value));\r\n        }\r\n    }\r\n\r\n    public get height() {\r\n        return Math.round(Number(this.dom.style.height.replace(/\\D/g,'')));\r\n    }\r\n    public set height(value: number) {\r\n        if (this.dom) {\r\n            this.dom.style.height = `${value}px`;\r\n            this.dom.setAttribute('height', String(value));\r\n        }\r\n    }\r\n\r\n    constructor(type: T, attr: DomElementAttributes = {}) {\r\n        super();\r\n        this.dom = document.createElement(type);\r\n        this.dom.style.position = 'absolute';\r\n        this.dom.style.transformOrigin = 'bottom left';\r\n        this.dom.style.pointerEvents = 'none';\r\n        this.dom.style.bottom = '0px';\t\r\n        this.id = attr.id || '';\r\n        this.background = attr.background || '';\r\n        this.size = attr.size || Vector2.zero;\r\n        this.position = attr.position || Vector2.zero;\r\n        \r\n    }\r\n\r\n    public ready() {\r\n        this.build();\r\n    }\r\n\r\n    public tick(obj: TickerReturnData): void {\r\n        this.children.forEach((c)=>{\r\n            c.tick(obj);\r\n        })\r\n    }\r\n\r\n    public appendChild(e: DomElement<any>) {\r\n        this.dom.appendChild(e.dom);\r\n    }\r\n\r\n    public addChild(child: DomElement<any>) {\r\n        this.children.push(child);\r\n        this.dom.appendChild(child.dom);\r\n    }\r\n\r\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        this.dom.addEventListener(type, listener, options);\r\n    };\r\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void {\r\n        this.dom.removeEventListener(type, listener, options);\r\n    };\r\n\r\n\r\n\r\n}\r\n", "export type eventFunction<T> = (v: T) => void;\r\nexport class Events<T> {\r\n    public id: string;\r\n    private subscribers: Record<string, eventFunction<T>> = {};\r\n    constructor(id: string) {\r\n        this.id = id;\r\n    }\r\n\r\n    public subscribe(key: string, func: eventFunction<T>) {\r\n        this.subscribers[key] = func;\r\n    }\r\n\r\n    public alert(v: T) {\r\n        Object.values(this.subscribers).forEach((s) => {\r\n            s(v);\r\n        });\r\n    }\r\n}\r\n", "export class Buffer {\r\n    private gl: WebGL2RenderingContext;\r\n    private buffer: WebGLBuffer;\r\n    private type: number;\r\n    private usage: number;\r\n\r\n    constructor(\r\n        gl: WebGL2RenderingContext,\r\n        type: number = gl.ARRAY_BUFFER,\r\n        usage: number = gl.STATIC_DRAW\r\n    ) {\r\n        this.gl = gl;\r\n        this.type = type;\r\n        this.usage = usage;\r\n\r\n        const buffer = gl.createBuffer();\r\n        if (!buffer) {\r\n            throw new Error('Failed to create buffer');\r\n        }\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    public bind(): void {\r\n        this.gl.bindBuffer(this.type, this.buffer);\r\n    }\r\n\r\n    public unbind(): void {\r\n        this.gl.bindBuffer(this.type, null);\r\n    }\r\n\r\n    public setData(data: BufferSource): void {\r\n        this.bind();\r\n        this.gl.bufferData(this.type, data, this.usage);\r\n    }\r\n\r\n    public updateData(data: BufferSource, offset: number = 0): void {\r\n        this.bind();\r\n        this.gl.bufferSubData(this.type, offset, data);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.gl.deleteBuffer(this.buffer);\r\n    }\r\n}\r\n\r\nexport class VertexArray {\r\n    private gl: WebGL2RenderingContext;\r\n    private vao: WebGLVertexArrayObject;\r\n\r\n    constructor(gl: WebGL2RenderingContext) {\r\n        this.gl = gl;\r\n        const vao = gl.createVertexArray();\r\n        if (!vao) {\r\n            throw new Error('Failed to create vertex array object');\r\n        }\r\n        this.vao = vao;\r\n    }\r\n\r\n    public bind(): void {\r\n        this.gl.bindVertexArray(this.vao);\r\n    }\r\n\r\n    public unbind(): void {\r\n        this.gl.bindVertexArray(null);\r\n    }\r\n\r\n    public setAttributePointer(\r\n        location: number,\r\n        size: number,\r\n        type: number,\r\n        normalized: boolean = false,\r\n        stride: number = 0,\r\n        offset: number = 0\r\n    ): void {\r\n        this.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\r\n        this.gl.enableVertexAttribArray(location);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.gl.deleteVertexArray(this.vao);\r\n    }\r\n}\r\n\r\nexport class VertexBuffer extends Buffer {\r\n    constructor(gl: WebGL2RenderingContext, usage: number = gl.STATIC_DRAW) {\r\n        super(gl, gl.ARRAY_BUFFER, usage);\r\n    }\r\n}\r\n\r\nexport class IndexBuffer extends Buffer {\r\n    private count: number = 0;\r\n\r\n    constructor(gl: WebGL2RenderingContext, usage: number = gl.STATIC_DRAW) {\r\n        super(gl, gl.ELEMENT_ARRAY_BUFFER, usage);\r\n    }\r\n\r\n    public setData(data: BufferSource): void {\r\n        super.setData(data);\r\n        this.count = data.byteLength / 2; // Assuming 16-bit indices\r\n    }\r\n\r\n    public getCount(): number {\r\n        return this.count;\r\n    }\r\n} ", "export interface ShaderUniformData {\r\n    type: string;\r\n    value: number | number[] | Float32Array | Int32Array;\r\n    location?: WebGLUniformLocation;\r\n    isArray?: boolean;\r\n    arraySize?: number;\r\n}\r\n\r\nexport interface ShaderAttributeData {\r\n    type: string;\r\n    size: number;\r\n    location: number;\r\n}\r\n\r\nexport class ShaderManager {\r\n    private gl: WebGL2RenderingContext;\r\n    private shaderPrograms: Map<string, WebGLProgram>;\r\n    private uniforms: Map<string, Map<string, ShaderUniformData>>;\r\n    private attributes: Map<string, Map<string, ShaderAttributeData>>;\r\n    private currentProgram: string | null = null;\r\n\r\n    constructor(gl: WebGL2RenderingContext) {\r\n        this.gl = gl;\r\n        this.shaderPrograms = new Map();\r\n        this.uniforms = new Map();\r\n        this.attributes = new Map();\r\n    }\r\n\r\n    public loadShaderProgram(\r\n        name: string,\r\n        vertexSource: string,   \r\n        fragmentSource: string\r\n    ) {\r\n        try {\r\n            const vertexShader = this.compileShader(vertexSource, this.gl.VERTEX_SHADER);\r\n            const fragmentShader = this.compileShader(fragmentSource, this.gl.FRAGMENT_SHADER);\r\n            \r\n            const program = this.createProgram(vertexShader, fragmentShader);\r\n            this.shaderPrograms.set(name, program);\r\n            \r\n            // Initialize uniform and attribute maps for this program\r\n            this.uniforms.set(name, new Map());\r\n            this.attributes.set(name, new Map());\r\n            \r\n            // Clean up individual shaders\r\n            this.gl.deleteShader(vertexShader);\r\n            this.gl.deleteShader(fragmentShader);\r\n            \r\n            // Parse uniforms and attributes\r\n            this.introspectShaderProgram(name);\r\n        } catch (error) {\r\n            console.error(`Failed to load shader program '${name}':`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private compileShader(source: string, type: number): WebGLShader {\r\n        const shader = this.gl.createShader(type);\r\n        if (!shader) {\r\n            throw new Error('Failed to create shader');\r\n        }\r\n\r\n        this.gl.shaderSource(shader, source);\r\n        this.gl.compileShader(shader);\r\n\r\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n            const info = this.gl.getShaderInfoLog(shader);\r\n            this.gl.deleteShader(shader);\r\n            throw new Error(`Shader compilation error: ${info}`);\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    private createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\r\n        const program = this.gl.createProgram();\r\n        if (!program) {\r\n            throw new Error('Failed to create shader program');\r\n        }\r\n\r\n        this.gl.attachShader(program, vertexShader);\r\n        this.gl.attachShader(program, fragmentShader);\r\n        this.gl.linkProgram(program);\r\n\r\n        if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\r\n            const info = this.gl.getProgramInfoLog(program);\r\n            this.gl.deleteProgram(program);\r\n            throw new Error(`Shader program linking error: ${info}`);\r\n        }\r\n\r\n        return program;\r\n    }\r\n\r\n    private introspectShaderProgram(name: string): void {\r\n        const program = this.shaderPrograms.get(name);\r\n        if (!program) {\r\n            throw new Error(`Shader program '${name}' not found`);\r\n        }\r\n\r\n        // Get active uniforms\r\n        const numUniforms = this.gl.getProgramParameter(program, this.gl.ACTIVE_UNIFORMS);\r\n        const uniformMap = this.uniforms.get(name)!;\r\n\r\n        for (let i = 0; i < numUniforms; i++) {\r\n            const info = this.gl.getActiveUniform(program, i);\r\n            if (!info) continue;\r\n\r\n            const location = this.gl.getUniformLocation(program, info.name);\r\n            if (!location) continue;\r\n\r\n            // For array uniforms, store with the base name (without array index)\r\n            const baseName = info.name.replace(/\\[\\d+\\].*$/, '');\r\n            \r\n            uniformMap.set(baseName, {\r\n                type: this.getUniformTypeName(info.type),\r\n                value: this.getDefaultValueForType(info.type),\r\n                location,\r\n                isArray: info.size > 1,\r\n                arraySize: info.size\r\n            });\r\n        }\r\n\r\n        // Get active attributes\r\n        const numAttributes = this.gl.getProgramParameter(program, this.gl.ACTIVE_ATTRIBUTES);\r\n        const attributeMap = this.attributes.get(name)!;\r\n\r\n        for (let i = 0; i < numAttributes; i++) {\r\n            const info = this.gl.getActiveAttrib(program, i);\r\n            if (!info) continue;\r\n\r\n            const location = this.gl.getAttribLocation(program, info.name);\r\n            if (location === -1) continue;\r\n\r\n            attributeMap.set(info.name, {\r\n                type: this.getAttributeTypeName(info.type),\r\n                size: this.getAttributeSize(info.type),\r\n                location\r\n            });\r\n        }\r\n    }\r\n\r\n    public useProgram(name: string): void {\r\n        const program = this.shaderPrograms.get(name);\r\n        if (!program) {\r\n            throw new Error(`Shader program '${name}' not found`);\r\n        }\r\n        this.gl.useProgram(program);\r\n        this.currentProgram = name;\r\n    }\r\n\r\n    public setUniform(name: string, value: number | number[] | Float32Array | Int32Array): void {\r\n        if (!this.currentProgram) {\r\n            throw new Error('No shader program is currently in use');\r\n        }\r\n\r\n        const uniformMap = this.uniforms.get(this.currentProgram);\r\n        if (!uniformMap) {\r\n            throw new Error(`Uniform map not found for program '${this.currentProgram}'`);\r\n        }\r\n\r\n        const uniform = uniformMap.get(name);\r\n        if (!uniform || !uniform.location) {\r\n            throw new Error(`Uniform '${name}' not found in program '${this.currentProgram}'. Make sure to use the u_camelCase naming convention for uniforms, v_camelCase for varyings, and a_camelCase for attributes.`);\r\n        }\r\n\r\n        this.setUniformValue(uniform.type, uniform.location, value);\r\n        uniform.value = value;\r\n    }\r\n\r\n    private setUniformValue(\r\n        type: string,\r\n        location: WebGLUniformLocation,\r\n        value: number | number[] | Float32Array | Int32Array\r\n    ): void {\r\n        switch (type) {\r\n            case 'float':\r\n                if (Array.isArray(value) || value instanceof Float32Array) {\r\n                    this.gl.uniform1fv(location, value);\r\n                } else {\r\n                    this.gl.uniform1f(location, value as number);\r\n                }\r\n                break;\r\n            case 'vec2':\r\n                this.gl.uniform2fv(location, value as Float32Array);\r\n                break;\r\n            case 'vec3':\r\n                this.gl.uniform3fv(location, value as Float32Array);\r\n                break;\r\n            case 'vec4':\r\n                this.gl.uniform4fv(location, value as Float32Array);\r\n                break;\r\n            case 'mat4':\r\n                this.gl.uniformMatrix4fv(location, false, value as Float32Array);\r\n                break;\r\n            case 'mat4[]':\r\n                // Handle array of mat4\r\n                this.gl.uniformMatrix4fv(location, false, value as Float32Array);\r\n                break;\r\n            case 'mat3':\r\n                this.gl.uniformMatrix3fv(location, false, value as Float32Array);\r\n                break;\r\n            case 'int':\r\n            case 'bool':\r\n            case 'sampler2D':\r\n            case 'sampler2D[]':\r\n                if (Array.isArray(value) || value instanceof Int32Array) {\r\n                    this.gl.uniform1iv(location, value);\r\n                } else {\r\n                    this.gl.uniform1i(location, value as number);\r\n                }\r\n                break;\r\n            case 'Light':\r\n                // Handle Light struct array\r\n                const data = value as Float32Array;\r\n                this.gl.uniform1fv(location, data);\r\n                break;\r\n            default:\r\n                console.warn(`Unsupported uniform type: ${type}`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public getAttributeLocation(name: string): number {\r\n        if (!this.currentProgram) {\r\n            throw new Error('No shader program is currently in use');\r\n        }\r\n\r\n        const attributeMap = this.attributes.get(this.currentProgram);\r\n        if (!attributeMap) {\r\n            throw new Error(`Attribute map not found for program '${this.currentProgram}'`);\r\n        }\r\n\r\n        const attribute = attributeMap.get(name);\r\n        if (!attribute) {\r\n            throw new Error(`Attribute '${name}' not found in program '${this.currentProgram}'. Make sure to use the a_camelCase naming convention.`);\r\n        }\r\n\r\n        return attribute.location;\r\n    }\r\n\r\n    private getUniformTypeName(type: number): string {\r\n        switch (type) {\r\n            case this.gl.FLOAT: return 'float';\r\n            case this.gl.FLOAT_VEC2: return 'vec2';\r\n            case this.gl.FLOAT_VEC3: return 'vec3';\r\n            case this.gl.FLOAT_VEC4: return 'vec4';\r\n            case this.gl.FLOAT_MAT4: \r\n                return 'mat4';\r\n            case this.gl.FLOAT_MAT4 | 0x20: // Array flag\r\n                return 'mat4[]';\r\n            case this.gl.FLOAT_MAT3: return 'mat3';\r\n            case this.gl.INT: return 'int';\r\n            case this.gl.BOOL: return 'bool';\r\n            case this.gl.SAMPLER_2D: \r\n                return 'sampler2D';\r\n            case this.gl.SAMPLER_2D | 0x20: // Array flag\r\n                return 'sampler2D[]';\r\n            case 0x8B52: // GL_STRUCT\r\n                return 'Light'; // Handle Light struct type\r\n            default:\r\n                console.warn(`Unknown uniform type: ${type}`);\r\n                return 'unknown';\r\n        }\r\n    }\r\n\r\n    private getAttributeTypeName(type: number): string {\r\n        switch (type) {\r\n            case this.gl.FLOAT: return 'float';\r\n            case this.gl.FLOAT_VEC2: return 'vec2';\r\n            case this.gl.FLOAT_VEC3: return 'vec3';\r\n            case this.gl.FLOAT_VEC4: return 'vec4';\r\n            default: return 'unknown';\r\n        }\r\n    }\r\n\r\n    private getAttributeSize(type: number): number {\r\n        switch (type) {\r\n            case this.gl.FLOAT: return 1;\r\n            case this.gl.FLOAT_VEC2: return 2;\r\n            case this.gl.FLOAT_VEC3: return 3;\r\n            case this.gl.FLOAT_VEC4: return 4;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    private getDefaultValueForType(type: number): number | Float32Array {\r\n        switch (type) {\r\n            case this.gl.FLOAT:\r\n            case this.gl.INT:\r\n            case this.gl.BOOL:\r\n            case this.gl.SAMPLER_2D:\r\n                return 0;\r\n            case this.gl.FLOAT_VEC2:\r\n                return new Float32Array(2);\r\n            case this.gl.FLOAT_VEC3:\r\n                return new Float32Array(3);\r\n            case this.gl.FLOAT_VEC4:\r\n                return new Float32Array(4);\r\n            case this.gl.FLOAT_MAT4:\r\n                return new Float32Array(16);\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        // Delete all shader programs\r\n        for (const [name, program] of this.shaderPrograms) {\r\n            this.gl.deleteProgram(program);\r\n        }\r\n        this.shaderPrograms.clear();\r\n        this.uniforms.clear();\r\n        this.attributes.clear();\r\n        this.currentProgram = null;\r\n    }\r\n} ", "export const fragmentShaderSource = `#version 300 es\r\nprecision highp float;\r\n\r\n// Maximum number of lights\r\n#define MAX_LIGHTS 10\r\n\r\n// Light types\r\n#define LIGHT_TYPE_INACTIVE -1\r\n#define LIGHT_TYPE_AMBIENT 0\r\n#define LIGHT_TYPE_DIRECTIONAL 1\r\n#define LIGHT_TYPE_POINT 2\r\n#define LIGHT_TYPE_SPOT 3\r\n\r\n// Input from vertex shader\r\nin vec3 v_normal;\r\nin vec2 v_texCoord;\r\nin vec3 v_fragPos;\r\nin vec3 v_color;\r\nin vec4 v_fragPosLightSpace;\r\n\r\n// Material structure\r\nstruct Material {\r\n    vec3 ambient;\r\n    vec3 diffuse;\r\n    vec3 specular;\r\n    float shininess;\r\n    sampler2D diffuseMap;\r\n};\r\n\r\n// Light uniforms\r\nuniform int u_lightTypes[MAX_LIGHTS];\r\nuniform vec3 u_lightPositions[MAX_LIGHTS];\r\nuniform vec3 u_lightDirections[MAX_LIGHTS];\r\nuniform vec3 u_lightColors[MAX_LIGHTS];\r\nuniform float u_lightIntensities[MAX_LIGHTS];\r\nuniform float u_lightConstants[MAX_LIGHTS];\r\nuniform float u_lightLinears[MAX_LIGHTS];\r\nuniform float u_lightQuadratics[MAX_LIGHTS];\r\nuniform float u_lightCutOffs[MAX_LIGHTS];\r\nuniform float u_lightOuterCutOffs[MAX_LIGHTS];\r\nuniform int u_numLights;\r\n\r\n// Material uniforms\r\nuniform Material u_material;\r\nuniform bool u_useTexture;\r\n\r\n// Shadow mapping uniforms\r\nuniform sampler2D u_shadowMap0;\r\nuniform sampler2D u_shadowMap1;\r\nuniform sampler2D u_shadowMap2;\r\nuniform sampler2D u_shadowMap3;\r\nuniform sampler2D u_shadowMap4;\r\nuniform sampler2D u_shadowMap5;\r\nuniform sampler2D u_shadowMap6;\r\nuniform sampler2D u_shadowMap7;\r\nuniform sampler2D u_shadowMap8;\r\nuniform sampler2D u_shadowMap9;\r\nuniform mat4 u_lightSpaceMatrices[MAX_LIGHTS];\r\nuniform bool u_castsShadow[MAX_LIGHTS];\r\n\r\n// Other uniforms\r\nuniform vec3 u_viewPos;\r\n\r\n// Output\r\nout vec4 fragColor;\r\n\r\nfloat getShadowMap(int index, vec2 coords) {\r\n    // We have to use a switch statement because WebGL2 requires constant array indices for samplers\r\n    switch(index) {\r\n        case 0: return texture(u_shadowMap0, coords).r;\r\n        case 1: return texture(u_shadowMap1, coords).r;\r\n        case 2: return texture(u_shadowMap2, coords).r;\r\n        case 3: return texture(u_shadowMap3, coords).r;\r\n        case 4: return texture(u_shadowMap4, coords).r;\r\n        case 5: return texture(u_shadowMap5, coords).r;\r\n        case 6: return texture(u_shadowMap6, coords).r;\r\n        case 7: return texture(u_shadowMap7, coords).r;\r\n        case 8: return texture(u_shadowMap8, coords).r;\r\n        case 9: return texture(u_shadowMap9, coords).r;\r\n        default: return 1.0; // No shadow if invalid index\r\n    }\r\n}\r\n\r\nfloat ShadowCalculation(vec4 fragPosLightSpace, vec3 normal, vec3 lightDir, int shadowMapIndex) {\r\n    // Perform perspective divide\r\n    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;\r\n    \r\n    // Transform to [0,1] range\r\n    projCoords = projCoords * 0.5 + 0.5;\r\n    \r\n    // Get closest depth value from light's perspective using the helper function\r\n    float closestDepth = getShadowMap(shadowMapIndex, projCoords.xy);\r\n    \r\n    // Get current depth\r\n    float currentDepth = projCoords.z;\r\n    \r\n    // Calculate bias based on surface angle\r\n    float cosTheta = dot(normal, lightDir);\r\n    float bias = 0.01; // Moderate base bias\r\n    \r\n    // Add angle-dependent component\r\n    bias += 0.02 * (1.0 - max(cosTheta, 0.0));\r\n    \r\n    // PCF (Percentage Closer Filtering)\r\n    float shadow = 0.0;\r\n    vec2 texelSize = 1.0 / vec2(textureSize(u_shadowMap0, 0)); // All shadow maps are same size\r\n    for(int x = -1; x <= 1; ++x) {\r\n        for(int y = -1; y <= 1; ++y) {\r\n            float pcfDepth = getShadowMap(shadowMapIndex, projCoords.xy + vec2(x, y) * texelSize);\r\n            shadow += (currentDepth - bias) > pcfDepth ? 1.0 : 0.0;\r\n        }\r\n    }\r\n    shadow /= 9.0;\r\n    \r\n    // Keep shadow at 0.0 when outside the far plane region of the light's frustum\r\n    if(projCoords.z > 1.0)\r\n        shadow = 0.0;\r\n        \r\n    return shadow;\r\n}\r\n\r\n// Function to calculate directional light\r\nvec3 calcDirectionalLight(int index, vec3 normal, vec3 viewDir, vec3 baseColor) {\r\n    vec3 lightDir = normalize(-u_lightDirections[index]);\r\n    \r\n    // Diffuse\r\n    float diff = max(dot(normal, lightDir), 0.0);\r\n    \r\n    // Specular\r\n    vec3 reflectDir = reflect(-lightDir, normal);\r\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_material.shininess);\r\n    \r\n    vec3 ambient = u_lightColors[index] * u_material.ambient;\r\n    vec3 diffuse = u_lightColors[index] * diff * baseColor;\r\n    vec3 specular = u_lightColors[index] * spec * u_material.specular;\r\n    \r\n    return (ambient + diffuse + specular) * u_lightIntensities[index];\r\n}\r\n\r\n// Function to calculate point light\r\nvec3 calcPointLight(int index, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 baseColor) {\r\n    vec3 lightDir = normalize(u_lightPositions[index] - fragPos);\r\n    \r\n    // Diffuse\r\n    float diff = max(dot(normal, lightDir), 0.0);\r\n    \r\n    // Specular\r\n    vec3 reflectDir = reflect(-lightDir, normal);\r\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_material.shininess);\r\n    \r\n    // Attenuation\r\n    float distance = length(u_lightPositions[index] - fragPos);\r\n    float attenuation = 1.0 / (u_lightConstants[index] + u_lightLinears[index] * distance + u_lightQuadratics[index] * distance * distance);\r\n    \r\n    vec3 ambient = u_lightColors[index] * u_material.ambient;\r\n    vec3 diffuse = u_lightColors[index] * diff * baseColor;\r\n    vec3 specular = u_lightColors[index] * spec * u_material.specular;\r\n    \r\n    return (ambient + diffuse + specular) * attenuation * u_lightIntensities[index];\r\n}\r\n\r\n// Function to calculate spot light\r\nvec3 calcSpotLight(int index, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 baseColor) {\r\n    vec3 lightDir = normalize(u_lightPositions[index] - fragPos);\r\n    \r\n    // Spot light intensity\r\n    float theta = dot(lightDir, normalize(-u_lightDirections[index]));\r\n    float epsilon = u_lightCutOffs[index] - u_lightOuterCutOffs[index];\r\n    float intensity = clamp((theta - u_lightOuterCutOffs[index]) / epsilon, 0.0, 1.0);\r\n    \r\n    // Use point light calculation and multiply by spot intensity\r\n    return calcPointLight(index, normal, fragPos, viewDir, baseColor) * intensity;\r\n}\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(v_normal);\r\n    vec3 viewDir = normalize(u_viewPos - v_fragPos);\r\n    \r\n    // Get base color from texture or vertex color\r\n    vec3 baseColor;\r\n    if (u_useTexture) {\r\n        baseColor = texture(u_material.diffuseMap, v_texCoord).rgb;\r\n    } else {\r\n        baseColor = v_color;\r\n    }\r\n    \r\n    vec3 result = vec3(0.0);\r\n    \r\n    // Calculate contribution from each light\r\n    for(int i = 0; i < u_numLights; i++) {\r\n        if(i >= MAX_LIGHTS) break;\r\n        \r\n        // Skip inactive lights\r\n        if(u_lightTypes[i] == LIGHT_TYPE_INACTIVE) continue;\r\n        \r\n        float shadow = 0.0;\r\n        if(u_castsShadow[i]) {\r\n            vec4 fragPosLightSpace = u_lightSpaceMatrices[i] * vec4(v_fragPos, 1.0);\r\n            shadow = ShadowCalculation(fragPosLightSpace, normal, normalize(u_lightPositions[i] - v_fragPos), i);\r\n        }\r\n        \r\n        if(u_lightTypes[i] == LIGHT_TYPE_AMBIENT) {\r\n            result += u_lightColors[i] * u_lightIntensities[i] * baseColor;\r\n        }\r\n        else if(u_lightTypes[i] == LIGHT_TYPE_DIRECTIONAL) {\r\n            vec3 lighting = calcDirectionalLight(i, normal, viewDir, baseColor);\r\n            result += lighting * (1.0 - shadow);\r\n        }\r\n        else if(u_lightTypes[i] == LIGHT_TYPE_POINT) {\r\n            vec3 lighting = calcPointLight(i, normal, v_fragPos, viewDir, baseColor);\r\n            result += lighting * (1.0 - shadow);\r\n        }\r\n        else if(u_lightTypes[i] == LIGHT_TYPE_SPOT) {\r\n            vec3 lighting = calcSpotLight(i, normal, v_fragPos, viewDir, baseColor);\r\n            result += lighting * (1.0 - shadow);\r\n        }\r\n    }\r\n    \r\n    fragColor = vec4(result, 1.0);\r\n}`", "export const vertexShaderSource = `#version 300 es\r\nprecision highp float;\r\n\r\n// Attributes\r\nin vec3 a_position;\r\nin vec3 a_normal;\r\nin vec2 a_texCoord;\r\nin vec3 a_color;\r\n\r\n// Uniforms\r\nuniform mat4 u_modelMatrix;\r\nuniform mat4 u_viewMatrix;\r\nuniform mat4 u_projectionMatrix;\r\nuniform mat3 u_normalMatrix; // Added for correct normal transformation\r\n\r\n// Material uniforms\r\nstruct Material {\r\n    vec3 ambient;\r\n    vec3 diffuse;\r\n    vec3 specular;\r\n    float shininess;\r\n    sampler2D diffuseMap;\r\n};\r\nuniform Material u_material;\r\nuniform bool u_useTexture;\r\n\r\n// Varyings (output to fragment shader)\r\nout vec3 v_normal;\r\nout vec2 v_texCoord;\r\nout vec3 v_fragPos;\r\nout vec3 v_color;\r\n\r\nvoid main() {\r\n    v_fragPos = vec3(u_modelMatrix * vec4(a_position, 1.0));\r\n    v_normal = u_normalMatrix * a_normal;\r\n    v_texCoord = a_texCoord;\r\n    v_color = a_color;\r\n    \r\n    gl_Position = u_projectionMatrix * u_viewMatrix * vec4(v_fragPos, 1.0);\r\n}`;\r\n", "export const shadowVertexShaderSource = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 a_position;\r\nuniform mat4 u_lightSpaceMatrix;\r\nuniform mat4 u_modelMatrix;\r\n\r\nvoid main() {\r\n    gl_Position = u_lightSpaceMatrix * u_modelMatrix * vec4(a_position, 1.0);\r\n}\r\n`; ", "import { VertexBuffer, IndexBuffer, VertexArray } from './buffer';\r\nimport { ShaderManager } from './shaderManager';\r\nimport { fragmentShaderSource } from './shaders/fragmentShaderSource';\r\nimport { vertexShaderSource } from './shaders/vertexShaderSource';\r\nimport { shadowVertexShaderSource } from './shaders/shadowVertexShader';\r\n\r\nexport class WebGL2Initializer {\r\n    private canvas: HTMLCanvasElement;\r\n    public readonly ctx: WebGL2RenderingContext | null = null;\r\n    \r\n    public vertexBuffer: VertexBuffer;\r\n    public indexBuffer: IndexBuffer;\r\n    public vao: VertexArray;\r\n    public shaderManager: ShaderManager;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        if (!canvas) {\r\n            throw new Error(`Canvas not found`);\r\n        }\r\n        this.canvas = canvas;\r\n        this.ctx = this.initializeWebGL2();\r\n\r\n        // Initialize basic WebGL objects\r\n        this.shaderManager = new ShaderManager(this.ctx);\r\n        this.vao = new VertexArray(this.ctx);\r\n        this.vertexBuffer = new VertexBuffer(this.ctx);\r\n        this.indexBuffer = new IndexBuffer(this.ctx);\r\n\r\n        // Load and use shader programs\r\n        this.shaderManager.loadShaderProgram('basic', vertexShaderSource, fragmentShaderSource);\r\n        this.shaderManager.loadShaderProgram('shadow', shadowVertexShaderSource, `#version 300 es\r\n            precision highp float;\r\n            out vec4 fragColor;\r\n            void main() {\r\n                // Only depth values are written\r\n            }\r\n        `);\r\n        this.shaderManager.useProgram('basic');\r\n\r\n        // Initialize light arrays\r\n        const numLights = 10;\r\n        const types = new Int32Array(numLights);\r\n        const positions = new Float32Array(numLights * 3);\r\n        const directions = new Float32Array(numLights * 3);\r\n        const colors = new Float32Array(numLights * 3);\r\n        const intensities = new Float32Array(numLights);\r\n        const constants = new Float32Array(numLights);\r\n        const linears = new Float32Array(numLights);\r\n        const quadratics = new Float32Array(numLights);\r\n        const cutOffs = new Float32Array(numLights);\r\n        const outerCutOffs = new Float32Array(numLights);\r\n\r\n        // Initialize all lights as inactive\r\n        types.fill(-1);\r\n        constants.fill(1.0); // Default attenuation constant\r\n\r\n        // Set default uniform values\r\n        this.shaderManager.setUniform('u_numLights', 0);\r\n        this.shaderManager.setUniform('u_lightTypes', types);\r\n        this.shaderManager.setUniform('u_lightPositions', positions);\r\n        this.shaderManager.setUniform('u_lightDirections', directions);\r\n        this.shaderManager.setUniform('u_lightColors', colors);\r\n        this.shaderManager.setUniform('u_lightIntensities', intensities);\r\n        this.shaderManager.setUniform('u_lightConstants', constants);\r\n        this.shaderManager.setUniform('u_lightLinears', linears);\r\n        this.shaderManager.setUniform('u_lightQuadratics', quadratics);\r\n        this.shaderManager.setUniform('u_lightCutOffs', cutOffs);\r\n        this.shaderManager.setUniform('u_lightOuterCutOffs', outerCutOffs);\r\n\r\n        // Initialize shadow mapping arrays\r\n        const castsShadow = new Int32Array(numLights);\r\n        const lightSpaceMatrices = new Float32Array(numLights * 16); // 4x4 matrices\r\n        castsShadow.fill(0); // Default to not casting shadows\r\n\r\n        this.shaderManager.setUniform('u_castsShadow', castsShadow);\r\n        this.shaderManager.setUniform('u_lightSpaceMatrices', lightSpaceMatrices);\r\n\r\n        // Set default material values\r\n        this.shaderManager.setUniform('u_material.ambient', new Float32Array([0.2, 0.2, 0.2]));\r\n        this.shaderManager.setUniform('u_material.diffuse', new Float32Array([0.8, 0.8, 0.8]));\r\n        this.shaderManager.setUniform('u_material.specular', new Float32Array([1.0, 1.0, 1.0]));\r\n        this.shaderManager.setUniform('u_material.shininess', 32.0);\r\n        this.shaderManager.setUniform('u_useTexture', 0);\r\n\r\n        this.shaderManager.setUniform('u_viewPos', new Float32Array([3.0, 2.0, 3.0]));\r\n\r\n        // Enable depth testing and backface culling\r\n        this.ctx.enable(this.ctx.DEPTH_TEST);\r\n        this.ctx.enable(this.ctx.CULL_FACE);\r\n    }\r\n\r\n    private initializeWebGL2(): WebGL2RenderingContext {\r\n        const ctx = this.canvas.getContext('webgl2');\r\n        if (!ctx) {\r\n            throw new Error('WebGL 2 not supported');\r\n        }\r\n        return ctx;\r\n    }\r\n}\r\n", "import { ElementAttributes } from '../elements/element';\r\nimport { Vector2, v2 } from '../util/math/vector2';\r\nimport { TickerReturnData } from '../ticker';\r\nimport { DomElement } from './domElement';\r\nimport { Events } from '../util/event';\r\nimport { glob } from '../../game';\r\nimport { WebGL2Initializer } from '../webgl2/initialise';\r\n\r\nexport type DomElementAttributes = ElementAttributes & {\r\n    id?: string,\r\n    size?: Vector2,\r\n    background?: string,\r\n    position?: Vector2;\r\n};\r\n\r\nexport class Renderer extends DomElement<'canvas'> {\r\n    public tickerData: TickerReturnData;\r\n    private webgl: WebGL2Initializer;\r\n    public get ctx(): WebGL2RenderingContext {\r\n        return this.webgl.ctx;\r\n    }\r\n    public get shaderManager() {\r\n        return this.webgl.shaderManager;\r\n    }\r\n\r\n\r\n    constructor() {\r\n        super('canvas');\r\n        this.dom.style.position = 'absolute';\r\n        this.dom.style.pointerEvents = 'all';\r\n        this.dom.style.bottom = '0px';\r\n        this.dom.style.touchAction = 'none';\r\n        this.dom.tabIndex = 1;\r\n\r\n        this.webgl = new WebGL2Initializer(this.dom);\r\n\r\n        window.addEventListener(\"resize\", () => {\r\n            this.resize();\r\n        });\r\n\r\n        glob.events.resize = new Events('resize');\r\n        this.resize();\r\n    }\r\n\r\n    resize() {\r\n        this.size = v2(document.body.clientWidth, document.body.clientHeight);\r\n        this.dom.style.width = `${this.size.x}px`;\r\n        this.dom.setAttribute('width', String(this.size.x));\r\n        this.dom.style.height = `${this.size.y}px`;\r\n        this.dom.setAttribute('height', String(this.size.y));\r\n\r\n        glob.events.resize.alert(this.size);\r\n        this.ctx.viewport(0, 0, this.size.x, this.size.y);\r\n    }\r\n\r\n    public get width() {\r\n        return this.size.x;\r\n    }\r\n    public set width(value: number) {\r\n        this.dom.style.width = `${value}px`;\r\n        this.dom.setAttribute('width', String(value));\r\n        this.size.x = value;\r\n    }\r\n\r\n    public get height() {\r\n        return this.size.y;\r\n    }\r\n    public set height(value: number) {\r\n        this.dom.style.height = `${value}px`;\r\n        this.dom.setAttribute('height', String(value));\r\n        this.size.y = value;\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n        this.tickerData = obj;\r\n        glob.game.active?.tick(obj);\r\n        glob.game.active?.afterTick(obj);\r\n    }\r\n}\r\n\r\n\r\n", "export class Pad {\r\n    recentPad: Gamepad;\r\n    constructor(public gamepad:Gamepad) {\r\n        \r\n    }\r\n\r\n    tick() {\r\n        this.recentPad = navigator.getGamepads().find((g)=>g.id === this.gamepad.id);\r\n        // console.log(this.recentPad.buttons[7]);\r\n        \r\n    }\r\n}", "import { Pad } from './gamepad';\r\n\r\nexport class PadManager {\r\n    private pads: Record<string, Pad> = {};\r\n    constructor() {\r\n        window.addEventListener(\"gamepadconnected\", this.connect.bind(this));\r\n        window.addEventListener(\"gamepaddisconnected\", this.disconnect.bind(this));\r\n    }\r\n    connect(e: GamepadEvent) {\r\n        this.pads[e.gamepad.id] = new Pad(e.gamepad);\r\n    }\r\n    disconnect(e: GamepadEvent) {\r\n        delete this.pads[e.gamepad.id];\r\n    }\r\n    tick() {\r\n        // console.log(this.pads);\r\n        \r\n        Object.values(this.pads).forEach((pad)=>{\r\n            pad.tick();\r\n        });\r\n    }\r\n}", "import { DomElement, DomElementAttributes } from \"./domElement\";\r\n\r\nexport type  DomTextAttributes = DomElementAttributes & {\r\n    text?: string,\r\n    color?: string,\r\n    fontSize?: number,\r\n    fontWeight?: number,\r\n    fontFamily?: string,\r\n    padding?: [number,number,number,number],\r\n}\r\nexport class DomText extends DomElement<'div'> {\r\n    set color (v: string) {\r\n        this.dom.style.color = v; \r\n    }\r\n    set fontSize (v: number) {\r\n        this.dom.style.fontSize = String(v)+'px'; \r\n    }\r\n    set fontWeight (v: number) {\r\n        this.dom.style.fontWeight = String(v); \r\n    }\r\n    set fontFamily (v: string) {\r\n        this.dom.style.fontFamily = v; \r\n    }\r\n    public get text() {\r\n        return this.dom.innerHTML;\r\n    }\r\n    public set text (v: string) {\r\n        this.dom.innerHTML = v?v:''; \r\n    }\r\n    public set padding (v: [number,number,number,number]) {\r\n        this.dom.style.padding = v.join('px ')+'px'; \r\n    }\r\n    public constructor(attr: DomTextAttributes = {}) {\r\n        super('div', attr);\r\n        this.color = attr.color;\r\n        this.text = attr.text;\r\n        this.fontSize = attr.fontSize;\r\n        this.fontWeight = attr.fontWeight;\r\n        this.fontFamily = attr.fontFamily;\r\n        this.padding = attr.padding || [0,0,0,0];\r\n\r\n        this.dom.style.pointerEvents = 'none';\r\n        this.dom.style.userSelect = 'none';\r\n        this.dom.style.zIndex = '1';\r\n        this.dom.style.whiteSpace = 'pre-line';\r\n    }\r\n}", "import { glob } from '../../game';\r\nimport { DomText } from '../elements/domText';\r\n\r\nexport class Keyboard {\r\n\r\n    private keyDown: Record<string, [(frame: number) => void]> = {};\r\n    private keyUp: Record<string, [() => void]> = {};\r\n\r\n    ready() {\r\n        glob.renderer.dom.addEventListener('keydown', (e) => {\r\n            const k = e.key.toLowerCase();\r\n            this.keyDown[k]?.forEach((c) => {\r\n                c(glob.frame);\r\n            });\r\n        });\r\n        glob.renderer.dom.addEventListener('keyup', (e) => {\r\n            const k = e.key.toLowerCase();\r\n            this.keyUp[k]?.forEach((c) => {\r\n                c();\r\n            });\r\n        });\r\n    }\r\n\r\n    register(key: string, down: (frame: number) => void, up: () => void) {\r\n        const k = key.toLowerCase();\r\n\r\n        if (this.keyDown[k]) this.keyDown[k].push(down);\r\n        else this.keyDown[k] = [down];\r\n\r\n        if (this.keyUp[k]) this.keyUp[k].push(up);\r\n        else this.keyUp[k] = [up];\r\n    }\r\n}\r\n\r\nexport class InputDevices {\r\n    public keyboard: Keyboard = new Keyboard();\r\n    private overlay: DomText;\r\n    private _locked: boolean;\r\n    public mobile: boolean;\r\n    public get locked(): boolean {\r\n        return this._locked;\r\n    }\r\n    public set locked(value: boolean) {\r\n        this._locked = value;\r\n        // this.overlay.dom.style.display = !value ? 'block' : 'none';\r\n    }\r\n    constructor() {\r\n        this.overlay = new DomText({\r\n            text: 'Pauzed',\r\n        });\r\n        this.overlay.dom.setAttribute('style', `\r\n            transform-origin: left bottom;\r\n            pointer-events: none;\r\n            bottom: 0px;\r\n            left: 0px;\r\n            user-select: none;\r\n            z-index: 999;\r\n            position: absolute;\r\n            height: 100vh;\r\n            width: 100vw;\r\n            color: white !important;\r\n            font-family: monospace;\r\n            font-weight: bold;\r\n            font-size: 40px;\r\n            padding-left: 50px;\r\n            padding-top: 20px;\r\n            box-sizing: border-box;\r\n            display: none;\r\n            text-transform: uppercase;`\r\n        );\r\n    }\r\n\r\n    ready() {\r\n        window.addEventListener(`contextmenu`, (e) => e.preventDefault());\r\n\r\n        this.mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n        if (this.mobile) {\r\n            //mobile\r\n            this.locked = true;\r\n\r\n        } else {\r\n            // if (glob.game.active && glob.game.active.interface) {\r\n            //     glob.game.active.interface.touchControls.style.display = 'none';\r\n            // }\r\n            // glob.renderer.dom.addEventListener('click', (e) => {\r\n            //     if (!this.locked) {\r\n            //         glob.renderer.dom.requestPointerLock();\r\n            //     }\r\n            // });\r\n\r\n            // document.addEventListener('pointerlockchange', () => {\r\n            //     this.locked = (document.pointerLockElement === glob.renderer.dom);\r\n            // });\r\n            document.body.appendChild(this.overlay.dom);\r\n\r\n        }\r\n        this.keyboard.ready();\r\n    }\r\n}\r\n", "import { Vector3 } from \"./math/vector3\";\r\nexport abstract class Util {\r\n    public static clamp(value: number, min: number, max: number) {\r\n        return Math.max(Math.min(value, max), min);\r\n    }\r\n    public static to0(value: number, tolerance: number = 0.1) {\r\n        return Math.abs(value) < tolerance ? 0 : value;\r\n    }\r\n    public static chunk(array: unknown[], size: number): typeof array[]{\r\n        const output: unknown[][] = [];\r\n        for (let i=0; i < array.length; i += size) {\r\n            output.push(array.slice(i, i + size));\r\n        }\r\n        return output;\r\n    }\r\n\r\n    public static padArray(ar: any[], b: any, len: number) {\r\n        return ar.concat(Array.from(Array(len).fill(b))).slice(0, len);\r\n    }\r\n\r\n    public static addArrays(ar: number[], br: number[]) {\r\n        return ar.map((a, i) => a + br[i]);\r\n    }\r\n\r\n    public static subtractArrays(ar: number[], br: number[]) {\r\n        return ar.map((a, i) => a - br[i]);\r\n    }\r\n\r\n    public static multiplyArrays(ar: number[], br: number[]) {\r\n        return ar.map((a, i) => a * br[i]);\r\n    }\r\n\r\n    public static scaleArrays(ar: number[], b: number) {\r\n        return ar.map((a, i) => a * b);\r\n    }\r\n\r\n    public static radToDeg(r: number) {\r\n        return r * 180 / Math.PI;\r\n    }\r\n\r\n    public static degToRad(d: number) {\r\n        return d * Math.PI / 180;\r\n    }\r\n\r\n    public static closestVectorMagniture(vectors: Vector3[], target: number): Vector3 {\r\n        let current: Vector3;\r\n        vectors.forEach((v) => {\r\n            if (current === undefined || Math.abs(v.magnitude()) < Math.abs(current.magnitude())) current = v;\r\n            else {\r\n                // console.log(current.magnitude(), v.magnitude());\r\n            }\r\n\r\n        });\r\n        return current;\r\n    }\r\n\r\n\r\n}", "import { vec3 } from 'gl-matrix';\r\nimport { Vector2, v2 } from './vector2';\r\nimport { Util } from '../utils';\r\nimport { Quaternion } from './quaternion';\r\n\r\nexport function v3(): Vector3;\r\nexport function v3(a?: [number?, number?, number?]): Vector3;\r\nexport function v3(a?: number, b?: number, c?: number): Vector3;\r\nexport function v3(a?: [number?, number?, number?] | number, b?: number, c?: number): Vector3 {\r\n\tif (typeof a === 'number') {\r\n\t\treturn Vector3.f(a, b, c);\r\n\t} else if (typeof a === 'undefined') {\r\n\t\treturn Vector3.f(0);\r\n\t} else {\r\n\t\treturn Vector3.f(...a);\r\n\t}\r\n}\r\n\r\nexport class Vector3 {\r\n\tpublic get pitch(): number { return this.x; }\r\n\tpublic set pitch(value: number) { this.x = value; }\r\n\r\n\tpublic get yaw(): number { return this.y; }\r\n\tpublic set yaw(value: number) { this.y = value; }\r\n\r\n\tpublic get roll(): number { return this.z; }\r\n\tpublic set roll(value: number) { this.z = value; }\r\n\r\n\tpublic get x(): number { return this.vec[0]; }\r\n\tpublic set x(value: number) { this.vec[0] = value; }\r\n\r\n\tpublic get y(): number { return this.vec[1]; }\r\n\tpublic set y(value: number) { this.vec[1] = value; }\r\n\r\n\tpublic get z(): number { return this.vec[2]; }\r\n\tpublic set z(value: number) { this.vec[2] = value; }\r\n\r\n\tpublic get xy() { return v2(this.x, this.y); }\r\n\tpublic set xy(v: Vector2) { this.x = v.x; this.y = v.y}\r\n\r\n\tpublic get xz() { return v2(this.x, this.z); }\r\n\tpublic set xz(v: Vector2) { this.x = v.x; this.z = v.y}\r\n\r\n\tpublic get yx() { return v2(this.y, this.x); }\r\n\tpublic set yx(v: Vector2) { this.y = v.x; this.x = v.y}\r\n\r\n\tpublic get yz() { return v2(this.y, this.z); }\r\n\tpublic set yz(v: Vector2) { this.y = v.x; this.z = v.y}\r\n\r\n\tpublic get zx() { return v2(this.z, this.x); }\r\n\tpublic set zx(v: Vector2) { this.z = v.x; this.x = v.y}\r\n\r\n\tpublic get zy() { return v2(this.z, this.y); }\r\n\tpublic set zy(v: Vector2) { this.z = v.x; this.y = v.y}\r\n\r\n\r\n\r\n\tpublic get xzy() { return v3(this.x, this.z, this.y); }\r\n\tpublic set xzy(v: Vector3) { this.x = v.x; this.z = v.y; this.y = v.z}\r\n\r\n\tpublic get xyz() { return v3(this.x, this.y, this.z); }\r\n\tpublic set xyz(v: Vector3) { this.x = v.x; this.y = v.y; this.z = v.z}\r\n\r\n\tpublic get yxz() { return v3(this.y, this.x, this.z); }\r\n\tpublic set yxz(v: Vector3) { this.y = v.x; this.x = v.y; this.z = v.z}\r\n\r\n\tpublic get yzx() { return v3(this.y, this.z, this.x); }\r\n\tpublic set yzx(v: Vector3) { this.y = v.x; this.z = v.y; this.x = v.z}\r\n\r\n\tpublic get zxy() { return v3(this.z, this.x, this.y); }\r\n\tpublic set zxy(v: Vector3) { this.z = v.x; this.x = v.y; this.y = v.z}\r\n\r\n\tpublic get zyx() { return v3(this.z, this.y, this.x); }\r\n\tpublic set zyx(v: Vector3) { this.z = v.x; this.y = v.y; this.x = v.z}\r\n\r\n\tpublic get str() {\r\n\t\treturn this.vec.toString();\r\n\t}\r\n\r\n\tpublic get log() {\r\n\t\tconsole.log(this.str);\r\n\t\treturn this.str;\r\n\t}\r\n\r\n\tpublic vec: vec3;\r\n\r\n\tconstructor(x: number = 0, y: number = 0, z: number = 0) {\r\n\t\tthis.vec = [x, y, z];\r\n\t}\r\n\r\n\tstatic from2(vector: Vector2, z: number = 0) {\r\n\t\treturn new Vector3(vector.x, vector.y, z);\r\n\t}\r\n\r\n\tstatic f(x: number = 0, y: number = x, z: number = x) {\r\n\t\treturn new Vector3(x, y, z);\r\n\t}\r\n\r\n\tstatic get forwards() {\r\n\t\treturn new Vector3(0, 0, 1);\r\n\t}\r\n\tstatic get backwards() {\r\n\t\treturn new Vector3(0, 0, -1);\r\n\t}\r\n\tstatic get up() {\r\n\t\treturn new Vector3(0, 1, 0);\r\n\t}\r\n\tstatic get down() {\r\n\t\treturn new Vector3(0, -1, 0);\r\n\t}\r\n\tstatic get left() {\r\n\t\treturn new Vector3(-1, 0, 0);\r\n\t}\r\n\tstatic get right() {\r\n\t\treturn new Vector3(1, 0, 0);\r\n\t}\r\n\tstatic get PI() {\r\n\t\treturn new Vector3(Math.PI, Math.PI, Math.PI);\r\n\t}\r\n\tstatic get TAU() {\r\n\t\treturn Vector3.PI.scale(0.5);\r\n\t}\r\n\r\n\tget array() {\r\n\t\treturn [this.x, this.y, this.z];\r\n\t}\r\n\r\n\tset array(a: [number, number, number]) {\r\n\t\t[this.x, this.y, this.z] = a;\r\n\t}\r\n\r\n\tforEach(callbackfn: (value: number, index: number, array: number[]) => void): void {\r\n\t\tthis.array.forEach(callbackfn);\r\n\t};\r\n\r\n\tget c(): Vector3 {\r\n\t\treturn this.clone();\r\n\t}\r\n\r\n\tequals(vector: Vector3): boolean {\r\n\t\treturn (\r\n\t\t\tthis.x === vector.x &&\r\n\t\t\tthis.y === vector.y &&\r\n\t\t\tthis.z === vector.z\r\n\t\t);\r\n\t}\r\n\r\n\tclone(): Vector3 {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x,\r\n\t\t\tthis.y,\r\n\t\t\tthis.z\r\n\t\t);\r\n\t}\r\n\r\n\tadd(...vectors: Vector3[]) {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x + vectors.reduce((a, b) => a + b.x, 0),\r\n\t\t\tthis.y + vectors.reduce((a, b) => a + b.y, 0),\r\n\t\t\tthis.z + vectors.reduce((a, b) => a + b.z, 0),\r\n\t\t);\r\n\t}\r\n\r\n\tmultiply(a: Vector3): Vector3;\r\n\tmultiply(a: number, b: number, c: number): Vector3;\r\n\tmultiply(a: Vector3 | number, b?: number, c?: number): Vector3 {\r\n\t\tconst [x, y, z] = (typeof a === 'number') ? [a, b, c] : a.array;\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x * x,\r\n\t\t\tthis.y * y,\r\n\t\t\tthis.z * z,\r\n\t\t);\r\n\t}\r\n\r\n\tsubtract(...vectors: Vector3[]) {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x - vectors.reduce((a, b) => a + b.x, 0),\r\n\t\t\tthis.y - vectors.reduce((a, b) => a + b.y, 0),\r\n\t\t\tthis.z - vectors.reduce((a, b) => a + b.z, 0),\r\n\t\t);\r\n\t}\r\n\r\n\tscale(...scalars: number[]) {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x * scalars.reduce((a, b) => a * b, 1),\r\n\t\t\tthis.y * scalars.reduce((a, b) => a * b, 1),\r\n\t\t\tthis.z * scalars.reduce((a, b) => a * b, 1),\r\n\t\t);\r\n\t}\r\n\r\n\tdivide(...vectors: Vector3[]) {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x / vectors.reduce((a, b) => a * b.x, 1),\r\n\t\t\tthis.y / vectors.reduce((a, b) => a * b.y, 1),\r\n\t\t\tthis.z / vectors.reduce((a, b) => a * b.z, 1),\r\n\t\t);\r\n\t}\r\n\r\n\trotateXY(rad: number) {\r\n\t\tconst [a, b] = this.xy.rotate(rad).array;\r\n\r\n\t\treturn new Vector3(\r\n\t\t\ta,\r\n\t\t\tthis.y,\r\n\t\t\tb,\r\n\t\t);\r\n\t}\r\n\trotateXZ(rad: number) {\r\n\t\tconst [a, b] = this.xz.rotate(rad).array;\r\n\r\n\t\treturn new Vector3(\r\n\t\t\ta,\r\n\t\t\tb,\r\n\t\t\tthis.z,\r\n\t\t);\r\n\t}\r\n\trotateYZ(rad: number) {\r\n\t\tconst [a, b] = this.yz.rotate(rad).array;\r\n\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x,\r\n\t\t\ta,\r\n\t\t\tb,\r\n\t\t);\r\n\t}\r\n\r\n\tmagnitude() {\r\n\t\treturn Math.sqrt(this.magnitudeSqr());\r\n\t}\r\n\r\n\tmagnitudeSqr() {\r\n\t\treturn (this.x * this.x + this.y * this.y + this.z * this.z);\r\n\t}\r\n\r\n\tmod(max: Vector3) {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x % max.x,\r\n\t\t\tthis.y % max.y,\r\n\t\t\tthis.z % max.z,\r\n\t\t);\r\n\t}\r\n\tclamp(min: Vector3, max: Vector3) {\r\n\t\treturn new Vector3(\r\n\t\t\tUtil.clamp(this.x, min.x, max.x),\r\n\t\t\tUtil.clamp(this.y, min.y, max.y),\r\n\t\t\tUtil.clamp(this.z, min.z, max.z),\r\n\t\t);\r\n\t}\r\n\tnormalize() {\r\n\t\tlet len = this.x * this.x + this.y * this.y + this.z * this.z;\r\n\t\tif (len > 0) {\r\n\t\t\tlen = 1 / Math.sqrt(len);\r\n\t\t}\r\n\t\treturn v3(\r\n\t\t\tthis.x * len,\r\n\t\t\tthis.y * len,\r\n\t\t\tthis.z * len\r\n\t\t);\r\n\t}\r\n\r\n\tapplyQuaternion(q: Quaternion): Vector3 {\r\n\t\tconst x = this.x;\r\n\t\tconst y = this.y;\r\n\t\tconst z = this.z;\r\n\t\tconst qx = q.x;\r\n\t\tconst qy = q.y;\r\n\t\tconst qz = q.z;\r\n\t\tconst qw = q.w;\r\n\r\n\t\t// Calculate quat * vector\r\n\t\tconst ix = qw * x + qy * z - qz * y;\r\n\t\tconst iy = qw * y + qz * x - qx * z;\r\n\t\tconst iz = qw * z + qx * y - qy * x;\r\n\t\tconst iw = -qx * x - qy * y - qz * z;\r\n\r\n\t\t// Calculate result * inverse quat\r\n\t\treturn new Vector3(\r\n\t\t\tix * qw + iw * -qx + iy * -qz - iz * -qy,\r\n\t\t\tiy * qw + iw * -qy + iz * -qx - ix * -qz,\r\n\t\t\tiz * qw + iw * -qz + ix * -qy - iy * -qx\r\n\t\t);\r\n\t}\r\n\r\n\tcross(other: Vector3): Vector3 {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.y * other.z - this.z * other.y,\r\n\t\t\tthis.z * other.x - this.x * other.z,\r\n\t\t\tthis.x * other.y - this.y * other.x\r\n\t\t);\r\n\t}\r\n}\r\n", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import { mat4, vec3 } from 'gl-matrix';\r\nimport { Vector3, v3 } from './vector3';\r\nimport { glob } from '../../../game';\r\n\r\nexport function m4() {\r\n    return Matrix4.f();\r\n}\r\n\r\nexport class Matrix4 {\r\n    public mat4: mat4;\r\n    public constructor(source?: mat4) {\r\n        this.mat4 = source ? mat4.clone(source) : mat4.create();\r\n        return this;\r\n    }\r\n\r\n    static f() {\r\n        return new Matrix4();\r\n    }\r\n\r\n    public add(mat: Matrix4) {\r\n        mat4.add(\r\n            this.mat4,\r\n            this.mat4,\r\n            mat.mat4\r\n        );\r\n        return this;\r\n    }\r\n    public subtract(mat: Matrix4) {\r\n        mat4.subtract(\r\n            this.mat4,\r\n            this.mat4,\r\n            mat.mat4\r\n        );\r\n        return this;\r\n    }\r\n    public multiply(mat: Matrix4) {\r\n        mat4.multiply(\r\n            this.mat4,\r\n            this.mat4,\r\n            mat.mat4\r\n        );\r\n        return this;\r\n    }\r\n    public scale(vector: Vector3) {\r\n        mat4.scale(\r\n            this.mat4,\r\n            this.mat4,\r\n            vector.vec\r\n        );\r\n        return this;\r\n    }\r\n    public translate(vector: Vector3) {\r\n        mat4.translate(\r\n            this.mat4,\r\n            this.mat4,\r\n            vector.vec\r\n        );\r\n        return this;\r\n    }\r\n    public invert() {\r\n        mat4.invert(\r\n            this.mat4,\r\n            this.mat4,\r\n        );\r\n        return this;\r\n    }\r\n    public transpose(mat?: Matrix4) {\r\n        mat4.transpose(\r\n            this.mat4,\r\n            mat ? mat.mat4 : this.mat4,\r\n        );\r\n        return this;\r\n    }\r\n    public rotateAxis(angle: number, axis: 0 | 1 | 2) {\r\n        mat4.rotate(\r\n            this.mat4,\r\n            this.mat4,\r\n            angle,\r\n            [[1, 0, 0], [0, 1, 0], [0, 0, 1]][axis] as vec3\r\n        );\r\n        return this;\r\n    }\r\n    public rotate(rotation: Vector3) {\r\n        rotation.forEach((r, i) => {\r\n            this.rotateAxis(r, i as 0 | 1 | 2);\r\n        });\r\n        return this;\r\n    }\r\n    public perspective(fov: number, near: number = 1, far: number = Infinity) {\r\n        mat4.perspective(\r\n            this.mat4,\r\n            fov,\r\n            glob.renderer ? glob.renderer.width / glob.renderer.height : document.body.clientWidth / document.body.clientHeight,\r\n            near,\r\n            far\r\n        );\r\n        return this;\r\n    }\r\n    public ortho(left: number, right: number, bottom: number, top: number, near: number = 1, far: number = Infinity) {\r\n        mat4.ortho(this.mat4,\r\n            left, right, bottom, top, near, far\r\n        );\r\n        return this;\r\n    }\r\n    public clone() {\r\n        return new Matrix4(this.mat4);\r\n    }\r\n\r\n    public static lookAt(camera: Vector3, target: Vector3): Matrix4 {\r\n        let matrix = m4();\r\n        mat4.lookAt(\r\n            matrix.mat4,\r\n            camera.vec,\r\n            target.vec,\r\n            v3(0, 1, 0).vec\r\n        );\r\n        return matrix;\r\n    }\r\n\r\n    public get position() {\r\n        return v3(this.mat4[12], this.mat4[13], this.mat4[14]);\r\n    }\r\n}\r\n", "import { Matrix4 } from './matrix4';\r\nimport { Vector3 } from './vector3';\r\n\r\nexport function q(): Quaternion;\r\nexport function q(x: number, y?: number, z?: number, w?: number): Quaternion;\r\nexport function q(x: [number, number, number, number]): Quaternion;\r\nexport function q(x?: number | [number, number, number, number], y?: number, z?: number, w?: number): Quaternion {\r\n    if (typeof x === 'number') {\r\n        return Quaternion.f(x, y, z, w);\r\n    } else if (typeof x === 'undefined') {\r\n        return Quaternion.f(0);\r\n    } else {\r\n        return Quaternion.f(...x);\r\n    }\r\n}\r\n\r\nexport class Quaternion {\r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n    public w: number;\r\n\r\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n\r\n    public clone(): Quaternion {\r\n        return new Quaternion(this.x, this.y, this.z, this.w);\r\n    }\r\n\r\n    public multiply(q: Quaternion): Quaternion {\r\n        const x = this.w * q.x + this.x * q.w + this.y * q.z - this.z * q.y;\r\n        const y = this.w * q.y - this.x * q.z + this.y * q.w + this.z * q.x;\r\n        const z = this.w * q.z + this.x * q.y - this.y * q.x + this.z * q.w;\r\n        const w = this.w * q.w - this.x * q.x - this.y * q.y - this.z * q.z;\r\n        \r\n        return new Quaternion(x, y, z, w);\r\n    }\r\n\r\n    public toMatrix4(): Matrix4 {\r\n        // Convert quaternion to rotation matrix\r\n        const xx = this.x * this.x;\r\n        const xy = this.x * this.y;\r\n        const xz = this.x * this.z;\r\n        const xw = this.x * this.w;\r\n        \r\n        const yy = this.y * this.y;\r\n        const yz = this.y * this.z;\r\n        const yw = this.y * this.w;\r\n        \r\n        const zz = this.z * this.z;\r\n        const zw = this.z * this.w;\r\n\r\n        return new Matrix4([\r\n            1 - 2 * (yy + zz), 2 * (xy - zw), 2 * (xz + yw), 0,\r\n            2 * (xy + zw), 1 - 2 * (xx + zz), 2 * (yz - xw), 0,\r\n            2 * (xz - yw), 2 * (yz + xw), 1 - 2 * (xx + yy), 0,\r\n            0, 0, 0, 1\r\n        ]);\r\n    }\r\n\r\n    public static fromEuler(x: number, y: number, z: number): Quaternion {\r\n        // Convert Euler angles to quaternion\r\n        const cx = Math.cos(x * 0.5);\r\n        const cy = Math.cos(y * 0.5);\r\n        const cz = Math.cos(z * 0.5);\r\n        const sx = Math.sin(x * 0.5);\r\n        const sy = Math.sin(y * 0.5);\r\n        const sz = Math.sin(z * 0.5);\r\n\r\n        return new Quaternion(\r\n            sx * cy * cz + cx * sy * sz,\r\n            cx * sy * cz - sx * cy * sz,\r\n            cx * cy * sz + sx * sy * cz,\r\n            cx * cy * cz - sx * sy * sz\r\n        );\r\n    }\r\n\r\n    public static fromMatrix(matrix: Matrix4): Quaternion {\r\n        // Implementation needed: Extract quaternion from rotation matrix\r\n        // This is a complex operation that requires careful handling of edge cases\r\n        // For now, returning identity quaternion\r\n        return new Quaternion();\r\n    }\r\n\r\n    public static f(x: number, y: number = x, z: number = x, w: number = 1): Quaternion {\r\n        return new Quaternion(x, y, z, w);\r\n    }\r\n\r\n    public setAxisAngle(axis: Vector3, angle: number): Quaternion {\r\n        const halfAngle = angle * 0.5;\r\n        const s = Math.sin(halfAngle);\r\n        \r\n        this.x = axis.x * s;\r\n        this.y = axis.y * s;\r\n        this.z = axis.z * s;\r\n        this.w = Math.cos(halfAngle);\r\n        \r\n        return this;\r\n    }\r\n} ", "import { Matrix4, m4 } from './matrix4';\r\nimport { Quaternion } from './quaternion';\r\nimport { Vector3, v3 } from './vector3';\r\n\r\nexport class Transform {\r\n    private _localPosition: Vector3;\r\n    private _localRotation: Quaternion; // Note: You'll need to implement a Quaternion class\r\n    private _localScale: Vector3;\r\n    private _anchor: Vector3;\r\n    \r\n    private _worldMatrix: Matrix4;\r\n    private _localMatrix: Matrix4;\r\n    private _isDirty: boolean;\r\n    \r\n    private _parent: Transform | null;\r\n    private _children: Transform[];\r\n\r\n    constructor() {\r\n        this._localPosition = v3(0);\r\n        this._localRotation = new Quaternion(); // Identity quaternion\r\n        this._localScale = v3(1);\r\n        this._anchor = v3(0);\r\n        \r\n        this._worldMatrix = m4();\r\n        this._localMatrix = m4();\r\n        this._isDirty = true;\r\n        \r\n        this._parent = null;\r\n        this._children = [];\r\n    }\r\n\r\n    // Position methods\r\n    public setPosition(position: Vector3): void {\r\n        this._localPosition = position;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    public getLocalPosition(): Vector3 {\r\n        return this._localPosition.clone();\r\n    }\r\n\r\n    public getWorldPosition(): Vector3 {\r\n        return this.getWorldMatrix().position;\r\n    }\r\n\r\n    // Rotation methods\r\n    public setRotation(rotation: Quaternion): void {\r\n        this._localRotation = rotation;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    public getLocalRotation(): Quaternion {\r\n        return this._localRotation.clone();\r\n    }\r\n\r\n    public getWorldRotation(): Quaternion {\r\n        // Extract rotation from world matrix\r\n        return Quaternion.fromMatrix(this.getWorldMatrix());\r\n    }\r\n\r\n    // Scale methods\r\n    public setScale(scale: Vector3): void {\r\n        this._localScale = scale;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    // Anchor point methods\r\n    public setAnchor(anchor: Vector3): void {\r\n        this._anchor = anchor;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    // Hierarchy methods\r\n    public setParent(parent: Transform | null): void {\r\n        if (this._parent) {\r\n            const index = this._parent._children.indexOf(this);\r\n            if (index !== -1) this._parent._children.splice(index, 1);\r\n        }\r\n\r\n        this._parent = parent;\r\n        if (parent) {\r\n            parent._children.push(this);\r\n        }\r\n        this._isDirty = true;\r\n    }\r\n\r\n    // Matrix calculations\r\n    private updateLocalMatrix(): void {\r\n        if (!this._isDirty) return;\r\n\r\n        this._localMatrix = m4();\r\n        \r\n        // Apply anchor point translation\r\n        if (!this._anchor.equals(v3(0))) {\r\n            this._localMatrix.translate(this._anchor.scale(-1));\r\n        }\r\n\r\n        // Apply transformations\r\n        this._localMatrix.translate(this._localPosition);\r\n        this._localMatrix.multiply(this._localRotation.toMatrix4());\r\n        this._localMatrix.scale(this._localScale);\r\n\r\n        // Reverse anchor point translation\r\n        if (!this._anchor.equals(v3(0))) {\r\n            this._localMatrix.translate(this._anchor);\r\n        }\r\n\r\n        this._isDirty = false;\r\n    }\r\n\r\n    public getLocalMatrix(): Matrix4 {\r\n        this.updateLocalMatrix();\r\n        return this._localMatrix.clone();\r\n    }\r\n\r\n    public getWorldMatrix(): Matrix4 {\r\n        this.updateLocalMatrix();\r\n        \r\n        if (this._parent) {\r\n            return this._parent.getWorldMatrix().multiply(this._localMatrix);\r\n        }\r\n        \r\n        return this._localMatrix.clone();\r\n    }\r\n} ", "import { VertexArray, IndexBuffer } from '../buffer';\r\nimport { ShaderManager } from '../shaderManager';\r\nimport { glob } from '../../../game';\r\nimport { Matrix4 } from '../../util/math/matrix4';\r\nimport { Vector3 } from '../../util/math/vector3';\r\nimport { Transform } from '../../util/math/transform';\r\nimport { Quaternion } from '../../util/math/quaternion';\r\n\r\nexport interface SceneObjectData {\r\n    vao: VertexArray;\r\n    indexBuffer: IndexBuffer;\r\n    shaderManager: ShaderManager;\r\n    drawMode: number;\r\n    drawCount: number;\r\n    drawType: number;\r\n    ignoreLighting: boolean;\r\n}\r\n\r\nexport interface SceneObjectProps {\r\n    position?: Vector3;\r\n    scale?: Vector3;\r\n    rotation?: Quaternion;\r\n    parent?: SceneObject;\r\n    ignoreLighting?: boolean;\r\n}\r\n\r\nexport class SceneObject implements SceneObjectData {\r\n    public readonly vao: VertexArray;\r\n    public readonly indexBuffer: IndexBuffer;\r\n    public readonly shaderManager: ShaderManager;\r\n    public readonly transform: Transform;\r\n    public readonly drawMode: number = glob.ctx.TRIANGLES;\r\n    public readonly drawCount: number;\r\n    public readonly drawType: number = glob.ctx.UNSIGNED_SHORT;\r\n    public readonly ignoreLighting: boolean = false;\r\n\r\n    public static getAttributeLocation(name: string): number {\r\n        return glob.shaderManager.getAttributeLocation(`a_${name}`);\r\n    }\r\n\r\n    constructor(data: Omit<SceneObjectData, 'shaderManager' | 'drawMode' |'drawType'>, props: SceneObjectProps = {}) {\r\n        this.vao = data.vao;\r\n        this.indexBuffer = data.indexBuffer;\r\n        this.shaderManager = glob.shaderManager;\r\n        this.drawCount = data.drawCount;\r\n        this.ignoreLighting = data.ignoreLighting ?? false;\r\n\r\n        this.transform = new Transform();\r\n        if (props.position) this.transform.setPosition(props.position);\r\n        if (props.scale) this.transform.setScale(props.scale);\r\n        if (props.rotation) this.transform.setRotation(props.rotation);\r\n        if (props.parent) {\r\n            this.transform.setParent(props.parent.transform);\r\n        }\r\n    }\r\n\r\n    public render(viewMatrix: Matrix4, projectionMatrix: Matrix4) {\r\n        const modelMatrix = this.transform.getWorldMatrix();\r\n\r\n        // Set uniforms\r\n        this.shaderManager.setUniform('u_modelMatrix', modelMatrix.mat4 as Float32Array);\r\n        this.shaderManager.setUniform('u_viewMatrix', viewMatrix.mat4 as Float32Array);\r\n        this.shaderManager.setUniform('u_projectionMatrix', projectionMatrix.mat4 as Float32Array);\r\n\r\n        // Calculate and set normal matrix (inverse transpose of model matrix)\r\n        const normalMatrix = modelMatrix.clone();\r\n        normalMatrix.invert();\r\n        normalMatrix.transpose();\r\n        const normalMat3 = new Float32Array([\r\n            normalMatrix.mat4[0], normalMatrix.mat4[1], normalMatrix.mat4[2],\r\n            normalMatrix.mat4[4], normalMatrix.mat4[5], normalMatrix.mat4[6],\r\n            normalMatrix.mat4[8], normalMatrix.mat4[9], normalMatrix.mat4[10]\r\n        ]);\r\n        this.shaderManager.setUniform('u_normalMatrix', normalMat3);\r\n\r\n        // Bind VAO\r\n        this.vao.bind();\r\n\r\n        // Draw\r\n        if (this.indexBuffer) {\r\n            // Indexed drawing\r\n            glob.ctx.drawElements(\r\n                this.drawMode,\r\n                this.drawCount,\r\n                this.drawType || glob.ctx.UNSIGNED_SHORT,\r\n                0\r\n            );\r\n        } else {\r\n            // Non-indexed drawing\r\n            glob.ctx.drawArrays(\r\n                this.drawMode,\r\n                0,\r\n                this.drawCount\r\n            );\r\n        }\r\n\r\n        // Cleanup\r\n        this.vao.unbind();\r\n    }\r\n}", "import { SceneObject, SceneObjectProps } from './sceneObject';\r\nimport { Matrix4 } from '../../util/math/matrix4';\r\n\r\n/**\r\n * A specialized SceneObject that acts as a container for other scene objects.\r\n * It only handles transforms and parenting without any rendering functionality.\r\n */\r\nexport class ContainerObject extends SceneObject {\r\n    constructor(props: SceneObjectProps = {}) {\r\n        // Create a dummy SceneObjectData with minimal requirements\r\n        const dummyData = {\r\n            vao: null as any,\r\n            indexBuffer: null as any,\r\n            drawCount: 0,\r\n            ignoreLighting: false\r\n        };\r\n        \r\n        super(dummyData, props);\r\n    }\r\n\r\n    /**\r\n     * Override render to do nothing since this is just a container\r\n     */\r\n    public render(viewMatrix: Matrix4, projectionMatrix: Matrix4): void {\r\n        // No rendering needed for containers\r\n    }\r\n} ", "import { MeshData } from '../types';\r\nimport { VertexArray, VertexBuffer, IndexBuffer } from '../buffer';\r\nimport { SceneObject, SceneObjectProps } from './sceneObject';\r\nimport { glob } from '../../../game';\r\n\r\nexport interface BaseMeshProps extends SceneObjectProps {\r\n    colors?: [number, number, number] | Array<[number, number, number]>;\r\n    ignoreLighting?: boolean;\r\n}\r\n\r\nexport abstract class BaseMesh extends SceneObject {\r\n    protected static setupBuffers(meshData: MeshData, props: BaseMeshProps): {\r\n        vao: VertexArray;\r\n        indexBuffer: IndexBuffer;\r\n        drawCount: number;\r\n        ignoreLighting: boolean;\r\n    } {\r\n        // Create and setup VAO\r\n        const vao = new VertexArray(glob.ctx);\r\n        vao.bind();\r\n\r\n        // Create and setup vertex buffer\r\n        const vertexBuffer = new VertexBuffer(glob.ctx);\r\n        vertexBuffer.setData(meshData.vertices);\r\n        vao.setAttributePointer(\r\n            SceneObject.getAttributeLocation('position'),\r\n            3,\r\n            glob.ctx.FLOAT,\r\n            false,\r\n            0,\r\n            0\r\n        );\r\n\r\n        // Create and setup color buffer\r\n        const colorBuffer = new VertexBuffer(glob.ctx);\r\n        colorBuffer.setData(meshData.colors!);\r\n        vao.setAttributePointer(\r\n            SceneObject.getAttributeLocation('color'),\r\n            3,\r\n            glob.ctx.FLOAT,\r\n            false,\r\n            0,\r\n            0\r\n        );\r\n\r\n        // Create and setup normal buffer\r\n        const normalBuffer = new VertexBuffer(glob.ctx);\r\n        normalBuffer.setData(meshData.normals!);\r\n        vao.setAttributePointer(\r\n            SceneObject.getAttributeLocation('normal'),\r\n            3,\r\n            glob.ctx.FLOAT,\r\n            false,\r\n            0,\r\n            0\r\n        );\r\n\r\n        // Create and setup texture coordinate buffer\r\n        const texCoordBuffer = new VertexBuffer(glob.ctx);\r\n        texCoordBuffer.setData(meshData.texCoords!);\r\n        vao.setAttributePointer(\r\n            SceneObject.getAttributeLocation('texCoord'),\r\n            2,\r\n            glob.ctx.FLOAT,\r\n            false,\r\n            0,\r\n            0\r\n        );\r\n\r\n        // Create and setup index buffer\r\n        const indexBuffer = new IndexBuffer(glob.ctx);\r\n        indexBuffer.setData(meshData.indices!);\r\n\r\n        return {\r\n            vao,\r\n            indexBuffer,\r\n            drawCount: meshData.indices!.length,\r\n            ignoreLighting: props.ignoreLighting ?? false\r\n        };\r\n    }\r\n\r\n    protected static createSceneObject(meshData: MeshData, props: BaseMeshProps): SceneObject {\r\n        const bufferData = this.setupBuffers(meshData, props);\r\n        return new SceneObject(bufferData, props);\r\n    }\r\n\r\n    public constructor(meshData: MeshData, props: BaseMeshProps = {}) {\r\n        super(BaseMesh.setupBuffers(meshData, props), props);\r\n    }\r\n} ", "import { MeshData } from '../types';\r\nimport { BaseMesh, BaseMeshProps } from './baseMesh';\r\nimport { SceneObject } from './sceneObject';\r\n\r\nexport interface ConeProps extends BaseMeshProps {\r\n    sides?: number;\r\n    smoothShading?: boolean;\r\n    // Colors for [sides, bottom]\r\n    colors?: [number, number, number] | [[number, number, number], [number, number, number]];\r\n}\r\n\r\nexport class Cone extends BaseMesh {\r\n    private static generateMeshData(sides: number = 32, smoothShading: boolean = true, colors?: [number, number, number] | [[number, number, number], [number, number, number]]): MeshData {\r\n        const vertices: number[] = [];\r\n        const indices: number[] = [];\r\n        const normals: number[] = [];\r\n        const generatedColors: number[] = [];\r\n        const texCoords: number[] = [];\r\n\r\n        // Default colors\r\n        const defaultColors: [[number, number, number], [number, number, number]] = [\r\n            [0.8, 0.2, 0.2], // sides\r\n            [0.2, 0.2, 0.8]  // bottom\r\n        ];\r\n\r\n        let [sideColor, bottomColor] = defaultColors;\r\n\r\n        if (colors) {\r\n            if (Array.isArray(colors[0])) {\r\n                [sideColor, bottomColor] = colors as [[number, number, number], [number, number, number]];\r\n            } else {\r\n                sideColor = bottomColor = colors as [number, number, number];\r\n            }\r\n        }\r\n\r\n        if (smoothShading) {\r\n            // Add apex vertex at the top\r\n            vertices.push(0, 0.5, 0);\r\n            normals.push(0, 1, 0);\r\n            generatedColors.push(...sideColor);\r\n            texCoords.push(0.5, 1);\r\n\r\n            // Generate bottom circle vertices\r\n            for (let i = 0; i <= sides; i++) {\r\n                const angle = (i * Math.PI * 2) / sides;\r\n                const x = Math.cos(angle);\r\n                const z = Math.sin(angle);\r\n\r\n                // Bottom circle vertex\r\n                vertices.push(x * 0.5, -0.5, z * 0.5);\r\n\r\n                // Calculate smooth normal for the side\r\n                // The normal should point outward from the surface\r\n                const dx = x * 0.5;\r\n                const dy = -0.5;\r\n                const dz = z * 0.5;\r\n                const length = Math.sqrt(dx * dx + dy * dy + dz * dz);\r\n                normals.push(dx / length, dy / length, dz / length);\r\n\r\n                generatedColors.push(...sideColor);\r\n                texCoords.push(i / sides, 0);\r\n            }\r\n\r\n            // Generate side triangles\r\n            for (let i = 0; i < sides; i++) {\r\n                indices.push(\r\n                    0,              // apex\r\n                    i + 2,          // next base vertex\r\n                    i + 1           // current base vertex\r\n                );\r\n            }\r\n        } else {\r\n            // Flat shading - each triangle has its own vertices\r\n            for (let i = 0; i < sides; i++) {\r\n                const angle1 = (i * Math.PI * 2) / sides;\r\n                const angle2 = ((i + 1) * Math.PI * 2) / sides;\r\n                \r\n                const x1 = Math.cos(angle1) * 0.5;\r\n                const z1 = Math.sin(angle1) * 0.5;\r\n                const x2 = Math.cos(angle2) * 0.5;\r\n                const z2 = Math.sin(angle2) * 0.5;\r\n\r\n                // Add vertices for one side triangle\r\n                vertices.push(\r\n                    0, 0.5, 0,        // apex\r\n                    x1, -0.5, z1,     // base point 1\r\n                    x2, -0.5, z2      // base point 2\r\n                );\r\n\r\n                // Calculate flat normal for this face using cross product\r\n                // Vector from apex to base point 1\r\n                const v1x = x1;\r\n                const v1y = -1;\r\n                const v1z = z1;\r\n\r\n                // Vector from apex to base point 2\r\n                const v2x = x2;\r\n                const v2y = -1;\r\n                const v2z = z2;\r\n\r\n                // Cross product (v2 \u00D7 v1 for outward normal)\r\n                const nx = v2y * v1z - v2z * v1y;\r\n                const ny = v2z * v1x - v2x * v1z;\r\n                const nz = v2x * v1y - v2y * v1x;\r\n\r\n                // Normalize\r\n                const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\r\n                const normalX = nx / length;\r\n                const normalY = ny / length;\r\n                const normalZ = nz / length;\r\n\r\n                // Apply the same normal to all vertices of this face\r\n                for (let j = 0; j < 3; j++) {\r\n                    normals.push(normalX, normalY, normalZ);\r\n                    generatedColors.push(...sideColor);\r\n                }\r\n\r\n                // Texture coordinates\r\n                texCoords.push(\r\n                    0.5, 1,\r\n                    i / sides, 0,\r\n                    (i + 1) / sides, 0\r\n                );\r\n\r\n                // Add indices\r\n                const baseIndex = i * 3;\r\n                indices.push(baseIndex, baseIndex + 2, baseIndex + 1);\r\n            }\r\n        }\r\n\r\n        // Generate bottom cap\r\n        const baseVertexCount = vertices.length / 3;\r\n        vertices.push(0, -0.5, 0); // Center of bottom\r\n        normals.push(0, -1, 0);\r\n        generatedColors.push(...bottomColor);\r\n        texCoords.push(0.5, 0.5);\r\n\r\n        // Generate bottom cap triangles\r\n        for (let i = 0; i < sides; i++) {\r\n            const angle1 = (i * Math.PI * 2) / sides;\r\n            const angle2 = ((i + 1) * Math.PI * 2) / sides;\r\n            \r\n            const x1 = Math.cos(angle1) * 0.5;\r\n            const z1 = Math.sin(angle1) * 0.5;\r\n            const x2 = Math.cos(angle2) * 0.5;\r\n            const z2 = Math.sin(angle2) * 0.5;\r\n\r\n            // Add vertices for bottom cap triangle\r\n            vertices.push(\r\n                x1, -0.5, z1,\r\n                x2, -0.5, z2\r\n            );\r\n\r\n            // Bottom cap normals\r\n            normals.push(0, -1, 0, 0, -1, 0);\r\n            generatedColors.push(...bottomColor, ...bottomColor);\r\n            texCoords.push(\r\n                x1 + 0.5, z1 + 0.5,\r\n                x2 + 0.5, z2 + 0.5\r\n            );\r\n\r\n            // Add indices for bottom cap\r\n            const offset = baseVertexCount + 1 + i * 2;\r\n            indices.push(\r\n                baseVertexCount,    // center\r\n                offset,             // current point\r\n                offset + 1          // next point\r\n            );\r\n        }\r\n\r\n        return {\r\n            vertices: new Float32Array(vertices),\r\n            indices: new Uint16Array(indices),\r\n            normals: new Float32Array(normals),\r\n            colors: new Float32Array(generatedColors),\r\n            texCoords: new Float32Array(texCoords)\r\n        };\r\n    }\r\n\r\n    public static create(props: ConeProps = {}): SceneObject {\r\n        const meshData = this.generateMeshData(\r\n            props.sides || 32,\r\n            props.smoothShading ?? true,\r\n            props.colors\r\n        );\r\n        return this.createSceneObject(meshData, props);\r\n    }\r\n} ", "import { MeshData } from '../types';\r\nimport { BaseMesh, BaseMeshProps } from './baseMesh';\r\nimport { SceneObject } from './sceneObject';\r\n\r\nexport interface CylinderProps extends BaseMeshProps {\r\n    sides?: number;\r\n    smoothShading?: boolean;\r\n    colors?: [number, number, number] | [[number, number, number], [number, number, number], [number, number, number]];\r\n}\r\n\r\nexport class Cylinder extends BaseMesh {\r\n    private static generateMeshData(sides: number = 32, smoothShading: boolean = true, colors?: [number, number, number] | [[number, number, number], [number, number, number], [number, number, number]]): MeshData {\r\n        // Arrays to store the generated data\r\n        const vertices: number[] = [];\r\n        const indices: number[] = [];\r\n        const normals: number[] = [];\r\n        const generatedColors: number[] = [];\r\n        const texCoords: number[] = [];\r\n\r\n        // Default colors\r\n        const defaultColors: [[number, number, number], [number, number, number], [number, number, number]] = [\r\n            [0.8, 0.2, 0.2], // sides\r\n            [0.2, 0.2, 0.8], // top\r\n            [0.8, 0.8, 0.2]  // bottom\r\n        ];\r\n\r\n        let [sideColor, topColor, bottomColor] = defaultColors;\r\n\r\n        if (colors) {\r\n            if (Array.isArray(colors[0])) {\r\n                // Multiple colors provided\r\n                [sideColor, topColor, bottomColor] = colors as [[number, number, number], [number, number, number], [number, number, number]];\r\n            } else {\r\n                // Single color provided\r\n                sideColor = topColor = bottomColor = colors as [number, number, number];\r\n            }\r\n        }\r\n\r\n        if (smoothShading) {\r\n            // Smooth shading - vertices share normals\r\n            for (let i = 0; i <= sides; i++) {\r\n                const angle = (i * Math.PI * 2) / sides;\r\n                const x = Math.cos(angle);\r\n                const z = Math.sin(angle);\r\n\r\n                // Top circle vertex\r\n                vertices.push(x * 0.5, 0.5, z * 0.5);\r\n                // Bottom circle vertex\r\n                vertices.push(x * 0.5, -0.5, z * 0.5);\r\n\r\n                // Normals for the side - pointing outward\r\n                normals.push(x, 0, z);\r\n                normals.push(x, 0, z);\r\n\r\n                // Colors for side vertices\r\n                generatedColors.push(...sideColor);\r\n                generatedColors.push(...sideColor);\r\n\r\n                // Texture coordinates\r\n                texCoords.push(i / sides, 1);\r\n                texCoords.push(i / sides, 0);\r\n            }\r\n\r\n            // Generate indices for the side triangles\r\n            for (let i = 0; i < sides; i++) {\r\n                const topFirst = i * 2;\r\n                const bottomFirst = topFirst + 1;\r\n                const topSecond = (i + 1) * 2;\r\n                const bottomSecond = topSecond + 1;\r\n\r\n                indices.push(topFirst, topSecond, bottomFirst);\r\n                indices.push(bottomFirst, topSecond, bottomSecond);\r\n            }\r\n\r\n            // Generate caps for smooth shading\r\n            const sideVertexCount = vertices.length / 3;\r\n            \r\n            // Add centers for both caps\r\n            vertices.push(0, 0.5, 0);  // Top center\r\n            vertices.push(0, -0.5, 0); // Bottom center\r\n            normals.push(0, 1, 0);     // Top normal\r\n            normals.push(0, -1, 0);    // Bottom normal\r\n            generatedColors.push(...topColor, ...bottomColor);\r\n            texCoords.push(0.5, 0.5, 0.5, 0.5);\r\n\r\n            const topCenterIndex = sideVertexCount;\r\n            const bottomCenterIndex = sideVertexCount + 1;\r\n\r\n            // Generate cap vertices\r\n            for (let i = 0; i < sides; i++) {\r\n                const angle1 = (i * Math.PI * 2) / sides;\r\n                const angle2 = ((i + 1) * Math.PI * 2) / sides;\r\n                \r\n                const x1 = Math.cos(angle1) * 0.5;\r\n                const z1 = Math.sin(angle1) * 0.5;\r\n                const x2 = Math.cos(angle2) * 0.5;\r\n                const z2 = Math.sin(angle2) * 0.5;\r\n\r\n                // Add vertices for caps\r\n                vertices.push(\r\n                    x1, 0.5, z1,    // Top cap point 1\r\n                    x2, 0.5, z2,    // Top cap point 2\r\n                    x1, -0.5, z1,   // Bottom cap point 1\r\n                    x2, -0.5, z2    // Bottom cap point 2\r\n                );\r\n\r\n                // Add normals\r\n                normals.push(\r\n                    0, 1, 0,    // Top cap normal\r\n                    0, 1, 0,    // Top cap normal\r\n                    0, -1, 0,   // Bottom cap normal\r\n                    0, -1, 0    // Bottom cap normal\r\n                );\r\n\r\n                // Add colors\r\n                generatedColors.push(\r\n                    ...topColor, ...topColor,       // Top cap colors\r\n                    ...bottomColor, ...bottomColor  // Bottom cap colors\r\n                );\r\n\r\n                // Add texture coordinates for both caps\r\n                texCoords.push(\r\n                    x1 + 0.5, z1 + 0.5,    // Top cap first point\r\n                    x2 + 0.5, z2 + 0.5,    // Top cap second point\r\n                    x1 + 0.5, z1 + 0.5,    // Bottom cap first point\r\n                    x2 + 0.5, z2 + 0.5     // Bottom cap second point\r\n                );\r\n\r\n                // Calculate vertex indices for this segment\r\n                const topSegmentStart = sideVertexCount + 2 + (i * 4);\r\n                const bottomSegmentStart = topSegmentStart + 2;\r\n\r\n                // Add indices for caps\r\n                indices.push(\r\n                    topCenterIndex,        // Top center\r\n                    topSegmentStart,       // Top current point\r\n                    topSegmentStart + 1,   // Top next point\r\n                    bottomCenterIndex,     // Bottom center\r\n                    bottomSegmentStart,    // Bottom current point\r\n                    bottomSegmentStart + 1 // Bottom next point\r\n                );\r\n            }\r\n        } else {\r\n            // Flat shading - each face has its own vertices with unique normals\r\n            for (let i = 0; i < sides; i++) {\r\n                const angle1 = (i * Math.PI * 2) / sides;\r\n                const angle2 = ((i + 1) * Math.PI * 2) / sides;\r\n                \r\n                const x1 = Math.cos(angle1);\r\n                const z1 = Math.sin(angle1);\r\n                const x2 = Math.cos(angle2);\r\n                const z2 = Math.sin(angle2);\r\n\r\n                // Each face gets its own vertices\r\n                vertices.push(\r\n                    x1 * 0.5, 0.5, z1 * 0.5,    // top-left\r\n                    x2 * 0.5, 0.5, z2 * 0.5,    // top-right\r\n                    x1 * 0.5, -0.5, z1 * 0.5,   // bottom-left\r\n                    x1 * 0.5, -0.5, z1 * 0.5,   // bottom-left\r\n                    x2 * 0.5, 0.5, z2 * 0.5,    // top-right\r\n                    x2 * 0.5, -0.5, z2 * 0.5    // bottom-right\r\n                );\r\n\r\n                // Calculate face normal\r\n                const nx = (x1 + x2) / 2;\r\n                const nz = (z1 + z2) / 2;\r\n                const length = Math.sqrt(nx * nx + nz * nz);\r\n                const normalX = nx / length;\r\n                const normalZ = nz / length;\r\n\r\n                // Each vertex in the face gets the same normal\r\n                for (let j = 0; j < 6; j++) {\r\n                    normals.push(normalX, 0, normalZ);\r\n                    generatedColors.push(...sideColor);\r\n                }\r\n\r\n                // Texture coordinates\r\n                texCoords.push(\r\n                    i / sides, 1,\r\n                    (i + 1) / sides, 1,\r\n                    i / sides, 0,\r\n                    i / sides, 0,\r\n                    (i + 1) / sides, 1,\r\n                    (i + 1) / sides, 0\r\n                );\r\n\r\n                // Indices for flat shading are just sequential\r\n                const baseIndex = i * 6;\r\n                indices.push(\r\n                    baseIndex, baseIndex + 1, baseIndex + 2,\r\n                    baseIndex + 3, baseIndex + 4, baseIndex + 5\r\n                );\r\n            }\r\n\r\n            // Generate caps for flat shading\r\n            const sideVertexCount = vertices.length / 3;\r\n\r\n            // Add centers for both caps\r\n            vertices.push(0, 0.5, 0);  // Top center\r\n            vertices.push(0, -0.5, 0); // Bottom center\r\n            normals.push(0, 1, 0);     // Top normal\r\n            normals.push(0, -1, 0);    // Bottom normal\r\n            generatedColors.push(...topColor, ...bottomColor);\r\n            texCoords.push(0.5, 0.5, 0.5, 0.5);\r\n\r\n            const topCenterIndex = sideVertexCount;\r\n            const bottomCenterIndex = sideVertexCount + 1;\r\n\r\n            // Generate vertices for both caps\r\n            for (let i = 0; i < sides; i++) {\r\n                const angle1 = (i * Math.PI * 2) / sides;\r\n                const angle2 = ((i + 1) * Math.PI * 2) / sides;\r\n                \r\n                const x1 = Math.cos(angle1) * 0.5;\r\n                const z1 = Math.sin(angle1) * 0.5;\r\n                const x2 = Math.cos(angle2) * 0.5;\r\n                const z2 = Math.sin(angle2) * 0.5;\r\n\r\n                // Add vertices for top cap\r\n                vertices.push(\r\n                    x1, 0.5, z1,\r\n                    x2, 0.5, z2\r\n                );\r\n\r\n                // Add normals for top cap\r\n                normals.push(0, 1, 0, 0, 1, 0);\r\n                generatedColors.push(...topColor, ...topColor);\r\n                texCoords.push(\r\n                    x1 + 0.5, z1 + 0.5,\r\n                    x2 + 0.5, z2 + 0.5\r\n                );\r\n\r\n                // Add indices for top cap (reverse order from bottom to flip normal)\r\n                const topOffset = sideVertexCount + 2 + i * 4;\r\n                indices.push(\r\n                    topCenterIndex,    // center\r\n                    topOffset + 1,     // next point\r\n                    topOffset          // current point\r\n                );\r\n\r\n                // Add vertices for bottom cap\r\n                vertices.push(\r\n                    x1, -0.5, z1,\r\n                    x2, -0.5, z2\r\n                );\r\n\r\n                // Add normals for bottom cap\r\n                normals.push(0, -1, 0, 0, -1, 0);\r\n                generatedColors.push(...bottomColor, ...bottomColor);\r\n                texCoords.push(\r\n                    x1 + 0.5, z1 + 0.5,\r\n                    x2 + 0.5, z2 + 0.5\r\n                );\r\n\r\n                // Add indices for bottom cap\r\n                const bottomOffset = topOffset + 2;\r\n                indices.push(\r\n                    bottomCenterIndex,    // center\r\n                    bottomOffset,         // current point\r\n                    bottomOffset + 1      // next point\r\n                );\r\n            }\r\n        }\r\n\r\n        return {\r\n            vertices: new Float32Array(vertices),\r\n            indices: new Uint16Array(indices),\r\n            normals: new Float32Array(normals),\r\n            colors: new Float32Array(generatedColors),\r\n            texCoords: new Float32Array(texCoords)\r\n        };\r\n    }\r\n\r\n    public static create(props: CylinderProps = {}): SceneObject {\r\n        const meshData = this.generateMeshData(props.sides || 32, props.smoothShading ?? true, props.colors);\r\n        return this.createSceneObject(meshData, props);\r\n    }\r\n}\r\n", "import { SceneObject, SceneObjectProps } from './sceneObject';\r\nimport { ContainerObject } from './containerObject';\r\nimport { v3, Vector3 } from '../../util/math/vector3';\r\nimport { Cone } from './cone';\r\nimport { Cylinder } from './cylinder';\r\nimport { Quaternion } from '../../util/math/quaternion';\r\nimport { Scene } from '../scene';\r\n\r\nexport interface ArrowProps extends SceneObjectProps {\r\n    length?: number;\r\n    shaftRadius?: number;\r\n    headLength?: number;\r\n    headRadius?: number;\r\n    shaftColor?: [number, number, number];\r\n    headColor?: [number, number, number];\r\n    parent?: SceneObject;\r\n    sides?: number;\r\n    smoothShading?: boolean;\r\n    lookAt?: Vector3;\r\n}\r\n\r\nexport class Arrow extends ContainerObject {\r\n    shaft: SceneObject;\r\n    head: SceneObject;\r\n    props: ArrowProps;\r\n    constructor(scene: Scene, props: ArrowProps = {}) {\r\n        super(props);\r\n        this.props = {\r\n            position: v3(0, 0, 0),\r\n            shaftRadius: 0.5,\r\n            headLength: 0.5,\r\n            headRadius: 2,\r\n            sides: 4,\r\n            smoothShading: false,\r\n            shaftColor: [1, 1, 1],\r\n            headColor: [1, 1, 1],\r\n            ...props,\r\n        }\r\n        if (props.parent) {\r\n            this.transform.setParent(props.parent.transform);\r\n        }\r\n\r\n        const shaftLength = this.props.length - this.props.headLength;\r\n\r\n        // // Add main cube slightly elevated\r\n        scene.add(this.shaft = Cylinder.create({\r\n            position: v3(0, shaftLength/2, 0),\r\n            scale: v3(this.props.shaftRadius, shaftLength, this.props.shaftRadius),\r\n            colors: this.props.shaftColor,\r\n            sides: this.props.sides,\r\n            smoothShading: this.props.smoothShading,\r\n            parent: this,\r\n            ignoreLighting: this.props.ignoreLighting,\r\n        }));\r\n        scene.add(this.head = Cone.create({\r\n            position: v3(0, shaftLength + this.props.headLength/2, 0),\r\n            scale: v3(this.props.headRadius, this.props.headLength, this.props.headRadius),\r\n            colors: this.props.headColor,\r\n            smoothShading: this.props.smoothShading,\r\n            sides: this.props.sides,\r\n            parent: this,\r\n            ignoreLighting: this.props.ignoreLighting,\r\n        }));\r\n        this.setLength(this.props.length);\r\n        if (this.props.lookAt) {\r\n            this.lookAt(this.props.lookAt);\r\n        }\r\n    }\r\n\r\n    public setLength(length: number) {\r\n        let shaftLength = length - this.props.headLength;\r\n        let headLength = this.props.headLength;\r\n\r\n        if (shaftLength < 0){\r\n            headLength = length;\r\n            shaftLength = 0;\r\n        }\r\n\r\n        this.shaft.transform.setPosition(v3(0, shaftLength/2, 0));\r\n        this.shaft.transform.setScale(v3(this.props.shaftRadius, shaftLength, this.props.shaftRadius));\r\n        this.head.transform.setPosition(v3(0, shaftLength + headLength/2, 0));\r\n        this.head.transform.setScale(v3(this.props.headRadius, headLength, this.props.headRadius));\r\n    }\r\n\r\n    public lookAt(target: Vector3) {\r\n        const position = this.transform.getWorldPosition();\r\n        const direction = target.subtract(position).normalize();\r\n        \r\n        // Calculate rotation axis and angle\r\n        const defaultDir = v3(0, 1, 0); // Arrow points up by default\r\n        const rotationAxis = defaultDir.cross(direction).scale(-1).normalize();\r\n        const angle = Math.acos(defaultDir.y * direction.y + defaultDir.x * direction.x + defaultDir.z * direction.z);\r\n        \r\n        this.transform.setRotation(new Quaternion().setAxisAngle(rotationAxis, angle));\r\n    }\r\n} ", "import { MeshData } from '../types';\r\nimport { SceneObject } from './sceneObject';\r\nimport { BaseMesh, BaseMeshProps } from './baseMesh';\r\n\r\nexport interface IcoSphereProps extends BaseMeshProps {\r\n    subdivisions?: number;  // Number of times to subdivide the icosahedron (0-5 recommended)\r\n    color?: [number, number, number];\r\n    smoothShading?: boolean;\r\n}\r\n\r\nexport class IcoSphere extends BaseMesh {\r\n    private static readonly X = 0.525731112119133606;\r\n    private static readonly Z = 0.850650808352039932;\r\n\r\n    // Initial icosahedron vertices\r\n    private static readonly baseVertices = [\r\n        [-this.X, 0.0, this.Z], [this.X, 0.0, this.Z], [-this.X, 0.0, -this.Z], [this.X, 0.0, -this.Z],\r\n        [0.0, this.Z, this.X], [0.0, this.Z, -this.X], [0.0, -this.Z, this.X], [0.0, -this.Z, -this.X],\r\n        [this.Z, this.X, 0.0], [-this.Z, this.X, 0.0], [this.Z, -this.X, 0.0], [-this.Z, -this.X, 0.0]\r\n    ];\r\n\r\n    // Initial icosahedron indices\r\n    private static readonly baseIndices = [\r\n        1,4,0,  4,9,0,  4,5,9,  8,5,4,  1,8,4,\r\n        1,10,8, 10,3,8, 8,3,5,  3,2,5,  3,7,2,\r\n        3,10,7, 10,6,7, 6,11,7, 6,0,11, 6,1,0,\r\n        10,1,6, 11,0,9, 2,11,9, 5,2,9,  11,2,7\r\n    ];\r\n\r\n    protected static normalize(v: number[]): number[] {\r\n        const length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\r\n        return [v[0] / length, v[1] / length, v[2] / length];\r\n    }\r\n\r\n    private static midpoint(v1: number[], v2: number[]): number[] {\r\n        return this.normalize([\r\n            (v1[0] + v2[0]) / 2,\r\n            (v1[1] + v2[1]) / 2,\r\n            (v1[2] + v2[2]) / 2\r\n        ]);\r\n    }\r\n\r\n    private static generateMeshData(\r\n        subdivisions: number = 0,\r\n        smoothShading: boolean = true,\r\n        color: [number, number, number] = [0.8, 0.2, 0.2]\r\n    ): MeshData {\r\n        let vertices: number[][] = [...this.baseVertices];\r\n        let indices: number[] = [...this.baseIndices];\r\n        const vertexMap = new Map<string, number>();\r\n\r\n        // Helper to get or create midpoint vertex\r\n        const getMiddlePoint = (v1Index: number, v2Index: number): number => {\r\n            const key = `${Math.min(v1Index, v2Index)}_${Math.max(v1Index, v2Index)}`;\r\n            if (vertexMap.has(key)) {\r\n                return vertexMap.get(key)!;\r\n            }\r\n\r\n            const p1 = vertices[v1Index];\r\n            const p2 = vertices[v2Index];\r\n            const middle = this.midpoint(p1, p2);\r\n            \r\n            const i = vertices.length;\r\n            vertices.push(middle);\r\n            vertexMap.set(key, i);\r\n            return i;\r\n        };\r\n\r\n        // Subdivide\r\n        for (let i = 0; i < subdivisions; i++) {\r\n            const newIndices: number[] = [];\r\n            \r\n            for (let j = 0; j < indices.length; j += 3) {\r\n                const a = indices[j];\r\n                const b = indices[j + 1];\r\n                const c = indices[j + 2];\r\n\r\n                const ab = getMiddlePoint(a, b);\r\n                const bc = getMiddlePoint(b, c);\r\n                const ca = getMiddlePoint(c, a);\r\n\r\n                newIndices.push(\r\n                    a, ab, ca,\r\n                    b, bc, ab,\r\n                    c, ca, bc,\r\n                    ab, bc, ca\r\n                );\r\n            }\r\n            \r\n            indices = newIndices;\r\n        }\r\n\r\n        // Scale vertices to radius 0.5\r\n        vertices = vertices.map(v => [v[0] * 0.5, v[1] * 0.5, v[2] * 0.5]);\r\n\r\n        // Generate flat arrays and normals\r\n        const flatVertices: number[] = [];\r\n        const normals: number[] = [];\r\n        const generatedColors: number[] = [];\r\n        const texCoords: number[] = [];\r\n\r\n        if (smoothShading) {\r\n            // For smooth shading, use vertices directly as normals\r\n            vertices.forEach(v => {\r\n                flatVertices.push(...v);\r\n                normals.push(...this.normalize(v));\r\n                generatedColors.push(...color);\r\n                // Generate basic texture coordinates based on spherical projection\r\n                const u = 0.5 + Math.atan2(v[2], v[0]) / (2 * Math.PI);\r\n                const vCoord = 0.5 - Math.asin(v[1]) / Math.PI;\r\n                texCoords.push(u, vCoord);\r\n            });\r\n        } else {\r\n            // For flat shading, create separate vertices for each face\r\n            const newIndices: number[] = [];\r\n            for (let i = 0; i < indices.length; i += 3) {\r\n                const v1 = vertices[indices[i]];\r\n                const v2 = vertices[indices[i + 1]];\r\n                const v3 = vertices[indices[i + 2]];\r\n\r\n                // Calculate face normal\r\n                const dx1 = v2[0] - v1[0], dy1 = v2[1] - v1[1], dz1 = v2[2] - v1[2];\r\n                const dx2 = v3[0] - v1[0], dy2 = v3[1] - v1[1], dz2 = v3[2] - v1[2];\r\n                const normal = this.normalize([\r\n                    dy1 * dz2 - dz1 * dy2,\r\n                    dz1 * dx2 - dx1 * dz2,\r\n                    dx1 * dy2 - dy1 * dx2\r\n                ]);\r\n\r\n                // Each vertex needs to be duplicated for flat shading\r\n                const baseIndex = flatVertices.length / 3;\r\n                \r\n                // Add vertices in correct winding order\r\n                [v1, v2, v3].forEach(vertex => {\r\n                    flatVertices.push(...vertex);\r\n                    normals.push(...normal);\r\n                    generatedColors.push(...color);\r\n                    const u = 0.5 + Math.atan2(vertex[2], vertex[0]) / (2 * Math.PI);\r\n                    const vCoord = 0.5 - Math.asin(vertex[1]) / Math.PI;\r\n                    texCoords.push(u, vCoord);\r\n                });\r\n\r\n                // Add indices for this face\r\n                newIndices.push(baseIndex, baseIndex + 1, baseIndex + 2);\r\n            }\r\n            indices = newIndices;\r\n        }\r\n\r\n        return {\r\n            vertices: new Float32Array(flatVertices),\r\n            indices: new Uint16Array(indices),\r\n            normals: new Float32Array(normals),\r\n            colors: new Float32Array(generatedColors),\r\n            texCoords: new Float32Array(texCoords)\r\n        };\r\n    }\r\n\r\n    public static create(props: IcoSphereProps = {}): SceneObject {\r\n        const meshData = this.generateMeshData(\r\n            props.subdivisions ?? 0,\r\n            props.smoothShading ?? true,\r\n            props.color || [0.8, 0.2, 0.2]\r\n        );\r\n        return this.createSceneObject(meshData, props);\r\n    }\r\n} ", "export class ShadowMap {\r\n    private framebuffer: WebGLFramebuffer;\r\n    private depthTexture: WebGLTexture;\r\n    private size: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, size: number = 1024) {\r\n        this.size = size;\r\n        \r\n        // Create depth texture\r\n        this.depthTexture = gl.createTexture()!;\r\n        gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            gl.DEPTH_COMPONENT32F,\r\n            size,\r\n            size,\r\n            0,\r\n            gl.DEPTH_COMPONENT,\r\n            gl.FLOAT,\r\n            null\r\n        );\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        // Create and setup framebuffer\r\n        this.framebuffer = gl.createFramebuffer()!;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n        gl.framebufferTexture2D(\r\n            gl.FRAMEBUFFER,\r\n            gl.DEPTH_ATTACHMENT,\r\n            gl.TEXTURE_2D,\r\n            this.depthTexture,\r\n            0\r\n        );\r\n\r\n        // No color buffer needed for shadow map\r\n        gl.drawBuffers([gl.NONE]);\r\n        gl.readBuffer(gl.NONE);\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n\r\n    bind(gl: WebGL2RenderingContext) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n        gl.viewport(0, 0, this.size, this.size);\r\n    }\r\n\r\n    bindDepthTexture(gl: WebGL2RenderingContext, textureUnit: number) {\r\n        gl.activeTexture(gl.TEXTURE0 + textureUnit);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);\r\n    }\r\n\r\n    getDepthTexture(): WebGLTexture {\r\n        return this.depthTexture;\r\n    }\r\n\r\n    getSize(): number {\r\n        return this.size;\r\n    }\r\n} ", "import { glob } from '../../../game';\r\nimport { Matrix4 } from '../../util/math/matrix4';\r\nimport { Quaternion } from '../../util/math/quaternion';\r\nimport { v3, Vector3 } from '../../util/math/vector3';\r\nimport { Arrow } from '../meshes/arrow';\r\nimport { IcoSphere } from '../meshes/icoSphere';\r\nimport { SceneObject } from '../meshes/sceneObject';\r\nimport { Scene } from '../scene';\r\nimport { ShadowMap } from './shadowMap';\r\n\r\nexport enum LightType {\r\n    AMBIENT = 0,\r\n    DIRECTIONAL = 1,\r\n    POINT = 2,\r\n    SPOT = 3\r\n}\r\n\r\nexport interface LightData {\r\n    color: Vector3;\r\n    intensity: number;\r\n}\r\n\r\nexport interface DirectionalLightData extends LightData {\r\n    direction: Vector3;\r\n}\r\n\r\nexport interface PointLightData extends LightData {\r\n    position: Vector3;\r\n    constant: number;\r\n    linear: number;\r\n    quadratic: number;\r\n}\r\n\r\nexport interface SpotLightData extends PointLightData {\r\n    direction: Vector3;\r\n    cutOff: number;\r\n    outerCutOff: number;\r\n}\r\n\r\nexport class Light {\r\n    protected color: Vector3;\r\n    protected intensity: number;\r\n    protected type: LightType;\r\n\r\n    constructor({ color = v3(1, 1, 1), intensity = 1.0 }: { color?: Vector3; intensity?: number; } = {}) {\r\n        this.color = color;\r\n        this.intensity = intensity;\r\n    }\r\n\r\n    getType(): LightType {\r\n        return this.type;\r\n    }\r\n\r\n    getData(): LightData {\r\n        return {\r\n            color: this.color,\r\n            intensity: this.intensity\r\n        };\r\n    }\r\n\r\n    getShadowMap(): ShadowMap | null {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport class AmbientLight extends Light {\r\n    constructor({ color = v3(1, 1, 1), intensity = 0.1 }: { color?: Vector3, intensity?: number; } = {}) {\r\n        super({ color, intensity });\r\n        this.type = LightType.AMBIENT;\r\n    }\r\n}\r\n\r\nexport class DirectionalLight extends Light {\r\n    private direction: Vector3;\r\n\r\n    constructor({\r\n        direction = v3(0, -1, 0),\r\n        color = v3(1, 1, 1),\r\n        intensity = 1.0 }: {\r\n            direction?: Vector3;\r\n            color?: Vector3;\r\n            intensity?: number;\r\n        } = {}) {\r\n        super({ color, intensity });\r\n        this.direction = direction.normalize();\r\n        this.type = LightType.DIRECTIONAL;\r\n    }\r\n\r\n    getData(): DirectionalLightData {\r\n        return {\r\n            ...super.getData(),\r\n            direction: this.direction\r\n        };\r\n    }\r\n}\r\n\r\nexport class PointLight extends Light {\r\n    protected position: Vector3;\r\n    protected constant: number;\r\n    protected linear: number;\r\n    protected quadratic: number;\r\n    protected shadowMap: ShadowMap;\r\n    protected lightProjection: Matrix4;\r\n    protected mesh: SceneObject;\r\n\r\n    constructor({\r\n        position = v3(0, 0, 0),\r\n        color = v3(1, 1, 1),\r\n        intensity = 1.0,\r\n        attenuation = { constant: 1.0, linear: 0.09, quadratic: 0.032 },\r\n        meshContainer\r\n    }: {\r\n        position?: Vector3;\r\n        color?: Vector3;\r\n        intensity?: number;\r\n        attenuation?: {\r\n            constant: number;\r\n            linear: number;\r\n            quadratic: number;\r\n        };\r\n        meshContainer?: Scene;\r\n    } = {}) {\r\n        super({ color, intensity });\r\n        this.position = position;\r\n        this.constant = attenuation.constant;\r\n        this.linear = attenuation.linear;\r\n        this.quadratic = attenuation.quadratic;\r\n        this.type = LightType.POINT;\r\n        this.shadowMap = new ShadowMap(glob.ctx, 4096);\r\n\r\n        // Create orthographic projection matrix for the light\r\n        this.lightProjection = new Matrix4().ortho(\r\n            -10, 10,  // left, right\r\n            -10, 10,  // bottom, top\r\n            0.1, 100.0  // near, far\r\n        );\r\n\r\n        if (meshContainer) {\r\n            meshContainer.add(this.mesh = IcoSphere.create({\r\n                position: position,\r\n                scale: v3(0.1, 0.1, 0.1),\r\n                color: [0,0,0],\r\n                subdivisions: 0,\r\n                smoothShading: true,\r\n                ignoreLighting: true,\r\n            }));\r\n        }\r\n    }\r\n\r\n    public setPosition(position: Vector3) {\r\n        this.position = position;\r\n        if (this.mesh) {\r\n            this.mesh.transform.setPosition(position);\r\n        }\r\n    }\r\n\r\n    public getPosition(): Vector3 {\r\n        return this.position;\r\n    }\r\n\r\n    getData(): PointLightData {\r\n        return {\r\n            ...super.getData(),\r\n            position: this.position,\r\n            constant: this.constant,\r\n            linear: this.linear,\r\n            quadratic: this.quadratic\r\n        };\r\n    }\r\n\r\n    getLightSpaceMatrix(): Matrix4 {\r\n        // Calculate view matrix from light position to scene center\r\n        const lightView = Matrix4.lookAt(\r\n            this.position,      // Light position\r\n            v3(0, 0, 0)        // Looking at scene center\r\n        );\r\n\r\n        // Create orthographic projection that encompasses the scene\r\n        this.lightProjection = new Matrix4().ortho(\r\n            -10, 10,    // left, right\r\n            -10, 10,    // bottom, top\r\n            1, 20       // near, far (adjusted to better match scene depth)\r\n        );\r\n\r\n        return this.lightProjection.multiply(lightView);  // Note: projection * view order\r\n    }\r\n\r\n    getShadowMap(): ShadowMap {\r\n        return this.shadowMap;\r\n    }\r\n}\r\n\r\nexport class SpotLight extends PointLight {\r\n    private rotation: Quaternion;\r\n    private cutOff: number;\r\n    private outerCutOff: number;\r\n    arrow: Arrow;\r\n\r\n    constructor(\r\n        { position = v3(0, 0, 0),\r\n            direction = v3(0, -1, 0),\r\n            color = v3(1, 1, 1),\r\n            intensity = 1.0,\r\n            cutOff = Math.cos(Math.PI / 6),\r\n            outerCutOff = Math.cos(Math.PI / 4),\r\n            meshContainer\r\n        }: {\r\n            position?: Vector3;\r\n            direction?: Vector3;\r\n            color?: Vector3;\r\n            intensity?: number;\r\n            cutOff?: number;\r\n            outerCutOff?: number;\r\n            meshContainer?: Scene;\r\n        } = {}) {\r\n\r\n        super({ position, color, intensity, meshContainer });\r\n        this.rotation = new Quaternion();\r\n        this.cutOff = cutOff;\r\n        this.outerCutOff = outerCutOff;\r\n        this.type = LightType.SPOT;\r\n\r\n        if (this.mesh) {\r\n            this.arrow = new Arrow(meshContainer, {\r\n                shaftColor: [0, 0, 0],\r\n                headColor: [0, 0, 0],\r\n                length: 0.3,\r\n                shaftRadius: 0.05,\r\n                headLength: 0.1,\r\n                headRadius: 0.1,\r\n                sides: 4,\r\n                position: v3(-1, 1, 2),\r\n                rotation: this.rotation,\r\n                lookAt: v3(0, 0, 0),\r\n                ignoreLighting: true,\r\n            });\r\n        }\r\n\r\n        if (direction) {\r\n            this.lookAt(position.add(direction));\r\n        }\r\n    }\r\n\r\n    getData(): SpotLightData {\r\n        // Convert rotation to direction vector\r\n        const defaultDir = v3(0, -1, 0);\r\n        const direction = defaultDir.applyQuaternion(this.rotation);\r\n\r\n        return {\r\n            ...super.getData(),\r\n            direction: direction,\r\n            cutOff: this.cutOff,\r\n            outerCutOff: this.outerCutOff\r\n        };\r\n    }\r\n\r\n    public lookAt(target: Vector3) {\r\n        const direction = target.subtract(this.position).normalize();\r\n\r\n        // Calculate rotation axis and angle\r\n        const defaultDir = v3(0, -1, 0); // Light points down by default\r\n        const rotationAxis = defaultDir.cross(direction).normalize();\r\n        const angle = Math.acos(defaultDir.y * direction.y + defaultDir.x * direction.x + defaultDir.z * direction.z);\r\n\r\n        this.rotation = new Quaternion().setAxisAngle(rotationAxis, angle);\r\n\r\n        if (this.arrow) {\r\n            this.arrow.lookAt(target);\r\n        }\r\n    }\r\n\r\n    public setPosition(position: Vector3) {\r\n        super.setPosition(position);\r\n        if (this.arrow) {\r\n            this.arrow.transform.setPosition(position);\r\n        }\r\n    }\r\n\r\n    public getPosition(): Vector3 {\r\n        return this.position;\r\n    }\r\n\r\n    public getRotation(): Quaternion {\r\n        return this.rotation.clone();\r\n    }\r\n\r\n    public setRotation(rotation: Quaternion) {\r\n        this.rotation = rotation;\r\n    }\r\n} ", "import { Light, LightType, DirectionalLight, PointLight, SpotLight, AmbientLight } from './light';\r\nimport { ShaderManager } from '../shaderManager';\r\n\r\nexport class LightManager {\r\n    private lights: Light[] = [];\r\n    private shaderManager: ShaderManager;\r\n    private ambientLight: AmbientLight | null = null;\r\n\r\n    constructor(shaderManager: ShaderManager) {\r\n        this.shaderManager = shaderManager;\r\n    }\r\n\r\n    setAmbientLight(light: AmbientLight) {\r\n        this.ambientLight = light;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    addLight(light: Light) {\r\n        if (light instanceof AmbientLight) {\r\n            console.warn('Use setAmbientLight() to set the ambient light instead of addLight()');\r\n            return;\r\n        }\r\n        if (this.lights.length >= 10) {\r\n            console.warn('Maximum number of lights (10) reached. Light not added.');\r\n            return;\r\n        }\r\n        this.lights.push(light);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    removeLight(light: Light) {\r\n        if (light instanceof AmbientLight) {\r\n            console.warn('Cannot remove ambient light. Use setAmbientLight() to modify it instead');\r\n            return;\r\n        }\r\n        const index = this.lights.indexOf(light);\r\n        if (index !== -1) {\r\n            this.lights.splice(index, 1);\r\n            this.updateShaderUniforms();\r\n        }\r\n    }\r\n\r\n    getLights(): Light[] {\r\n        return this.lights;\r\n    }\r\n\r\n    updateShaderUniforms() {\r\n        // Initialize arrays for each light component\r\n        const types = new Int32Array(10);\r\n        const positions = new Float32Array(30); // 10 lights * 3 components\r\n        const directions = new Float32Array(30);\r\n        const colors = new Float32Array(30);\r\n        const intensities = new Float32Array(10);\r\n        const constants = new Float32Array(10);\r\n        const linears = new Float32Array(10);\r\n        const quadratics = new Float32Array(10);\r\n        const cutOffs = new Float32Array(10);\r\n        const outerCutOffs = new Float32Array(10);\r\n\r\n        // Initialize all lights as inactive\r\n        types.fill(-1);\r\n\r\n        // Set ambient light first (if exists)\r\n        if (this.ambientLight) {\r\n            const data = this.ambientLight.getData();\r\n            types[0] = LightType.AMBIENT;\r\n            \r\n            // Set color\r\n            colors[0] = data.color.x;\r\n            colors[1] = data.color.y;\r\n            colors[2] = data.color.z;\r\n            \r\n            // Set intensity\r\n            intensities[0] = data.intensity;\r\n        }\r\n\r\n        // Fill in active lights (starting from index 1 if we have ambient light)\r\n        const startIndex = this.ambientLight ? 1 : 0;\r\n        for (let i = 0; i < this.lights.length; i++) {\r\n            const light = this.lights[i];\r\n            const index = i + startIndex;\r\n            const data = light.getData();\r\n\r\n            // Set type\r\n            types[index] = light.getType();\r\n\r\n            // Set color and intensity (common to all lights)\r\n            const colorOffset = index * 3;\r\n            colors[colorOffset] = data.color.x;\r\n            colors[colorOffset + 1] = data.color.y;\r\n            colors[colorOffset + 2] = data.color.z;\r\n            intensities[index] = data.intensity;\r\n\r\n            // Type-specific properties\r\n            switch (light.getType()) {\r\n                case LightType.DIRECTIONAL: {\r\n                    const dirLight = light as DirectionalLight;\r\n                    const dirData = dirLight.getData();\r\n                    const dirOffset = index * 3;\r\n                    directions[dirOffset] = dirData.direction.x;\r\n                    directions[dirOffset + 1] = dirData.direction.y;\r\n                    directions[dirOffset + 2] = dirData.direction.z;\r\n                    break;\r\n                }\r\n                case LightType.POINT: {\r\n                    const pointLight = light as PointLight;\r\n                    const pointData = pointLight.getData();\r\n                    const posOffset = index * 3;\r\n                    positions[posOffset] = pointData.position.x;\r\n                    positions[posOffset + 1] = pointData.position.y;\r\n                    positions[posOffset + 2] = pointData.position.z;\r\n                    constants[index] = pointData.constant;\r\n                    linears[index] = pointData.linear;\r\n                    quadratics[index] = pointData.quadratic;\r\n                    break;\r\n                }\r\n                case LightType.SPOT: {\r\n                    const spotLight = light as SpotLight;\r\n                    const spotData = spotLight.getData();\r\n                    const posOffset = index * 3;\r\n                    const dirOffset = index * 3;\r\n                    positions[posOffset] = spotData.position.x;\r\n                    positions[posOffset + 1] = spotData.position.y;\r\n                    positions[posOffset + 2] = spotData.position.z;\r\n                    directions[dirOffset] = spotData.direction.x;\r\n                    directions[dirOffset + 1] = spotData.direction.y;\r\n                    directions[dirOffset + 2] = spotData.direction.z;\r\n                    constants[index] = spotData.constant;\r\n                    linears[index] = spotData.linear;\r\n                    quadratics[index] = spotData.quadratic;\r\n                    cutOffs[index] = spotData.cutOff;\r\n                    outerCutOffs[index] = spotData.outerCutOff;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update shader uniforms\r\n        const numLights = this.lights.length + (this.ambientLight ? 1 : 0);\r\n        this.shaderManager.setUniform('u_numLights', numLights);\r\n        this.shaderManager.setUniform('u_lightTypes', types);\r\n        this.shaderManager.setUniform('u_lightPositions', positions);\r\n        this.shaderManager.setUniform('u_lightDirections', directions);\r\n        this.shaderManager.setUniform('u_lightColors', colors);\r\n        this.shaderManager.setUniform('u_lightIntensities', intensities);\r\n        this.shaderManager.setUniform('u_lightConstants', constants);\r\n        this.shaderManager.setUniform('u_lightLinears', linears);\r\n        this.shaderManager.setUniform('u_lightQuadratics', quadratics);\r\n        this.shaderManager.setUniform('u_lightCutOffs', cutOffs);\r\n        this.shaderManager.setUniform('u_lightOuterCutOffs', outerCutOffs);\r\n    }\r\n} ", "import { glob } from '../../game';\r\nimport { TickerReturnData } from '../ticker';\r\nimport { Camera } from './camera';\r\nimport { SceneObject } from './meshes/sceneObject';\r\nimport { Light, AmbientLight, PointLight } from './lights/light';\r\nimport { LightManager } from './lights/lightManager';\r\nimport { v3, Vector3 } from '../util/math/vector3';\r\n\r\nexport interface SceneOptions {\r\n    ambientLightColor?: Vector3;\r\n    ambientLightIntensity?: number;\r\n}\r\n\r\nexport class Scene {\r\n    protected objects: SceneObject[] = [];\r\n    protected camera: Camera;\r\n    protected clearColor: [number, number, number, number] = [0, 0, 0, 1];\r\n    protected lightManager: LightManager;\r\n    private _ambientLight: AmbientLight;\r\n    protected get ambientLight(): AmbientLight {\r\n        return this._ambientLight;\r\n    }\r\n    protected set ambientLight(value: AmbientLight) {\r\n        this._ambientLight = value;\r\n        this.lightManager.setAmbientLight(this.ambientLight);\r\n    }\r\n    protected showShadowMap: boolean = false;\r\n    protected frameCount: number = 0;\r\n\r\n    constructor(camera: Camera, options: SceneOptions = {}) {\r\n        this.camera = camera;\r\n        this.lightManager = new LightManager(glob.shaderManager);\r\n\r\n        // Set up ambient light with default or provided values\r\n        const ambientColor = options.ambientLightColor || v3(1, 1, 1);\r\n        const ambientIntensity = options.ambientLightIntensity ?? 0.1;\r\n        this.ambientLight = new AmbientLight({ color: ambientColor, intensity: ambientIntensity });\r\n\r\n        glob.events.resize.subscribe('level', this.resize.bind(this));\r\n    }\r\n\r\n    public add(object: SceneObject): void {\r\n        this.objects.push(object);\r\n    }\r\n\r\n    public remove(object: SceneObject): void {\r\n        const index = this.objects.indexOf(object);\r\n        if (index !== -1) {\r\n            this.objects.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public getLights(): Light[] {\r\n        return this.lightManager.getLights();\r\n    }\r\n\r\n    public render(): void {\r\n        // First render pass: create shadow maps\r\n        const shadowCastingLights = this.getLights().filter(light => light instanceof PointLight);\r\n        const castsShadow = new Int32Array(10); // MAX_LIGHTS\r\n        const lightSpaceMatrices = new Float32Array(10 * 16); // MAX_LIGHTS * 4x4 matrix\r\n        const hasAmbientLight = this.ambientLight !== null;\r\n        const indexOffset = hasAmbientLight ? 1 : 0; // Account for ambient light being at index 0\r\n\r\n        // For each light that casts shadows\r\n        for (let i = 0; i < shadowCastingLights.length; i++) {\r\n            const light = shadowCastingLights[i] as PointLight;\r\n            const lightIndex = i + indexOffset; // Adjust index for ambient light offset\r\n            const shadowMap = light.getShadowMap();\r\n            shadowMap.bind(glob.ctx);\r\n\r\n            // Use shadow shader program\r\n            glob.shaderManager.useProgram('shadow');\r\n\r\n            // Set light space matrix uniform for shadow pass\r\n            const lightSpaceMatrix = light.getLightSpaceMatrix();\r\n            glob.shaderManager.setUniform('u_lightSpaceMatrix', lightSpaceMatrix.mat4);\r\n\r\n            // Set up depth state\r\n            glob.ctx.enable(glob.ctx.DEPTH_TEST);\r\n            glob.ctx.depthFunc(glob.ctx.LESS);\r\n            glob.ctx.clearDepth(1.0);\r\n            glob.ctx.clear(glob.ctx.DEPTH_BUFFER_BIT);\r\n\r\n            // Store light space matrix for main render pass\r\n            lightSpaceMatrix.mat4.forEach((value, index) => {\r\n                lightSpaceMatrices[lightIndex * 16 + index] = value;\r\n            });\r\n            castsShadow[lightIndex] = 1;\r\n\r\n            // Render scene from light's perspective\r\n            for (const object of this.objects) {\r\n                if (object.vao && !object.ignoreLighting) {\r\n                    glob.shaderManager.setUniform('u_modelMatrix', object.transform.getWorldMatrix().mat4);\r\n                    object.vao.bind();\r\n                    if (object.indexBuffer) {\r\n                        glob.ctx.drawElements(glob.ctx.TRIANGLES, object.indexBuffer.getCount(), glob.ctx.UNSIGNED_SHORT, 0);\r\n                    } else {\r\n                        glob.ctx.drawArrays(glob.ctx.TRIANGLES, 0, object.drawCount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Second render pass: regular scene rendering with shadows\r\n        glob.ctx.bindFramebuffer(glob.ctx.FRAMEBUFFER, null);\r\n        glob.ctx.viewport(0, 0, glob.ctx.canvas.width, glob.ctx.canvas.height);\r\n\r\n        glob.ctx.clear(glob.ctx.COLOR_BUFFER_BIT | glob.ctx.DEPTH_BUFFER_BIT);\r\n        glob.ctx.clearColor(...this.clearColor);\r\n\r\n        // Switch back to the main shader program\r\n        glob.shaderManager.useProgram('basic');\r\n\r\n        const viewMatrix = this.camera.getViewMatrix();\r\n        const projectionMatrix = this.camera.getProjectionMatrix();\r\n\r\n        // Update light uniforms including shadow maps\r\n        this.lightManager.updateShaderUniforms();\r\n\r\n        // Set shadow mapping uniforms\r\n        glob.shaderManager.setUniform('u_lightSpaceMatrices', lightSpaceMatrices);\r\n        glob.shaderManager.setUniform('u_castsShadow', castsShadow);\r\n\r\n        // Bind all shadow maps to different texture units\r\n        shadowCastingLights.forEach((light, i) => {\r\n            if (light instanceof PointLight) {\r\n                const lightIndex = i + indexOffset;\r\n                const shadowMap = light.getShadowMap();\r\n                shadowMap.bindDepthTexture(glob.ctx, lightIndex + 1); // Start from texture unit 1\r\n                glob.shaderManager.setUniform(`u_shadowMap${lightIndex}`, lightIndex + 1);\r\n            }\r\n        });\r\n\r\n        // For each object in the scene\r\n        for (const object of this.objects) {\r\n            object.render(viewMatrix, projectionMatrix);\r\n        }\r\n\r\n        this.frameCount++;\r\n    }\r\n\r\n    public dispose(): void {\r\n        for (const object of this.objects) {\r\n            object.vao.dispose();\r\n            object.indexBuffer?.dispose();\r\n        }\r\n        this.objects = [];\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n\r\n    }\r\n    public afterTick(obj: TickerReturnData) {\r\n        this.render();\r\n    }\r\n    public resize(): void {\r\n        this.camera.updateProjectionMatrix();\r\n    }\r\n\r\n    addLight(light: Light): void {\r\n        if (light instanceof AmbientLight) {\r\n            console.warn('Use setAmbientLight() to set the ambient light instead of addLight()');\r\n            return;\r\n        }\r\n        this.lightManager.addLight(light);\r\n    }\r\n\r\n    removeLight(light: Light): void {\r\n        if (light instanceof AmbientLight) {\r\n            console.warn('Cannot remove ambient light. Use setAmbientLight() to modify it instead');\r\n            return;\r\n        }\r\n        this.lightManager.removeLight(light);\r\n    }\r\n\r\n    public update(data: TickerReturnData): void {\r\n        // Update scene objects if needed\r\n    }\r\n} ", "import { v3, Vector3 } from '../util/math/vector3';\r\nimport { m4, Matrix4 } from '../util/math/matrix4';\r\n\r\nexport class Camera {\r\n    private position: Vector3;\r\n    private target: Vector3;\r\n\r\n    private viewMatrix: Matrix4;\r\n    private projectionMatrix: Matrix4;\r\n\r\n    private fov: number;\r\n    private near: number;\r\n    private far: number;\r\n\r\n    constructor(\r\n        { position = v3(0, 0, 5), target = v3(0, 0, 0), fov = 45, near = 0.1, far = 1000 }: { position?: Vector3; target?: Vector3; fov?: number; near?: number; far?: number; } = {}) {\r\n        this.position = position;\r\n        this.target = target;\r\n\r\n        this.fov = fov;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.updateViewMatrix();\r\n        this.updateProjectionMatrix();\r\n    }\r\n\r\n    public updateViewMatrix(): void {\r\n        this.viewMatrix = Matrix4.lookAt(this.position, this.target);\r\n    }\r\n\r\n    public updateProjectionMatrix(): void {\r\n        this.projectionMatrix = m4().perspective(\r\n            this.fov * Math.PI / 180,\r\n            this.near,\r\n            this.far\r\n        );\r\n    }\r\n\r\n    public setPosition(position: Vector3): void {\r\n        this.position = position;\r\n        this.updateViewMatrix();\r\n    }\r\n\r\n    public setTarget(target: Vector3): void {\r\n        this.target = target;\r\n        this.updateViewMatrix();\r\n    }\r\n\r\n    public setFov(fov: number): void {\r\n        this.fov = fov;\r\n        this.updateProjectionMatrix();\r\n    }\r\n\r\n    public getViewMatrix(): Matrix4 {\r\n        return this.viewMatrix;\r\n    }\r\n\r\n    public getProjectionMatrix(): Matrix4 {\r\n        return this.projectionMatrix;\r\n    }\r\n\r\n    public getPosition(): Vector3 {\r\n        return this.position;\r\n    }\r\n\r\n    public getTarget(): Vector3 {\r\n        return this.target;\r\n    }\r\n} ", "import { Vector3, v3 } from '../util/math/vector3';\r\n\r\nexport class Material {\r\n    public ambient: Vector3;\r\n    public diffuse: Vector3;\r\n    public specular: Vector3;\r\n    public shininess: number;\r\n    public diffuseMap?: WebGLTexture;\r\n    public normalMap?: WebGLTexture;\r\n    public specularMap?: WebGLTexture;\r\n\r\n    constructor({\r\n        ambient = v3(0.2, 0.2, 0.2),\r\n        diffuse = v3(0.8, 0.8, 0.8),\r\n        specular = v3(1.0, 1.0, 1.0),\r\n        shininess = 2.0,\r\n        diffuseMap,\r\n        normalMap,\r\n        specularMap\r\n    }: {\r\n        ambient?: Vector3;\r\n        diffuse?: Vector3;\r\n        specular?: Vector3;\r\n        shininess?: number;\r\n        diffuseMap?: WebGLTexture;\r\n        normalMap?: WebGLTexture;\r\n        specularMap?: WebGLTexture;\r\n    } = {}) {\r\n        this.ambient = ambient;\r\n        this.diffuse = diffuse;\r\n        this.specular = specular;\r\n        this.shininess = shininess;\r\n        this.diffuseMap = diffuseMap;\r\n        this.normalMap = normalMap;\r\n        this.specularMap = specularMap;\r\n    }\r\n\r\n} ", "import { MeshData } from '../types';\r\nimport { BaseMesh, BaseMeshProps } from './baseMesh';\r\nimport { SceneObject } from './sceneObject';\r\nimport { Material } from '../material';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { glob } from '../../../game';\r\n\r\nexport interface PlaneProps extends BaseMeshProps {\r\n    material?: Material;\r\n    texture?: string;\r\n    flipNormal?: boolean;\r\n}\r\n\r\nexport class Plane extends BaseMesh {\r\n    private static vertices: Float32Array = new Float32Array([\r\n        // Single face (square)\r\n        -0.5, 0.0, -0.5,  // bottom-left\r\n        0.5, 0.0, -0.5,  // bottom-right\r\n        0.5, 0.0, 0.5,  // top-right\r\n        -0.5, 0.0, 0.5   // top-left\r\n    ]);\r\n\r\n    private static generateIndices(flipNormal: boolean): Uint16Array {\r\n        return new Uint16Array(\r\n            flipNormal\r\n                ? [0, 1, 2, 2, 3, 0]     // clockwise winding for bottom visibility\r\n                : [0, 2, 1, 0, 3, 2]      // counter-clockwise winding for top visibility\r\n        );\r\n    }\r\n\r\n    private static generateNormals(flipNormal: boolean): Float32Array {\r\n        const normalY = flipNormal ? -1.0 : 1.0;\r\n        return new Float32Array([\r\n            0.0, normalY, 0.0,\r\n            0.0, normalY, 0.0,\r\n            0.0, normalY, 0.0,\r\n            0.0, normalY, 0.0\r\n        ]);\r\n    }\r\n\r\n    private static texCoords: Float32Array = new Float32Array([\r\n        0.0, 0.0,\r\n        1.0, 0.0,\r\n        1.0, 1.0,\r\n        0.0, 1.0\r\n    ]);\r\n\r\n    private static generateColors(material?: Material): Float32Array {\r\n        const defaultColor = vec3.fromValues(0.8, 0.8, 0.8); // Default to light gray\r\n        const color = material ? material.diffuse.vec : defaultColor;\r\n\r\n        // Four vertices need the same color\r\n        return new Float32Array([\r\n            color[0], color[1], color[2],\r\n            color[0], color[1], color[2],\r\n            color[0], color[1], color[2],\r\n            color[0], color[1], color[2]\r\n        ]);\r\n    }\r\n\r\n    private static createMeshData(props: PlaneProps = {}): MeshData {\r\n        return {\r\n            vertices: this.vertices,\r\n            indices: this.generateIndices(props.flipNormal || false),\r\n            normals: this.generateNormals(props.flipNormal || false),\r\n            texCoords: this.texCoords,\r\n            colors: this.generateColors(props.material)\r\n        };\r\n    }\r\n\r\n    public static create(props: PlaneProps = {}): SceneObject {\r\n        // Create default material if none provided\r\n        if (!props.material && !props.texture) {\r\n            props.material = new Material();\r\n        }\r\n\r\n        const meshData = this.createMeshData(props);\r\n        const sceneObject = this.createSceneObject(meshData, props);\r\n\r\n        // Set material uniforms\r\n        if (props.material) {\r\n            // Set material properties\r\n            glob.shaderManager.setUniform('u_material.ambient', new Float32Array(props.material.ambient.vec));\r\n            glob.shaderManager.setUniform('u_material.diffuse', new Float32Array(props.material.diffuse.vec));\r\n            glob.shaderManager.setUniform('u_material.specular', new Float32Array(props.material.specular.vec));\r\n            glob.shaderManager.setUniform('u_material.shininess', props.material.shininess);\r\n\r\n            if (props.material.diffuseMap) {\r\n                glob.shaderManager.setUniform('u_useTexture', 1);\r\n                // Bind texture to texture unit 0\r\n                glob.ctx.activeTexture(glob.ctx.TEXTURE0);\r\n                glob.ctx.bindTexture(glob.ctx.TEXTURE_2D, props.material.diffuseMap);\r\n                glob.shaderManager.setUniform('u_material.diffuseMap', 0); // Use texture unit 0\r\n            } else {\r\n                glob.shaderManager.setUniform('u_useTexture', 0);\r\n            }\r\n        }\r\n\r\n        return sceneObject;\r\n    }\r\n} ", "import { v3 } from './util/math/vector3';\r\nimport { SceneObject } from './webgl2/meshes/sceneObject';\r\nimport { TickerReturnData } from './ticker';\r\nimport { Scene } from './webgl2/scene';\r\nimport { Camera } from './webgl2/camera';\r\nimport { PointLight, SpotLight } from './webgl2/lights/light';\r\nimport { Quaternion } from './util/math/quaternion';\r\nimport { Arrow } from './webgl2/meshes/arrow';\r\nimport { IcoSphere } from './webgl2/meshes/icoSphere';\r\nimport { Plane } from './webgl2/meshes/plane';\r\nimport { Material } from './webgl2/material';\r\n\r\nexport class TestLevel extends Scene {\r\n    private mesh: SceneObject;\r\n    protected clearColor: [number, number, number, number] = [0, 0, 0, 1];  // Match demo's black background\r\n    arrow: Arrow;\r\n    spotLight: SpotLight;\r\n    spotLight2: SpotLight;\r\n    spotLight3: SpotLight;\r\n\r\n    constructor() {\r\n        super(new Camera({ position: v3(0, 1, 6), target: v3(0, 0, 0), fov: 60 }), {\r\n            ambientLightColor: v3(1, 1, 1),\r\n            ambientLightIntensity: 0.05  // reduced from 0 to allow some ambient light\r\n        });\r\n\r\n        const rotation = new Quaternion();\r\n        rotation.setAxisAngle(v3(1, 0, 0), 0);\r\n\r\n        this.add(Plane.create({\r\n            position: v3(0, -2, 0),\r\n            scale: v3(10, 10, 10),\r\n            material: new Material({\r\n                diffuse: v3(1, 1, 1),\r\n                specular: v3(1, 1, 1),\r\n                shininess: 3\r\n            })\r\n        }));\r\n\r\n        this.add(Plane.create({\r\n            position: v3(0, 0, -4),\r\n            scale: v3(10, 10, 10),\r\n            rotation: Quaternion.fromEuler(-Math.PI / 2, 0, Math.PI / 2),\r\n            material: new Material({\r\n                diffuse: v3(1, 1, 1),\r\n                specular: v3(1, 1, 1),\r\n                shininess: 3\r\n            }),\r\n\r\n        }));\r\n\r\n\r\n        this.add(this.mesh = IcoSphere.create({\r\n            position: v3(0, 0, 0),\r\n            scale: v3(2.5, 2.5, 2.5),\r\n            colors: [[1, 1, 1], [1, 1, 1]],\r\n            smoothShading: false,\r\n            subdivisions: 0,\r\n            // ignoreLighting: true,\r\n        }));\r\n        this.add( IcoSphere.create({\r\n            position: v3(-2, -1.25, -2),\r\n            scale: v3(1.5, 1.5, 1.5),\r\n            colors: [[1, 1, 1], [1, 1, 1]],\r\n            smoothShading: true,\r\n            subdivisions: 4,\r\n        }));\r\n        this.add( IcoSphere.create({\r\n            position: v3(-3.5, -1.25, -2),\r\n            scale: v3(1.5, 1.5, 1.5),\r\n            colors: [[1, 1, 1], [1, 1, 1]],\r\n            smoothShading: true,\r\n            subdivisions: 4,\r\n        }));\r\n        this.add( IcoSphere.create({\r\n            position: v3(-2.75, -1.25, -.75),\r\n            scale: v3(1.5, 1.5, 1.5),\r\n            colors: [[1, 1, 1], [1, 1, 1]],\r\n            smoothShading: true,\r\n            subdivisions: 4,\r\n        }));\r\n        this.add( IcoSphere.create({\r\n            position: v3(-2.75, 0, -1.325),\r\n            scale: v3(1.5, 1.5, 1.5),\r\n            colors: [[1, 1, 1], [1, 1, 1]],\r\n            smoothShading: true,\r\n            subdivisions: 4,\r\n        }));\r\n\r\n        // Add point light from a good angle to cast shadows\r\n        this.addLight(new PointLight({\r\n            position: v3(0, 5, 4),     // higher position to cast better shadows\r\n            color: v3(1, 1, 1),     \r\n            intensity: 0.1,\r\n            meshContainer: this,\r\n        }));\r\n\r\n        // // Add point light from a good angle to cast shadows\r\n        // this.addLight(new PointLight({\r\n        //     position: v3(1, 0, 3),     // higher position to cast better shadows\r\n        //     color: v3(1, 0.2, 0.2),     \r\n        //     intensity: 0.8,   \r\n        //     meshContainer: this,  \r\n        // }));\r\n\r\n        // // Add point light from a good angle to cast shadows\r\n        // this.addLight(new PointLight({\r\n        //     position: v3(-0.5, 1, 3),     // higher position to cast better shadows\r\n        //     color: v3(0.2, 1, 0.2),     \r\n        //     intensity: 0.8, \r\n        //     meshContainer: this,            // increased intensity\r\n        // }));\r\n\r\n        this.spotLight = new SpotLight({\r\n            position: v3(0, 0, 0),\r\n            color: v3(1, 0, 0),\r\n            intensity: 0.5,\r\n            cutOff: 0.99,\r\n            direction: v3(0, 0, -1),\r\n            outerCutOff: 0.9,\r\n            meshContainer: this,\r\n        });\r\n        this.addLight(this.spotLight);\r\n\r\n        this.spotLight2 = new SpotLight({\r\n            position: v3(0, 0, 0),\r\n            color: v3(0, 0, 1),\r\n            intensity: 0.5,\r\n            cutOff: 0.99,\r\n            direction: v3(0, 0, -1),\r\n            outerCutOff: 0.9,\r\n            meshContainer: this,\r\n        });\r\n        this.addLight(this.spotLight2);\r\n\r\n        this.spotLight3 = new SpotLight({\r\n            position: v3(0, 0, 0),\r\n            color: v3(0, 1, 0),\r\n            intensity: 0.5,\r\n            cutOff: 0.99,\r\n            direction: v3(0, 0, -1),\r\n            outerCutOff: 0.9,\r\n            meshContainer: this,\r\n        });\r\n        this.addLight(this.spotLight3);\r\n    }\r\n\r\n    tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n\r\n        // Rotate the cube slowly\r\n        if (this.mesh) {\r\n            const rotation = new Quaternion();\r\n            rotation.setAxisAngle(v3(0, 1, 0), 0.01);\r\n            this.mesh.transform.setRotation(\r\n                rotation.multiply(this.mesh.transform.getLocalRotation())\r\n            );\r\n        }\r\n\r\n        // if (this.arrow) {\r\n        //     this.arrow.transform.setPosition(\r\n        //         v3(((obj.total *0.0001) % 1) * 8 - 4, 1, 2)\r\n        //     );\r\n        //     this.arrow.lookAt(v3(0, 0, 0));\r\n        // }\r\n\r\n        if (this.spotLight) {\r\n            this.spotLight.setPosition(\r\n                v3(\r\n                    (Math.sin((obj.total + 1000) * 0.0006) % 1) * 4,\r\n                    (Math.sin((obj.total + 8000) * 0.002) % 1) * 3+2,\r\n                    6,\r\n                )\r\n            );\r\n\r\n            this.spotLight.lookAt(v3(0, 0, 0));\r\n        }\r\n\r\n        if (this.spotLight2) {\r\n            this.spotLight2.setPosition(\r\n                v3(\r\n                    (Math.sin((obj.total + 300) * 0.0015 + 0.3) % 1) * 4,\r\n                    ((Math.sin((obj.total + 4000) * 0.001) % 1)+0.6) * 3+2,\r\n                    6,\r\n                )\r\n            );\r\n\r\n            this.spotLight2.lookAt(v3(0, 0, 0));\r\n        }\r\n\r\n        if (this.spotLight3) {\r\n            this.spotLight3.setPosition(\r\n                v3(\r\n                    (Math.sin((obj.total + 1000) * 0.001) % 1) * 4,\r\n                    (Math.sin((obj.total + 2000) * 0.0015) % 1) * 3 + 2,\r\n                    6,\r\n                )\r\n            );\r\n\r\n            this.spotLight3.lookAt(v3(0, 0, 0));\r\n        }\r\n\r\n        this.camera.setPosition(\r\n            v3(\r\n                (Math.sin(obj.total * 0.0005) % 1) * 2,\r\n                0,\r\n                8\r\n            )\r\n        );\r\n\r\n    }\r\n}", "import { glob } from '../game';\r\n\r\nexport type TickerReturnData = {\r\n    interval: number, intervalS3: number, intervalS10: number, intervalS20: number, total: number, frameRate: number, frame: number; \r\n};\r\nexport type TickerCallback = (obj: TickerReturnData) => void;\r\nexport class Ticker {\r\n    private _running: boolean = false;\r\n    private started: boolean = false;\r\n    private pauzedTime: number = 0;\r\n    private intervalKeeper:number[] = []\r\n    private id: number;\r\n    public get running(): boolean {\r\n        return this._running;\r\n    }\r\n    public set running(value: boolean) {\r\n        this._running = value;\r\n        \r\n        if (value) {\r\n            this.pTime = performance.now() - this.pauzedTime;\r\n            this.id = window.requestAnimationFrame(this.frame.bind(this));\r\n        } else {\r\n            window.cancelAnimationFrame(this.id);\r\n            this.pauzedTime = performance.now() - this.pTime\r\n            \r\n        }\r\n    }\r\n    constructor() {\r\n        document.addEventListener(\"visibilitychange\", () => {\r\n            if (this.started) {\r\n                this.running = !document.hidden;\r\n            }\r\n        });\r\n    }\r\n    private callbacks: TickerCallback[] = [];\r\n    private sTime: number;\r\n    public get startTime() {\r\n        return this.sTime;\r\n    }\r\n    private get eTime() {\r\n        return performance.now() - this.sTime;\r\n    }\r\n    // public get elapsed() {\r\n    //     return this.eTime;\r\n    // }\r\n    private pTime: number;\r\n    private frameN: number = 0;\r\n\r\n    private averagedInterval(count: number, interval: number){\r\n        const average = this.intervalKeeper.slice(0,count).reduce((partialSum, a) => partialSum + a, 0) / count;\r\n        return Math.abs(interval - average) > 10?interval: average;\r\n    }\r\n\r\n    private frame(timeStamp: number) {\r\n\r\n        if (this.running) {\r\n            const interval = timeStamp - this.pTime;\r\n            this.intervalKeeper.push(interval);\r\n            this.intervalKeeper = this.intervalKeeper.slice(0,20);\r\n            while(this.intervalKeeper.length<20){\r\n                this.intervalKeeper.push(this.intervalKeeper[0]);\r\n            }\r\n\r\n            this.pTime = timeStamp;\r\n            this.frameN++;\r\n            glob.frame = this.frameN;\r\n            const o = {\r\n                interval,\r\n                total: this.eTime,\r\n                frameRate: 1000 / interval,\r\n                frame: this.frameN,\r\n                intervalS3: this.averagedInterval(3, interval),\r\n                intervalS10: this.averagedInterval(5, interval),\r\n                intervalS20: this.averagedInterval(20, interval),\r\n            };\r\n\r\n            this.callbacks.forEach((c) => {\r\n                c(o);\r\n            });\r\n\r\n            this.id = window.requestAnimationFrame(this.frame.bind(this));\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.started = true;\r\n        this._running = true;\r\n        this.sTime = performance.now();\r\n        this.pTime = performance.now();\r\n        this.id = window.requestAnimationFrame(this.frame.bind(this));\r\n    }\r\n\r\n    public add(callback: TickerCallback) {\r\n        this.callbacks.push(callback);\r\n    }\r\n}\r\n", "import { DomElement } from '../elements/domElement';\r\nimport { DomText } from '../elements/domText';\r\nimport { Vector2 } from './math/vector2';\r\n\r\n\r\nexport class Loader extends DomElement<'div'> {\r\n    bar: DomElement<'div'>;\r\n    barBackground: DomElement<'div'>;\r\n    text: DomText;\r\n    public constructor( ) {\r\n        super('div',{\r\n            position: new Vector2(5, 5),\r\n            size: new Vector2(600, 70),\r\n            background: '#272727',\r\n        });\r\n\r\n        this.bar = new DomElement('div', {\r\n            size: new Vector2(600, 70),\r\n            background: '#80808070',\r\n        })\r\n        this.dom.appendChild(this.bar.dom);\r\n\r\n        this.text = new DomText({\r\n            text: '',\r\n            fontSize: 35,\r\n            fontWeight: 900,\r\n            color: 'white',\r\n            size: new Vector2(600, 70),\r\n            position: new Vector2(30, -10),\r\n            fontFamily: 'monospace',\r\n        });\r\n        this.dom.appendChild(this.text.dom);\r\n    }\r\n\r\n    public update(value: number, total: number){\r\n        this.text.text = `loaded ${total - value} out of ${total} assets`;\r\n        this.bar.width = 600 * (total - value) / total;\r\n    }\r\n}", "import { Renderer } from './classes/elements/renderer';\r\nimport { PadManager } from './classes/input/gamepadManager';\r\nimport { InputDevices } from './classes/input/inputDevices';\r\nimport { TestLevel } from './classes/testLevel';\r\nimport { Ticker, TickerReturnData } from './classes/ticker';\r\nimport { Events } from './classes/util/event';\r\nimport { Loader } from './classes/util/loader';\r\nimport { Scene } from './classes/webgl2/scene';\r\n\r\nexport var glob = new class {\r\n    public game: Game;\r\n    public get renderer() {\r\n        return this.game.renderer;\r\n    }\r\n    public get shaderManager() {\r\n        return this.renderer.shaderManager;\r\n    }\r\n    public device: InputDevices = new InputDevices();\r\n    public get mobile(): boolean {\r\n        return this.device.mobile;\r\n    }\r\n    public frame: number = 0;\r\n    public get ctx(): WebGL2RenderingContext {\r\n        return this.renderer.ctx;\r\n    }\r\n    public events: Record<string, Events<any>> = {};\r\n};\r\n\r\nexport class Game {\r\n    public ticker: Ticker;\r\n    public renderer: Renderer;\r\n    public readyToStart: boolean = false;\r\n    private _waitCount: number = 0;\r\n    private started: boolean = false;\r\n    private loader: Loader;\r\n    \r\n    public total: number = 0;\r\n\r\n    public levels: Record<string, Scene> = {};\r\n    public active: Scene;\r\n\r\n    public padManager: PadManager = new PadManager();\r\n    get t(): TickerReturnData {\r\n        return this.renderer.tickerData;\r\n    }\r\n    public get waitCount(): number {\r\n        return this._waitCount;\r\n    }\r\n    public set waitCount(value: number) {\r\n        if (value > this._waitCount) {\r\n            this.total++;\r\n        }\r\n        if (!this.started) {\r\n            if (value === 0 && this.readyToStart) {\r\n                this.start();\r\n            } else {\r\n                this.loader.update(value, this.total);\r\n            }\r\n        }\r\n        this._waitCount = value;\r\n\r\n    }\r\n\r\n    public constructor() {\r\n        glob.game = this;\r\n        this.init();\r\n        glob.device.ready();\r\n    }\r\n\r\n\r\n    init() {\r\n        this.renderer = new Renderer();\r\n\r\n        this.loader = new Loader();\r\n        this.renderer.addChild(this.loader);\r\n\r\n        this.ticker = new Ticker();\r\n        this.ticker.add(this.tick.bind(this));\r\n\r\n        this.addLevel('test', new TestLevel());\r\n\r\n        if (this.waitCount === 0) {\r\n            this.start();\r\n        } else {\r\n            this.readyToStart = true;\r\n        }\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        this.renderer.tick(obj);\r\n    }\r\n\r\n    protected addLevel(s: string, level: Scene) {\r\n        this.levels[s] = level;\r\n        // if (level.interface) {\r\n        //     document.body.appendChild(level.interface.dom)\r\n        // }\r\n        this.active = level;\r\n    }\r\n\r\n    public get level(): Scene {\r\n        return this.active;\r\n    }\r\n\r\n    public start() {\r\n        this.started = true;\r\n        this.loader.visible = false;\r\n        this.ticker.start();\r\n    }\r\n}\r\n\r\n\r\n", "\r\nimport { Game } from './game';\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n    const g = new Game();\r\n    document.body.appendChild(g.renderer.dom);\r\n});"],
  "mappings": "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AK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GA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",
  "names": ["max", "min", "Buffer", "min", "max", "len", "max", "min", "len", "len", "scale", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "scale", "len", "rotateX", "rotateY", "rotateZ", "str", "exactEquals", "equals", "sub", "mul", "angle", "angle", "scale", "angle", "length", "angle", "length", "length", "angle", "length", "v2", "v3", "angle"]
}
