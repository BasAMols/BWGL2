{
  "version": 3,
  "sources": ["../node_modules/@picode/binary-reader/lib/index.js", "../node_modules/pako/lib/zlib/trees.js", "../node_modules/pako/lib/zlib/adler32.js", "../node_modules/pako/lib/zlib/crc32.js", "../node_modules/pako/lib/zlib/messages.js", "../node_modules/pako/lib/zlib/constants.js", "../node_modules/pako/lib/zlib/deflate.js", "../node_modules/pako/lib/utils/common.js", "../node_modules/pako/lib/utils/strings.js", "../node_modules/pako/lib/zlib/zstream.js", "../node_modules/pako/lib/deflate.js", "../node_modules/pako/lib/zlib/inffast.js", "../node_modules/pako/lib/zlib/inftrees.js", "../node_modules/pako/lib/zlib/inflate.js", "../node_modules/pako/lib/zlib/gzheader.js", "../node_modules/pako/lib/inflate.js", "../node_modules/pako/index.js", "../node_modules/fbx-parser/lib/binary.js", "../node_modules/fbx-parser/lib/ascii.js", "../node_modules/fbx-parser/lib/FBXReader.js", "../node_modules/fbx-parser/lib/index.js", "../ts/classes/util/math/vector2.ts", "../ts/classes/elements/element.ts", "../ts/classes/elements/domElement.ts", "../ts/classes/util/event.ts", "../ts/classes/webgl2/buffer.ts", "../ts/classes/webgl2/shaderManager.ts", "../ts/classes/webgl2/shaders/fragmentShaderSource.ts", "../ts/classes/webgl2/shaders/vertexShaderSource.ts", "../ts/classes/webgl2/shaders/shadowVertexShader.ts", "../ts/classes/webgl2/shaders/pbrVertexShader.ts", "../ts/classes/webgl2/shaders/pbrFragmentShader.ts", "../ts/classes/webgl2/shaders/debugDepthShader.ts", "../ts/classes/webgl2/initialise.ts", "../ts/classes/elements/renderer.ts", "../ts/classes/input/gamepad.ts", "../ts/classes/input/gamepadManager.ts", "../ts/classes/elements/domText.ts", "../ts/classes/input/inputDevices.ts", "../ts/classes/util/utils.ts", "../ts/classes/util/math/vector3.ts", "../node_modules/gl-matrix/esm/common.js", "../node_modules/gl-matrix/esm/mat4.js", "../node_modules/gl-matrix/esm/vec3.js", "../ts/classes/util/math/matrix4.ts", "../ts/classes/util/math/quaternion.ts", "../ts/classes/util/math/transform.ts", "../ts/classes/util/math/color.ts", "../ts/classes/webgl2/meshes/sceneObject.ts", "../ts/classes/webgl2/meshes/baseMesh.ts", "../ts/classes/webgl2/material.ts", "../ts/classes/webgl2/meshes/icoSphere.ts", "../ts/classes/webgl2/lights/shadowMap.ts", "../ts/classes/webgl2/lights/light.ts", "../ts/classes/webgl2/lights/lightManager.ts", "../ts/classes/webgl2/shaders/colorPickingShader.ts", "../ts/classes/webgl2/shaders/skyboxVertexShader.ts", "../ts/classes/webgl2/shaders/skyboxFragmentShader.ts", "../ts/classes/webgl2/skybox.ts", "../ts/classes/webgl2/scene.ts", "../ts/classes/webgl2/camera.ts", "../ts/classes/webgl2/meshes/plane.ts", "../ts/classes/util/urlUtils.ts", "../ts/classes/webgl2/environmentMap.ts", "../ts/classes/webgl2/meshes/fbxLoader.ts", "../ts/classes/testLevel.ts", "../ts/classes/ticker.ts", "../ts/classes/util/loader.ts", "../ts/game.ts", "../ts/index.ts"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BinaryReader = void 0;\nclass BinaryReader {\n    constructor(binary) {\n        this.offset = 0;\n        this.binary = binary;\n    }\n    readUint8() {\n        return this.binary[this.offset++].valueOf();\n    }\n    readUint8AsString() {\n        return String.fromCharCode(this.binary[this.offset++].valueOf());\n    }\n    readUint8AsBool() {\n        return this.binary[this.offset++].valueOf() !== 0;\n    }\n    readUint16() {\n        const v = new DataView(this.binary.buffer, this.binary.byteOffset + this.offset, 2).getUint16(0, true);\n        this.offset += 2;\n        return v;\n    }\n    readUint32() {\n        const v = new DataView(this.binary.buffer, this.binary.byteOffset + this.offset, 4).getUint32(0, true);\n        this.offset += 4;\n        return v;\n    }\n    readUint64() {\n        const v = new DataView(this.binary.buffer, this.binary.byteOffset + this.offset, 8).getBigUint64(0, true);\n        this.offset += 8;\n        return v;\n    }\n    readInt8() {\n        const v = new DataView(this.binary.buffer, this.binary.byteOffset + this.offset, 1).getInt8(0);\n        this.offset += 1;\n        return v;\n    }\n    readInt16() {\n        const v = new DataView(this.binary.buffer, this.binary.byteOffset + this.offset, 2).getInt16(0, true);\n        this.offset += 2;\n        return v;\n    }\n    readInt32() {\n        const v = new DataView(this.binary.buffer, this.binary.byteOffset + this.offset, 4).getInt32(0, true);\n        this.offset += 4;\n        return v;\n    }\n    readInt64() {\n        const v = new DataView(this.binary.buffer, this.binary.byteOffset + this.offset, 8).getBigInt64(0, true);\n        this.offset += 8;\n        return v;\n    }\n    readFloat32() {\n        const v = new DataView(this.binary.buffer, this.binary.byteOffset + this.offset, 4).getFloat32(0, true);\n        this.offset += 4;\n        return v;\n    }\n    readFloat64() {\n        const v = new DataView(this.binary.buffer, this.binary.byteOffset + this.offset, 8).getFloat64(0, true);\n        this.offset += 8;\n        return v;\n    }\n    readUint8Array(length) {\n        return this.binary.subarray(this.offset, (this.offset += length));\n    }\n    readArrayAsString(length) {\n        return String.fromCharCode.apply(null, this.binary.subarray(this.offset, (this.offset += length)));\n    }\n}\nexports.BinaryReader = BinaryReader;\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH    = 3;\nconst MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES       = 30;\n/* number of distance codes */\n\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nconst MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nmodule.exports._tr_init  = _tr_init;\nmodule.exports._tr_stored_block = _tr_stored_block;\nmodule.exports._tr_flush_block  = _tr_flush_block;\nmodule.exports._tr_tally = _tr_tally;\nmodule.exports._tr_align = _tr_align;\n", "'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nmodule.exports = adler32;\n", "'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nmodule.exports = crc32;\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = require('./trees');\nconst adler32 = require('./adler32');\nconst crc32   = require('./crc32');\nconst msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,\n  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY,\n  Z_UNKNOWN,\n  Z_DEFLATED\n} = require('./constants');\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = msg[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH) ||\n                        flush === Z_NO_FLUSH ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH && flush !== Z_FINISH &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH) && flush !== Z_NO_FLUSH &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR;\n  }\n  strm.state.gzhead = head;\n  return Z_OK;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n};\n\n\n/* ========================================================================= */\nconst deflate = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n};\n\n\nmodule.exports.deflateInit = deflateInit;\nmodule.exports.deflateInit2 = deflateInit2;\nmodule.exports.deflateReset = deflateReset;\nmodule.exports.deflateResetKeep = deflateResetKeep;\nmodule.exports.deflateSetHeader = deflateSetHeader;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateEnd = deflateEnd;\nmodule.exports.deflateSetDictionary = deflateSetDictionary;\nmodule.exports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n", "'use strict';\n\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nmodule.exports.assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nmodule.exports.flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n", "// String encode/decode helpers\n'use strict';\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nmodule.exports.string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nmodule.exports.buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nmodule.exports.utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n", "'use strict';\n\n\nconst zlib_deflate = require('./zlib/deflate');\nconst utils        = require('./utils/common');\nconst strings      = require('./utils/strings');\nconst msg          = require('./zlib/messages');\nconst ZStream      = require('./zlib/zstream');\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = zlib_deflate.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = zlib_deflate.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    this.result = utils.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  const deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.constants = require('./zlib/constants');\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD = 16209;       /* got a data error -- remain here until reset */\nconst TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nmodule.exports = inflate_table;\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32       = require('./adler32');\nconst crc32         = require('./crc32');\nconst inflate_fast  = require('./inffast');\nconst inflate_table = require('./inftrees');\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH, Z_BLOCK, Z_TREES,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR,\n  Z_DEFLATED\n} = require('./constants');\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n};\n\n\nmodule.exports.inflateReset = inflateReset;\nmodule.exports.inflateReset2 = inflateReset2;\nmodule.exports.inflateResetKeep = inflateResetKeep;\nmodule.exports.inflateInit = inflateInit;\nmodule.exports.inflateInit2 = inflateInit2;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateEnd = inflateEnd;\nmodule.exports.inflateGetHeader = inflateGetHeader;\nmodule.exports.inflateSetDictionary = inflateSetDictionary;\nmodule.exports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n", "'use strict';\n\n\nconst zlib_inflate = require('./zlib/inflate');\nconst utils        = require('./utils/common');\nconst strings      = require('./utils/strings');\nconst msg          = require('./zlib/messages');\nconst ZStream      = require('./zlib/zstream');\nconst GZheader     = require('./zlib/gzheader');\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = require('./zlib/constants');\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = require('./zlib/constants');\n", "// Top level file is just a mixin of submodules & constants\n'use strict';\n\nconst { Deflate, deflate, deflateRaw, gzip } = require('./lib/deflate');\n\nconst { Inflate, inflate, inflateRaw, ungzip } = require('./lib/inflate');\n\nconst constants = require('./lib/zlib/constants');\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = ungzip;\nmodule.exports.constants = constants;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseBinary = void 0;\nvar binary_reader_1 = require(\"@picode/binary-reader\");\nvar pako_1 = require(\"pako\");\nvar MAGIC = Uint8Array.from('Kaydara FBX Binary\\x20\\x20\\x00\\x1a\\x00'.split(''), function (v) { return v.charCodeAt(0); });\n// For debug purposes:\n// const IND = '  '\n// let ind = ''\n/**\n * Returns a list of FBXNodes\n * @param binary the FBX binary file content\n */\nfunction parseBinary(binary) {\n    if (binary.length < MAGIC.length)\n        throw 'Not a binary FBX file';\n    var data = new binary_reader_1.BinaryReader(binary);\n    var magic = data.readUint8Array(MAGIC.length).every(function (v, i) { return v === MAGIC[i]; });\n    if (!magic)\n        throw 'Not a binary FBX file';\n    var fbxVersion = data.readUint32();\n    // console.log(`FBX Version: ${fbxVersion}`)\n    var header64 = fbxVersion >= 7500;\n    var fbx = [];\n    while (true) {\n        var subnode = readNode(data, header64);\n        if (subnode === null)\n            break;\n        fbx.push(subnode);\n    }\n    return fbx;\n}\nexports.parseBinary = parseBinary;\nfunction readNode(data, header64) {\n    var endOffset = header64 ? Number(data.readUint64()) : data.readUint32();\n    if (endOffset === 0)\n        return null;\n    var numProperties = header64 ? Number(data.readUint64()) : data.readUint32();\n    var propertyListLen = header64 ? Number(data.readUint64()) : data.readUint32();\n    var nameLen = data.readUint8();\n    var name = data.readArrayAsString(nameLen);\n    var node = {\n        name: name,\n        props: [],\n        nodes: [],\n    };\n    // console.log(`${ind}Node offset ${data.offset}:`, endOffset, numProperties, propertyListLen, nameLen, `\"${name}\"`)\n    // ind += IND\n    // Properties\n    for (var i = 0; i < numProperties; ++i) {\n        node.props.push(readProperty(data));\n    }\n    // Node List\n    while (endOffset - data.offset > 13) {\n        var subnode = readNode(data, header64);\n        if (subnode !== null)\n            node.nodes.push(subnode);\n    }\n    data.offset = endOffset;\n    // ind = ind.substr(0, ind.length - IND.length)\n    return node;\n}\nfunction readProperty(data) {\n    var typeCode = data.readUint8AsString();\n    var read = {\n        Y: function () { return data.readInt16(); },\n        C: function () { return data.readUint8AsBool(); },\n        I: function () { return data.readInt32(); },\n        F: function () { return data.readFloat32(); },\n        D: function () { return data.readFloat64(); },\n        L: function () { return data.readInt64(); },\n        f: function () { return readPropertyArray(data, function (r) { return r.readFloat32(); }); },\n        d: function () { return readPropertyArray(data, function (r) { return r.readFloat64(); }); },\n        l: function () { return readPropertyArray(data, function (r) { return r.readInt64(); }); },\n        i: function () { return readPropertyArray(data, function (r) { return r.readInt32(); }); },\n        b: function () { return readPropertyArray(data, function (r) { return r.readUint8AsBool(); }); },\n        S: function () { return data.readArrayAsString(data.readUint32()); },\n        R: function () { return Array.from(data.readUint8Array(data.readUint32())); },\n    };\n    if (typeof read[typeCode] === 'undefined')\n        throw \"Unknown Property Type \" + typeCode.charCodeAt(0);\n    var value = read[typeCode]();\n    // convert BigInt when ever possible\n    var convertBigInt = function (v) {\n        if (value < Number.MIN_SAFE_INTEGER || v > Number.MAX_SAFE_INTEGER)\n            return v;\n        return Number(v);\n    };\n    if (typeCode === 'L') {\n        value = convertBigInt(value);\n    }\n    else if (typeCode === 'l') {\n        for (var i = 0; i < value.length; ++i) {\n            value[i] = convertBigInt(value[i]);\n        }\n    }\n    // replace '\\x00\\x01' by '::' and flip like in the text files\n    if (typeCode === 'S' && value.indexOf('\\x00\\x01') != -1) {\n        value = value.split('\\x00\\x01').reverse().join('::');\n    }\n    return value;\n}\nfunction readPropertyArray(data, reader) {\n    var arrayLength = data.readUint32();\n    var encoding = data.readUint32();\n    var compressedLength = data.readUint32();\n    var arrayData = new binary_reader_1.BinaryReader(data.readUint8Array(compressedLength));\n    if (encoding == 1) {\n        arrayData = new binary_reader_1.BinaryReader(pako_1.inflate(arrayData.binary));\n    }\n    var value = [];\n    for (var i = 0; i < arrayLength; ++i) {\n        value.push(reader(arrayData));\n    }\n    return value;\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseText = void 0;\n/**\n * Returns a list of FBXNodes\n * @param ascii the FBX ascii file content\n */\nfunction parseText(ascii) {\n    var lines = ascii.split('\\n');\n    var rootNode = {\n        name: '',\n        props: [],\n        nodes: [],\n    };\n    var currentNode = rootNode;\n    var path = [currentNode];\n    var state = 0 /* expectingNodeOrClose */;\n    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {\n        var line = lines_1[_i];\n        line = line.trim();\n        // Empty Line\n        if (line.length === 0)\n            continue;\n        // Comment Line\n        if (line[0] === ';')\n            continue;\n        // Depending on State (expecting sub-node or node close, expecting property list continuation-if line ends with a comma)\n        if (state === 0 /* expectingNodeOrClose */) {\n            // Node Close\n            if (line[0] === '}') {\n                // Can't close when in root node\n                if (path.length === 1)\n                    throw 'FBX syntax error';\n                path.pop();\n                currentNode = path[path.length - 1];\n            }\n            else {\n                // find colon after the the node name\n                var firstCol = line.indexOf(':');\n                var nodeName = line.substring(0, firstCol);\n                nodeName = nodeName.trim();\n                // check end of line\n                var expectingSubnodes = line[line.length - 1] === '{';\n                var propertyString = line.substring(firstCol + 1, line.length - (expectingSubnodes ? 1 : 0));\n                var propertyStringList = propertyString.split(',');\n                var properties = [];\n                for (var _a = 0, propertyStringList_1 = propertyStringList; _a < propertyStringList_1.length; _a++) {\n                    var propertyString_1 = propertyStringList_1[_a];\n                    var trimmed = propertyString_1.trim();\n                    if (trimmed === '')\n                        continue;\n                    var value = convertProperty(trimmed);\n                    if (typeof value === 'undefined')\n                        continue;\n                    properties.push(value);\n                }\n                if (propertyStringList[propertyStringList.length - 1] === '')\n                    state = 1 /* expectingPropertyListContinuation */;\n                var newNode = {\n                    name: nodeName,\n                    props: properties,\n                    nodes: [],\n                };\n                currentNode.nodes.push(newNode);\n                if (expectingSubnodes || state === 1 /* expectingPropertyListContinuation */) {\n                    path.push(newNode);\n                    currentNode = newNode;\n                }\n            }\n        }\n        else if (state === 1 /* expectingPropertyListContinuation */) {\n            // check end of line\n            var expectingSubnodes = line[line.length - 1] === '{';\n            var propertyString = line.substring(0, line.length - (expectingSubnodes ? 1 : 0));\n            var propertyStringList = propertyString.split(',');\n            var properties = [];\n            for (var _b = 0, propertyStringList_2 = propertyStringList; _b < propertyStringList_2.length; _b++) {\n                var propertyString_2 = propertyStringList_2[_b];\n                var trimmed = propertyString_2.trim();\n                if (trimmed === '' || trimmed === '}')\n                    continue;\n                var value = convertProperty(trimmed);\n                if (typeof value === 'undefined')\n                    continue;\n                properties.push(value);\n            }\n            currentNode.props = currentNode.props.concat(properties);\n            if (propertyStringList[propertyStringList.length - 1] !== '')\n                state = 0 /* expectingNodeOrClose */;\n            if (!expectingSubnodes && state === 0 /* expectingNodeOrClose */) {\n                path.pop();\n                currentNode = path[path.length - 1];\n            }\n        }\n    }\n    // nodes with name a seem to actually just be an array prop and handled like a prop in binary\n    function correctArrays(node) {\n        if (node.nodes.length === 1 && node.props.length === 0 && node.nodes[0].name === 'a') {\n            node.props = [node.nodes[0].props];\n            node.nodes = [];\n        }\n        else {\n            for (var _i = 0, _a = node.nodes; _i < _a.length; _i++) {\n                var childNode = _a[_i];\n                correctArrays(childNode);\n            }\n        }\n    }\n    correctArrays(rootNode);\n    return rootNode.nodes;\n}\nexports.parseText = parseText;\n/**\n * Auto detects and converts the property type\n * @param prop\n */\nfunction convertProperty(prop) {\n    if (prop[0] == '*')\n        return undefined; // e.g. array size\n    if (prop[0] == '\"')\n        return prop.substr(1, prop.length - 2);\n    if (prop == 'T')\n        return true;\n    if (prop == 'F')\n        return false;\n    if (prop == 'Y')\n        return true;\n    if (prop == 'N')\n        return false;\n    if (prop.indexOf('.') != -1)\n        return parseFloat(prop);\n    var n = BigInt(prop);\n    if (n < Number.MIN_SAFE_INTEGER || n > Number.MAX_SAFE_INTEGER)\n        return n;\n    return Number(n);\n}\n", "\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FBXReader = exports.FBXReaderNode = void 0;\nvar FBXReaderNode = /** @class */ (function () {\n    function FBXReaderNode(fbxNode) {\n        this.fbxNode = fbxNode;\n    }\n    FBXReaderNode.prototype.nodeFilter = function (a, b) {\n        var name = undefined;\n        var propFilter = undefined;\n        if (typeof a === 'string') {\n            name = a;\n            if (typeof b !== 'undefined')\n                propFilter = b;\n        }\n        else\n            propFilter = a;\n        var filter;\n        if (typeof propFilter !== 'undefined') {\n            var propFilterFunc_1 = function (node) {\n                for (var prop in propFilter) {\n                    var index = parseInt(prop);\n                    if (node.props[index] !== propFilter[index])\n                        return false;\n                }\n                return true;\n            };\n            if (typeof name !== 'undefined') {\n                filter = function (node) { return node.name === name && propFilterFunc_1(node); };\n            }\n            else {\n                filter = propFilterFunc_1;\n            }\n        }\n        else {\n            filter = function (node) { return node.name === name; };\n        }\n        return filter;\n    };\n    FBXReaderNode.prototype.node = function (a, b) {\n        var node = this.fbxNode.nodes.find(this.nodeFilter(a, b));\n        if (typeof node === 'undefined')\n            return;\n        return new FBXReaderNode(node);\n    };\n    FBXReaderNode.prototype.nodes = function (a, b) {\n        var nodes = this.fbxNode.nodes.filter(this.nodeFilter(a, b)).map(function (node) { return new FBXReaderNode(node); });\n        return nodes;\n    };\n    FBXReaderNode.prototype.prop = function (index, type) {\n        var prop = this.fbxNode.props[index];\n        if (typeof type === 'undefined')\n            return prop;\n        if (type === 'boolean')\n            return typeof prop === 'boolean' ? prop : undefined;\n        if (type === 'number')\n            return typeof prop === 'number' ? prop : undefined;\n        if (type === 'bigint')\n            return typeof prop === 'bigint' ? prop : undefined;\n        if (type === 'string')\n            return typeof prop === 'string' ? prop : undefined;\n        // array types\n        if (!Array.isArray(prop))\n            return undefined;\n        if (prop.length == 0)\n            return prop;\n        if (type === 'boolean[]')\n            return typeof prop[0] === 'boolean' ? prop : undefined;\n        if (type === 'number[]')\n            return typeof prop[0] === 'number' ? prop : undefined;\n        if (type === 'bigint[]')\n            return typeof prop[0] === 'bigint' ? prop : undefined;\n    };\n    return FBXReaderNode;\n}());\nexports.FBXReaderNode = FBXReaderNode;\nvar FBXReader = /** @class */ (function (_super) {\n    __extends(FBXReader, _super);\n    function FBXReader(fbx) {\n        var _this = this;\n        var rootNode = {\n            name: '',\n            props: [],\n            nodes: fbx,\n        };\n        _this = _super.call(this, rootNode) || this;\n        _this.fbx = fbx;\n        return _this;\n    }\n    return FBXReader;\n}(FBXReaderNode));\nexports.FBXReader = FBXReader;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FBXReaderNode = exports.FBXReader = exports.parseText = exports.parseBinary = void 0;\nvar binary_1 = require(\"./binary\");\nObject.defineProperty(exports, \"parseBinary\", { enumerable: true, get: function () { return binary_1.parseBinary; } });\nvar ascii_1 = require(\"./ascii\");\nObject.defineProperty(exports, \"parseText\", { enumerable: true, get: function () { return ascii_1.parseText; } });\nvar FBXReader_1 = require(\"./FBXReader\");\nObject.defineProperty(exports, \"FBXReader\", { enumerable: true, get: function () { return FBXReader_1.FBXReader; } });\nObject.defineProperty(exports, \"FBXReaderNode\", { enumerable: true, get: function () { return FBXReader_1.FBXReaderNode; } });\n", "export function v2(n: [number, number?] | number, y?: number) {\r\n\tif (typeof n === 'number') {\r\n\t\treturn Vector2.f(n, y);\r\n\t} else if (typeof n === 'undefined') {\r\n\t\treturn Vector2.f(0);\r\n\t} else {\r\n\t\treturn Vector2.f(...n);\r\n\t}\r\n}\r\n\r\nexport class Vector2 {\r\n\tx: number;\r\n\ty: number;\r\n\tstatic Vector2: {};\r\n\tconstructor(x: number, y: number) {\r\n\t\tthis.x = (x === undefined) ? 0 : x;\r\n\t\tthis.y = (y === undefined) ? 0 : y;\r\n\t}\r\n\r\n\tstatic f(x: number = 0, y: number = x) {\r\n\t\treturn new Vector2(x, y);\r\n\t}\r\n\r\n\tisZero(): boolean {\r\n\t\treturn (this.x === 0 && this.y === 0)\r\n\t}\r\n\r\n\tclone(): Vector2 {\r\n\t\treturn new Vector2(this.x, this.y);\r\n\t}\r\n\r\n\tadd(vector: Vector2) {\r\n\t\treturn new Vector2(this.x + vector.x, this.y + vector.y);\r\n\t}\r\n\r\n\tmultiply(vector: Vector2) {\r\n\t\treturn new Vector2(this.x * vector.x, this.y * vector.y);\r\n\t}\r\n\r\n\tsubtract(vector: Vector2) {\r\n\t\treturn new Vector2(this.x - vector.x, this.y - vector.y);\r\n\t}\r\n\r\n\tscale(scalar: number) {\r\n\t\treturn new Vector2(this.x * scalar, this.y * scalar);\r\n\t}\r\n\r\n\tdot(vector: Vector2) {\r\n\t\treturn (this.x * vector.x + this.y + vector.y);\r\n\t}\r\n\r\n\tmoveTowards(vector: Vector2, t: number) {\r\n\t\tt = Math.min(t, 1); // still allow negative t\r\n\t\tvar diff = vector.subtract(this);\r\n\t\treturn this.add(diff.scale(t));\r\n\t}\r\n\r\n\tmagnitude() {\r\n\t\treturn Math.sqrt(this.magnitudeSqr());\r\n\t}\r\n\r\n\tmagnitudeSqr() {\r\n\t\treturn (this.x * this.x + this.y * this.y);\r\n\t}\r\n\r\n\tclampMagnitude( max:number = 1 ) {\r\n\t\tif (this.magnitude() === 0) return v2(0);\r\n\t\treturn this.scale( 1/ this.magnitude() || 1 ).scale( Math.min( max, this.magnitude() ) );\r\n\t}\r\n\r\n\tdistance(vector: Vector2) {\r\n\t\treturn Math.sqrt(this.distanceSqr(vector));\r\n\t}\r\n\r\n\tdistanceSqr(vector: Vector2) {\r\n\t\tvar deltaX = this.x - vector.x;\r\n\t\tvar deltaY = this.y - vector.y;\r\n\t\treturn (deltaX * deltaX + deltaY * deltaY);\r\n\t}\r\n\r\n\tnormalize() {\r\n\t\tvar mag = this.magnitude();\r\n\t\tvar vector = this.clone();\r\n\t\tif (Math.abs(mag) < 1e-9) {\r\n\t\t\tvector.x = 0;\r\n\t\t\tvector.y = 0;\r\n\t\t} else {\r\n\t\t\tvector.x /= mag;\r\n\t\t\tvector.y /= mag;\r\n\t\t}\r\n\t\treturn vector;\r\n\t}\r\n\r\n\tangleDegrees() {\r\n\t\treturn this.angle() * (180/Math.PI);\r\n\t}\r\n\r\n\tangle() {\r\n\t\treturn Math.atan2(this.y, this.x);\r\n\t}\r\n\r\n\r\n\trotate(rad: number) {\r\n\t\tvar cos = Math.cos(rad);\r\n\t\tvar sin = Math.sin(rad);\r\n\t\treturn new Vector2(\r\n\t\t\tthis.x * cos - this.y * sin,\r\n\t\t\tthis.x * sin + this.y * cos\r\n\t\t);\r\n\t}\r\n\r\n\ttoPrecision(precision: number) {\r\n\t\tvar vector = this.clone();\r\n\t\tvector.x = +vector.x.toFixed(precision);\r\n\t\tvector.y = +vector.y.toFixed(precision);\r\n\t\treturn vector;\r\n\t}\r\n\r\n\ttoString() {\r\n\t\tvar vector = this.toPrecision(1);\r\n\t\treturn (\"[\" + vector.x + \"; \" + vector.y + \"]\");\r\n\t}\r\n\r\n\tpublic clamp(min:Vector2, max:Vector2) {\r\n\t\treturn Vector2.clamp(this, min, max);\r\n    }\r\n\r\n\tpublic static min(a:Vector2, b:Vector2) {\r\n        return new Vector2(\r\n\t\t\tMath.min(a.x, b.x),\r\n\t\t\tMath.min(a.y, b.y),\r\n\t\t)\r\n    }\r\n\r\n\tpublic static max(a:Vector2, b:Vector2) {\r\n\t\treturn new Vector2(\r\n\t\t\tMath.max(a.x, b.x),\r\n\t\t\tMath.max(a.y, b.y),\r\n\t\t)\r\n    }\r\n\r\n\tpublic static clamp(value:Vector2, min:Vector2, max:Vector2) {\r\n        return Vector2.max(Vector2.min(value, min), max);\r\n    }\r\n\r\n\tpublic clampMagnitute(mag: number) {\r\n\t\treturn Vector2.clampMagnitute(this, mag);\r\n    }\r\n\r\n\tget array() {\r\n\t\treturn [this.x, this.y];\r\n\t}\r\n\r\n\tset array(a: [number, number]) {\r\n\t\t[this.x, this.y] = a;\r\n\t}\r\n\r\n\tget surfaceArea():number {\r\n\t\treturn this.x*this.y\r\n\t}\r\n\r\n\r\n\tpublic static clampMagnitute(value:Vector2, mag: number) {\r\n\t\tvar ratio = value.magnitude() / mag;\r\n\t\treturn new Vector2(value.x / ratio, value.y / ratio);\r\n    }\r\n\r\n\tstatic get zero() {\r\n\t\treturn new Vector2(0, 0);\r\n\t}\r\n\tstatic get down() {\r\n\t\treturn new Vector2(0, -1);\r\n\t}\r\n\tstatic get up() {\r\n\t\treturn new Vector2(0, 1);\r\n\t}\r\n\tstatic get right() {\r\n\t\treturn new Vector2(1, 0);\r\n\t}\r\n\tstatic get left() {\r\n\t\treturn new Vector2(-1, 0);\r\n\t}\r\n\tstatic get fromDegree() {\r\n\t\treturn new Vector2(0, 0);\r\n\t}\r\n}\r\n", "import { glob } from '../../game';\r\nimport { TickerReturnData } from '../ticker';\r\nimport { Events } from \"../util/event\";\r\n\r\nexport type ElementAttributes = {\r\n\r\n};\r\n\r\nexport abstract class Element {\r\n    public abstract rendererType: 'dom' | 'gl';\r\n\r\n    private events: Events<unknown>[] = [];\r\n\r\n    get t(): TickerReturnData {\r\n        return glob.game.t;\r\n    }\r\n\r\n    public parent!: Element;\r\n\r\n    public build(): void {\r\n        //\r\n    }\r\n\r\n    addEvent(e: Events<unknown>) {\r\n        this.events.push(e);\r\n    }\r\n\r\n    getEvent(id: string) {\r\n        return this.events.find((e) => id === e.id);\r\n    }\r\n}\r\n", "import { Element, ElementAttributes } from '../elements/element';\r\nimport { Vector2, v2 } from '../util/math/vector2';\r\nimport { TickerReturnData } from '../ticker';\r\n\r\n\r\nexport type DomElementAttributes = ElementAttributes & {\r\n    id?: string,\r\n    background?: string,\r\n    position?: Vector2;\r\n    size?: Vector2;\r\n};\r\nexport class DomElement<T extends keyof HTMLElementTagNameMap> extends Element {\r\n    public dom: HTMLElementTagNameMap[T];\r\n    public children: DomElement<any>[] = [];\r\n    public rendererType = 'dom' as const;\r\n    private _position: Vector2 = v2(0);\r\n    public get position(): Vector2 {\r\n        return this._position;\r\n    }\r\n    public set position(value: Vector2) {\r\n        this._position = value;\r\n        this.x = value.x;\r\n        this.y = value.y\r\n    }\r\n    public size: Vector2 = v2(0);\r\n\r\n    public get id() { return this.dom.id; }\r\n\r\n    public set id(value: string) {\r\n        if (value) {\r\n            this.dom.id = value;\r\n        }\r\n    }\r\n\r\n    public get x(): number {\r\n        return Math.round(Number(this.dom.style.left.replace(/\\D/g,'')));\r\n    }\r\n    public set x(n: number) {\r\n        if (this.dom){\r\n            this.dom.style.left = `${n}px`;\r\n        }\r\n    }\r\n    public get y(): number {\r\n        return Math.round(Number(this.dom.style.bottom.replace(/\\D/g,'')));\r\n    }\r\n    public set y(n: number) {\r\n        if (this.dom){\r\n            this.dom.style.bottom = `${n}px`;\r\n        }\r\n    }\r\n\r\n    public set visible(value: boolean) {\r\n        this.dom? this.dom.style.display = value ? 'block' : 'none': null\r\n    }\r\n\r\n    public set background(v: string) {\r\n        this.dom.style.background = v;\r\n    }\r\n\r\n    public get width() {\r\n        return Math.round(Number(this.dom.style.width.replace(/\\D/g,'')));\r\n    }\r\n    public set width(value: number) {\r\n        if (this.dom) {\r\n            this.dom.style.width = `${value}px`;\r\n            this.dom.setAttribute('width', String(value));\r\n        }\r\n    }\r\n\r\n    public get height() {\r\n        return Math.round(Number(this.dom.style.height.replace(/\\D/g,'')));\r\n    }\r\n    public set height(value: number) {\r\n        if (this.dom) {\r\n            this.dom.style.height = `${value}px`;\r\n            this.dom.setAttribute('height', String(value));\r\n        }\r\n    }\r\n\r\n    constructor(type: T, attr: DomElementAttributes = {}) {\r\n        super();\r\n        this.dom = document.createElement(type);\r\n        this.dom.style.position = 'absolute';\r\n        this.dom.style.transformOrigin = 'bottom left';\r\n        this.dom.style.pointerEvents = 'none';\r\n        this.dom.style.bottom = '0px';\t\r\n        this.id = attr.id || '';\r\n        this.background = attr.background || '';\r\n        this.size = attr.size || Vector2.zero;\r\n        this.position = attr.position || Vector2.zero;\r\n        \r\n    }\r\n\r\n    public ready() {\r\n        this.build();\r\n    }\r\n\r\n    public tick(obj: TickerReturnData): void {\r\n        this.children.forEach((c)=>{\r\n            c.tick(obj);\r\n        })\r\n    }\r\n\r\n    public appendChild(e: DomElement<any>) {\r\n        this.dom.appendChild(e.dom);\r\n    }\r\n\r\n    public addChild(child: DomElement<any>) {\r\n        this.children.push(child);\r\n        this.dom.appendChild(child.dom);\r\n    }\r\n\r\n    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        this.dom.addEventListener(type, listener, options);\r\n    };\r\n    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void {\r\n        this.dom.removeEventListener(type, listener, options);\r\n    };\r\n\r\n\r\n\r\n}\r\n", "export type eventFunction<T> = (v: T) => void;\r\nexport class Events<T> {\r\n    public id: string;\r\n    private subscribers: Record<string, eventFunction<T>> = {};\r\n    constructor(id: string) {\r\n        this.id = id;\r\n    }\r\n\r\n    public subscribe(key: string, func: eventFunction<T>) {\r\n        this.subscribers[key] = func;\r\n    }\r\n\r\n    public alert(v: T) {\r\n        Object.values(this.subscribers).forEach((s) => {\r\n            s(v);\r\n        });\r\n    }\r\n}\r\n", "export class Buffer {\r\n    private gl: WebGL2RenderingContext;\r\n    private buffer: WebGLBuffer;\r\n    private type: number;\r\n    private usage: number;\r\n\r\n    constructor(\r\n        gl: WebGL2RenderingContext,\r\n        type: number = gl.ARRAY_BUFFER,\r\n        usage: number = gl.STATIC_DRAW\r\n    ) {\r\n        this.gl = gl;\r\n        this.type = type;\r\n        this.usage = usage;\r\n\r\n        const buffer = gl.createBuffer();\r\n        if (!buffer) {\r\n            throw new Error('Failed to create buffer');\r\n        }\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    public bind(): void {\r\n        this.gl.bindBuffer(this.type, this.buffer);\r\n    }\r\n\r\n    public unbind(): void {\r\n        this.gl.bindBuffer(this.type, null);\r\n    }\r\n\r\n    public setData(data: BufferSource): void {\r\n        this.bind();\r\n        this.gl.bufferData(this.type, data, this.usage);\r\n    }\r\n\r\n    public updateData(data: BufferSource, offset: number = 0): void {\r\n        this.bind();\r\n        this.gl.bufferSubData(this.type, offset, data);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.gl.deleteBuffer(this.buffer);\r\n    }\r\n}\r\n\r\nexport class VertexArray {\r\n    private gl: WebGL2RenderingContext;\r\n    private vao: WebGLVertexArrayObject;\r\n\r\n    constructor(gl: WebGL2RenderingContext) {\r\n        this.gl = gl;\r\n        const vao = gl.createVertexArray();\r\n        if (!vao) {\r\n            throw new Error('Failed to create vertex array object');\r\n        }\r\n        this.vao = vao;\r\n    }\r\n\r\n    public bind(): void {\r\n        this.gl.bindVertexArray(this.vao);\r\n    }\r\n\r\n    public unbind(): void {\r\n        this.gl.bindVertexArray(null);\r\n    }\r\n\r\n    public setAttributePointer(\r\n        location: number,\r\n        size: number,\r\n        type: number,\r\n        normalized: boolean = false,\r\n        stride: number = 0,\r\n        offset: number = 0\r\n    ): void {\r\n        this.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\r\n        this.gl.enableVertexAttribArray(location);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.gl.deleteVertexArray(this.vao);\r\n    }\r\n}\r\n\r\nexport class VertexBuffer extends Buffer {\r\n    constructor(gl: WebGL2RenderingContext, usage: number = gl.STATIC_DRAW) {\r\n        super(gl, gl.ARRAY_BUFFER, usage);\r\n    }\r\n}\r\n\r\nexport class IndexBuffer extends Buffer {\r\n    private count: number = 0;\r\n\r\n    constructor(gl: WebGL2RenderingContext, usage: number = gl.STATIC_DRAW) {\r\n        super(gl, gl.ELEMENT_ARRAY_BUFFER, usage);\r\n    }\r\n\r\n    public setData(data: BufferSource): void {\r\n        super.setData(data);\r\n        this.count = data.byteLength / 2; // Using 16-bit (2 byte) indices\r\n    }\r\n\r\n    public getCount(): number {\r\n        return this.count;\r\n    }\r\n} ", "export interface ShaderUniformData {\r\n    type: string;\r\n    value: number | number[] | Float32Array | Int32Array;\r\n    location?: WebGLUniformLocation;\r\n    isArray?: boolean;\r\n    arraySize?: number;\r\n}\r\n\r\nexport interface ShaderAttributeData {\r\n    type: string;\r\n    size: number;\r\n    location: number;\r\n}\r\n\r\nexport class ShaderManager {\r\n    private gl: WebGL2RenderingContext;\r\n    private shaderPrograms: Map<string, WebGLProgram>;\r\n    private uniforms: Map<string, Map<string, ShaderUniformData>>;\r\n    private attributes: Map<string, Map<string, ShaderAttributeData>>;\r\n    private currentProgram: string | null = null;\r\n\r\n    constructor(gl: WebGL2RenderingContext) {\r\n        this.gl = gl;\r\n        this.shaderPrograms = new Map();\r\n        this.uniforms = new Map();\r\n        this.attributes = new Map();\r\n    }\r\n\r\n    public loadShaderProgram(\r\n        name: string,\r\n        vertexSource: string,   \r\n        fragmentSource: string\r\n    ) {\r\n        try {\r\n            const vertexShader = this.compileShader(vertexSource, this.gl.VERTEX_SHADER);\r\n            const fragmentShader = this.compileShader(fragmentSource, this.gl.FRAGMENT_SHADER);\r\n            \r\n            const program = this.createProgram(vertexShader, fragmentShader);\r\n            this.shaderPrograms.set(name, program);\r\n            \r\n            // Initialize uniform and attribute maps for this program\r\n            this.uniforms.set(name, new Map());\r\n            this.attributes.set(name, new Map());\r\n            \r\n            // Clean up individual shaders\r\n            this.gl.deleteShader(vertexShader);\r\n            this.gl.deleteShader(fragmentShader);\r\n            \r\n            // Parse uniforms and attributes\r\n            this.introspectShaderProgram(name);\r\n        } catch (error) {\r\n            console.error(`Failed to load shader program '${name}':`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private compileShader(source: string, type: number): WebGLShader {\r\n        const shader = this.gl.createShader(type);\r\n        if (!shader) {\r\n            throw new Error('Failed to create shader');\r\n        }\r\n\r\n        this.gl.shaderSource(shader, source);\r\n        this.gl.compileShader(shader);\r\n\r\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n            const info = this.gl.getShaderInfoLog(shader);\r\n            this.gl.deleteShader(shader);\r\n            throw new Error(`Shader compilation error: ${info}`);\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    private createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\r\n        const program = this.gl.createProgram();\r\n        if (!program) {\r\n            throw new Error('Failed to create shader program');\r\n        }\r\n\r\n        this.gl.attachShader(program, vertexShader);\r\n        this.gl.attachShader(program, fragmentShader);\r\n        this.gl.linkProgram(program);\r\n\r\n        if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\r\n            const info = this.gl.getProgramInfoLog(program);\r\n            this.gl.deleteProgram(program);\r\n            throw new Error(`Shader program linking error: ${info}`);\r\n        }\r\n\r\n        return program;\r\n    }\r\n\r\n    private introspectShaderProgram(name: string): void {\r\n        const program = this.shaderPrograms.get(name);\r\n        if (!program) {\r\n            throw new Error(`Shader program '${name}' not found`);\r\n        }\r\n\r\n        // Get active uniforms\r\n        const numUniforms = this.gl.getProgramParameter(program, this.gl.ACTIVE_UNIFORMS);\r\n        \r\n        const uniformMap = this.uniforms.get(name)!;\r\n\r\n        for (let i = 0; i < numUniforms; i++) {\r\n            const info = this.gl.getActiveUniform(program, i);\r\n            if (!info) continue;\r\n\r\n            const location = this.gl.getUniformLocation(program, info.name);\r\n            if (!location) {\r\n                console.warn(`Could not get location for uniform '${info.name}' in shader '${name}'`);\r\n                continue;\r\n            }\r\n\r\n            // For array uniforms, store with the base name (without array index)\r\n            const baseName = info.name.replace(/\\[\\d+\\].*$/, '');\r\n            const typeName = this.getUniformTypeName(info.type);\r\n            \r\n            \r\n            uniformMap.set(baseName, {\r\n                type: typeName,\r\n                value: this.getDefaultValueForType(info.type),\r\n                location,\r\n                isArray: info.size > 1,\r\n                arraySize: info.size\r\n            });\r\n        }\r\n\r\n        // Get active attributes\r\n        const numAttributes = this.gl.getProgramParameter(program, this.gl.ACTIVE_ATTRIBUTES);\r\n        const attributeMap = this.attributes.get(name)!;\r\n\r\n        for (let i = 0; i < numAttributes; i++) {\r\n            const info = this.gl.getActiveAttrib(program, i);\r\n            if (!info) continue;\r\n\r\n            const location = this.gl.getAttribLocation(program, info.name);\r\n            if (location === -1) continue;\r\n\r\n            attributeMap.set(info.name, {\r\n                type: this.getAttributeTypeName(info.type),\r\n                size: this.getAttributeSize(info.type),\r\n                location\r\n            });\r\n        }\r\n    }\r\n\r\n    public useProgram(name: string): void {\r\n        const program = this.shaderPrograms.get(name);\r\n        if (!program) {\r\n            throw new Error(`Shader program '${name}' not found`);\r\n        }\r\n        this.gl.useProgram(program);\r\n        this.currentProgram = name;\r\n    }\r\n\r\n    public setUniform(name: string, value: number | number[] | Float32Array | Int32Array): void {\r\n        if (!this.currentProgram) {\r\n            console.error('No shader program is currently in use');\r\n            return;\r\n        }\r\n\r\n        const uniformMap = this.uniforms.get(this.currentProgram);\r\n        if (!uniformMap) {\r\n            console.error(`Uniform map not found for program '${this.currentProgram}'`);\r\n            return;\r\n        }\r\n\r\n        const uniform = uniformMap.get(name);\r\n        if (!uniform || !uniform.location) {\r\n            console.error(`Uniform '${name}' not found in program '${this.currentProgram}'. Available uniforms:`, \r\n                Array.from(uniformMap.keys()).join(', '));\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this.setUniformValue(uniform.type, uniform.location, value);\r\n            uniform.value = value;\r\n        } catch (error) {\r\n            console.error(`Error setting uniform '${name}' in program '${this.currentProgram}':`, error);\r\n        }\r\n    }\r\n\r\n    private setUniformValue(\r\n        type: string,\r\n        location: WebGLUniformLocation,\r\n        value: number | number[] | Float32Array | Int32Array\r\n    ): void {\r\n        switch (type) {\r\n            case 'float':\r\n                if (Array.isArray(value) || value instanceof Float32Array) {\r\n                    this.gl.uniform1fv(location, value);\r\n                } else {\r\n                    this.gl.uniform1f(location, value as number);\r\n                }\r\n                break;\r\n            case 'vec2':\r\n                this.gl.uniform2fv(location, value as Float32Array);\r\n                break;\r\n            case 'vec3':\r\n                this.gl.uniform3fv(location, value as Float32Array);\r\n                break;\r\n            case 'vec4':\r\n                this.gl.uniform4fv(location, value as Float32Array);\r\n                break;\r\n            case 'mat4':\r\n                this.gl.uniformMatrix4fv(location, false, value as Float32Array);\r\n                break;\r\n            case 'mat4[]':\r\n                // Handle array of mat4\r\n                this.gl.uniformMatrix4fv(location, false, value as Float32Array);\r\n                break;\r\n            case 'mat3':\r\n                this.gl.uniformMatrix3fv(location, false, value as Float32Array);\r\n                break;\r\n            case 'int':\r\n                if (Array.isArray(value) || value instanceof Int32Array) {\r\n                    this.gl.uniform1iv(location, value);\r\n                } else {\r\n                    this.gl.uniform1i(location, value as number);\r\n                }\r\n                break;\r\n            case 'bool':\r\n                if (Array.isArray(value)) {\r\n                    // Convert boolean array to int array (true=1, false=0)\r\n                    const intArray = new Int32Array((value as (boolean | number)[]).map(v => v ? 1 : 0));\r\n                    this.gl.uniform1iv(location, intArray);\r\n                } else if (value instanceof Int32Array) {\r\n                    this.gl.uniform1iv(location, value);\r\n                } else {\r\n                    this.gl.uniform1i(location, value ? 1 : 0);\r\n                }\r\n                break;\r\n            case 'sampler2D':\r\n            case 'sampler2D[]':\r\n            case 'samplerCube':\r\n                if (Array.isArray(value) || value instanceof Int32Array) {\r\n                    this.gl.uniform1iv(location, value);\r\n                } else {\r\n                    this.gl.uniform1i(location, value as number);\r\n                }\r\n                break;\r\n            case 'Light':\r\n                // Handle Light struct array\r\n                const data = value as Float32Array;\r\n                this.gl.uniform1fv(location, data);\r\n                break;\r\n            default:\r\n                console.warn(`Unsupported uniform type: ${type}`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public getAttributeLocation(name: string): number {\r\n        if (!this.currentProgram) {\r\n            throw new Error('No shader program is currently in use');\r\n        }\r\n\r\n        const attributeMap = this.attributes.get(this.currentProgram);\r\n        if (!attributeMap) {\r\n            throw new Error(`Attribute map not found for program '${this.currentProgram}'`);\r\n        }\r\n\r\n        const attribute = attributeMap.get(name);\r\n        if (!attribute) {\r\n            throw new Error(`Attribute '${name}' not found in program '${this.currentProgram}'. Make sure to use the a_camelCase naming convention.`);\r\n        }\r\n\r\n        return attribute.location;\r\n    }\r\n\r\n    private getUniformTypeName(type: number): string {\r\n        switch (type) {\r\n            case this.gl.FLOAT: return 'float';\r\n            case this.gl.FLOAT_VEC2: return 'vec2';\r\n            case this.gl.FLOAT_VEC3: return 'vec3';\r\n            case this.gl.FLOAT_VEC4: return 'vec4';\r\n            case this.gl.FLOAT_MAT4: \r\n                return 'mat4';\r\n            case this.gl.FLOAT_MAT4 | 0x20: // Array flag\r\n                return 'mat4[]';\r\n            case this.gl.FLOAT_MAT3: return 'mat3';\r\n            case this.gl.INT: return 'int';\r\n            case this.gl.BOOL: return 'bool';\r\n            case this.gl.SAMPLER_2D: \r\n                return 'sampler2D';\r\n            case this.gl.SAMPLER_2D | 0x20: // Array flag\r\n                return 'sampler2D[]';\r\n            case this.gl.SAMPLER_CUBE:\r\n                return 'samplerCube';\r\n            case 0x8B52: // GL_STRUCT\r\n                return 'Light'; // Handle Light struct type\r\n            default:\r\n                console.warn(`Unknown uniform type: ${type}`);\r\n                return 'unknown';\r\n        }\r\n    }\r\n\r\n    private getAttributeTypeName(type: number): string {\r\n        switch (type) {\r\n            case this.gl.FLOAT: return 'float';\r\n            case this.gl.FLOAT_VEC2: return 'vec2';\r\n            case this.gl.FLOAT_VEC3: return 'vec3';\r\n            case this.gl.FLOAT_VEC4: return 'vec4';\r\n            default: return 'unknown';\r\n        }\r\n    }\r\n\r\n    private getAttributeSize(type: number): number {\r\n        switch (type) {\r\n            case this.gl.FLOAT: return 1;\r\n            case this.gl.FLOAT_VEC2: return 2;\r\n            case this.gl.FLOAT_VEC3: return 3;\r\n            case this.gl.FLOAT_VEC4: return 4;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    private getDefaultValueForType(type: number): number | Float32Array {\r\n        switch (type) {\r\n            case this.gl.FLOAT:\r\n            case this.gl.INT:\r\n            case this.gl.BOOL:\r\n            case this.gl.SAMPLER_2D:\r\n                return 0;\r\n            case this.gl.FLOAT_VEC2:\r\n                return new Float32Array(2);\r\n            case this.gl.FLOAT_VEC3:\r\n                return new Float32Array(3);\r\n            case this.gl.FLOAT_VEC4:\r\n                return new Float32Array(4);\r\n            case this.gl.FLOAT_MAT4:\r\n                return new Float32Array(16);\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    public hasUniform(name: string): boolean {\r\n        if (!this.currentProgram) {\r\n            return false;\r\n        }\r\n\r\n        const uniformMap = this.uniforms.get(this.currentProgram);\r\n        if (!uniformMap) {\r\n            return false;\r\n        }\r\n\r\n        return uniformMap.has(name);\r\n    }\r\n\r\n    public dispose(): void {\r\n        // Delete all shader programs\r\n        for (const [name, program] of this.shaderPrograms) {\r\n            this.gl.deleteProgram(program);\r\n        }\r\n        this.shaderPrograms.clear();\r\n        this.uniforms.clear();\r\n        this.attributes.clear();\r\n        this.currentProgram = null;\r\n    }\r\n} ", "export const fragmentShaderSource = `#version 300 es\r\nprecision highp float;\r\n\r\n// Maximum number of lights\r\n#define MAX_LIGHTS 10\r\n\r\n// Light types\r\n#define LIGHT_TYPE_INACTIVE -1\r\n#define LIGHT_TYPE_AMBIENT 0\r\n#define LIGHT_TYPE_DIRECTIONAL 1\r\n#define LIGHT_TYPE_POINT 2\r\n#define LIGHT_TYPE_SPOT 3\r\n\r\n// Input from vertex shader\r\nin vec3 v_normal;\r\nin vec2 v_texCoord;\r\nin vec3 v_fragPos;\r\nin vec3 v_color;\r\nin vec4 v_fragPosLightSpace;\r\n\r\n// Material structure\r\nstruct Material {\r\n    vec3 ambient;\r\n    vec3 diffuse;\r\n    vec3 specular;\r\n    float shininess;\r\n    sampler2D diffuseMap;\r\n};\r\n\r\n// Light uniforms\r\nuniform int u_lightTypes[MAX_LIGHTS];\r\nuniform vec3 u_lightPositions[MAX_LIGHTS];\r\nuniform vec3 u_lightDirections[MAX_LIGHTS];\r\nuniform vec3 u_lightColors[MAX_LIGHTS];\r\nuniform float u_lightIntensities[MAX_LIGHTS];\r\nuniform float u_lightConstants[MAX_LIGHTS];\r\nuniform float u_lightLinears[MAX_LIGHTS];\r\nuniform float u_lightQuadratics[MAX_LIGHTS];\r\nuniform float u_lightCutOffs[MAX_LIGHTS];\r\nuniform float u_lightOuterCutOffs[MAX_LIGHTS];\r\nuniform int u_numLights;\r\n\r\n// Material uniforms\r\nuniform Material u_material;\r\nuniform bool u_useTexture;\r\n\r\n// Shadow mapping uniforms\r\nuniform sampler2D u_shadowMap0;\r\nuniform sampler2D u_shadowMap1;\r\nuniform sampler2D u_shadowMap2;\r\nuniform sampler2D u_shadowMap3;\r\nuniform sampler2D u_shadowMap4;\r\nuniform sampler2D u_shadowMap5;\r\nuniform sampler2D u_shadowMap6;\r\nuniform sampler2D u_shadowMap7;\r\nuniform sampler2D u_shadowMap8;\r\nuniform sampler2D u_shadowMap9;\r\nuniform mat4 u_lightSpaceMatrices[MAX_LIGHTS];\r\nuniform bool u_castsShadow[MAX_LIGHTS];\r\n\r\n// Other uniforms\r\nuniform vec3 u_viewPos;\r\n\r\n// Output\r\nout vec4 fragColor;\r\n\r\nfloat getShadowMap(int index, vec2 coords) {\r\n    // We have to use a switch statement because WebGL2 requires constant array indices for samplers\r\n    switch(index) {\r\n        case 0: return texture(u_shadowMap0, coords).r;\r\n        case 1: return texture(u_shadowMap1, coords).r;\r\n        case 2: return texture(u_shadowMap2, coords).r;\r\n        case 3: return texture(u_shadowMap3, coords).r;\r\n        case 4: return texture(u_shadowMap4, coords).r;\r\n        case 5: return texture(u_shadowMap5, coords).r;\r\n        case 6: return texture(u_shadowMap6, coords).r;\r\n        case 7: return texture(u_shadowMap7, coords).r;\r\n        case 8: return texture(u_shadowMap8, coords).r;\r\n        case 9: return texture(u_shadowMap9, coords).r;\r\n        default: return 1.0; // No shadow if invalid index\r\n    }\r\n}\r\n\r\nfloat ShadowCalculation(vec4 fragPosLightSpace, vec3 normal, vec3 lightDir, int shadowMapIndex) {\r\n    // Perform perspective divide\r\n    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;\r\n    \r\n    // Transform to [0,1] range\r\n    projCoords = projCoords * 0.5 + 0.5;\r\n    \r\n    // Get closest depth value from light's perspective using the helper function\r\n    float closestDepth = getShadowMap(shadowMapIndex, projCoords.xy);\r\n    \r\n    // Get current depth\r\n    float currentDepth = projCoords.z;\r\n    \r\n    // Calculate bias based on surface angle\r\n    float cosTheta = dot(normal, lightDir);\r\n    float bias = 0.01; // Moderate base bias\r\n    \r\n    // Add angle-dependent component\r\n    bias += 0.02 * (1.0 - max(cosTheta, 0.0));\r\n    \r\n    // PCF (Percentage Closer Filtering)\r\n    float shadow = 0.0;\r\n    vec2 texelSize = 1.0 / vec2(textureSize(u_shadowMap0, 0)); // All shadow maps are same size\r\n    for(int x = -1; x <= 1; ++x) {\r\n        for(int y = -1; y <= 1; ++y) {\r\n            float pcfDepth = getShadowMap(shadowMapIndex, projCoords.xy + vec2(x, y) * texelSize);\r\n            shadow += (currentDepth - bias) > pcfDepth ? 1.0 : 0.0;\r\n        }\r\n    }\r\n    shadow /= 9.0;\r\n    \r\n    // Keep shadow at 0.0 when outside the far plane region of the light's frustum\r\n    if(projCoords.z > 1.0)\r\n        shadow = 0.0;\r\n        \r\n    return shadow;\r\n}\r\n\r\n// Function to calculate directional light\r\nvec3 calcDirectionalLight(int index, vec3 normal, vec3 viewDir, vec3 baseColor) {\r\n    vec3 lightDir = normalize(-u_lightDirections[index]);\r\n    \r\n    // Diffuse\r\n    float diff = max(dot(normal, lightDir), 0.0);\r\n    \r\n    // Specular\r\n    vec3 reflectDir = reflect(-lightDir, normal);\r\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_material.shininess);\r\n    \r\n    vec3 ambient = u_lightColors[index] * u_material.ambient;\r\n    vec3 diffuse = u_lightColors[index] * diff * baseColor;\r\n    vec3 specular = u_lightColors[index] * spec * u_material.specular;\r\n    \r\n    return (ambient + diffuse + specular) * u_lightIntensities[index];\r\n}\r\n\r\n// Function to calculate point light\r\nvec3 calcPointLight(int index, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 baseColor) {\r\n    vec3 lightDir = normalize(u_lightPositions[index] - fragPos);\r\n    \r\n    // Diffuse\r\n    float diff = max(dot(normal, lightDir), 0.0);\r\n    \r\n    // Specular\r\n    vec3 reflectDir = reflect(-lightDir, normal);\r\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_material.shininess);\r\n    \r\n    // Attenuation\r\n    float distance = length(u_lightPositions[index] - fragPos);\r\n    float attenuation = 1.0 / (u_lightConstants[index] + u_lightLinears[index] * distance + u_lightQuadratics[index] * distance * distance);\r\n    \r\n    vec3 ambient = u_lightColors[index] * u_material.ambient;\r\n    vec3 diffuse = u_lightColors[index] * diff * baseColor * u_material.diffuse;\r\n    vec3 specular = u_lightColors[index] * spec * u_material.specular;\r\n    \r\n    return (ambient + diffuse + specular) * attenuation * u_lightIntensities[index];\r\n}\r\n\r\n// Function to calculate spot light\r\nvec3 calcSpotLight(int index, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 baseColor) {\r\n    vec3 lightDir = normalize(u_lightPositions[index] - fragPos);\r\n    \r\n    // Spot light intensity\r\n    float theta = dot(lightDir, normalize(-u_lightDirections[index]));\r\n    float epsilon = u_lightCutOffs[index] - u_lightOuterCutOffs[index];\r\n    float intensity = clamp((theta - u_lightOuterCutOffs[index]) / epsilon, 0.0, 1.0);\r\n    \r\n    // Use point light calculation and multiply by spot intensity\r\n    return calcPointLight(index, normal, fragPos, viewDir, baseColor) * intensity;\r\n}\r\n\r\nvoid main() {\r\n    vec3 normal = normalize(v_normal);\r\n    vec3 viewDir = normalize(u_viewPos - v_fragPos);\r\n    \r\n    // Get base color from texture or vertex color\r\n    vec3 baseColor;\r\n    if (u_useTexture) {\r\n        baseColor = texture(u_material.diffuseMap, v_texCoord).rgb;\r\n    } else {\r\n        baseColor = v_color;\r\n    }\r\n    \r\n    vec3 result = vec3(0.0);\r\n    \r\n    // Calculate contribution from each light\r\n    for(int i = 0; i < u_numLights; i++) {\r\n        if(i >= MAX_LIGHTS) break;\r\n        \r\n        // Skip inactive lights\r\n        if(u_lightTypes[i] == LIGHT_TYPE_INACTIVE) continue;\r\n        \r\n        float shadow = 0.0;\r\n        if(u_castsShadow[i]) {\r\n            vec4 fragPosLightSpace = u_lightSpaceMatrices[i] * vec4(v_fragPos, 1.0);\r\n            shadow = ShadowCalculation(fragPosLightSpace, normal, normalize(u_lightPositions[i] - v_fragPos), i);\r\n        }\r\n        \r\n        if(u_lightTypes[i] == LIGHT_TYPE_AMBIENT) {\r\n            result += u_lightColors[i] * u_lightIntensities[i] * baseColor;\r\n        }\r\n        else if(u_lightTypes[i] == LIGHT_TYPE_DIRECTIONAL) {\r\n            vec3 lighting = calcDirectionalLight(i, normal, viewDir, baseColor);\r\n            result += lighting * (1.0 - shadow);\r\n        }\r\n        else if(u_lightTypes[i] == LIGHT_TYPE_POINT) {\r\n            vec3 lighting = calcPointLight(i, normal, v_fragPos, viewDir, baseColor);\r\n            result += lighting * (1.0 - shadow);\r\n        }\r\n        else if(u_lightTypes[i] == LIGHT_TYPE_SPOT) {\r\n            vec3 lighting = calcSpotLight(i, normal, v_fragPos, viewDir, baseColor);\r\n            result += lighting * (1.0 - shadow);\r\n        }\r\n    }\r\n    \r\n    fragColor = vec4(result, 1.0);\r\n}`", "export const vertexShaderSource = `#version 300 es\r\nprecision highp float;\r\n\r\n// Attributes\r\nin vec3 a_position;\r\nin vec3 a_normal;\r\nin vec2 a_texCoord;\r\nin vec3 a_color;\r\n\r\n// Uniforms\r\nuniform mat4 u_modelMatrix;\r\nuniform mat4 u_viewMatrix;\r\nuniform mat4 u_projectionMatrix;\r\nuniform mat3 u_normalMatrix; // Added for correct normal transformation\r\n\r\n// Material uniforms\r\nstruct Material {\r\n    vec3 ambient;\r\n    vec3 diffuse;\r\n    vec3 specular;\r\n    float shininess;\r\n    sampler2D diffuseMap;\r\n};\r\nuniform Material u_material;\r\nuniform bool u_useTexture;\r\n\r\n// Varyings (output to fragment shader)\r\nout vec3 v_normal;\r\nout vec2 v_texCoord;\r\nout vec3 v_fragPos;\r\nout vec3 v_color;\r\n\r\nvoid main() {\r\n    v_fragPos = vec3(u_modelMatrix * vec4(a_position, 1.0));\r\n    v_normal = u_normalMatrix * a_normal;\r\n    v_texCoord = a_texCoord;\r\n    v_color = a_color;\r\n    \r\n    gl_Position = u_projectionMatrix * u_viewMatrix * vec4(v_fragPos, 1.0);\r\n}`;\r\n", "export const shadowVertexShaderSource = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 a_position;\r\nuniform mat4 u_lightSpaceMatrix;\r\nuniform mat4 u_modelMatrix;\r\n\r\nvoid main() {\r\n    gl_Position = u_lightSpaceMatrix * u_modelMatrix * vec4(a_position, 1.0);\r\n}\r\n`; ", "export const pbrVertexShader = `#version 300 es\r\nprecision highp float;\r\n\r\n// Attributes\r\nin vec3 a_position;\r\nin vec3 a_normal;\r\nin vec2 a_texCoord;\r\nin vec3 a_tangent;\r\nin vec3 a_bitangent;\r\nin vec3 a_color;\r\n\r\n// Uniforms\r\nuniform mat4 u_modelMatrix;\r\nuniform mat4 u_viewMatrix;\r\nuniform mat4 u_projectionMatrix;\r\nuniform mat3 u_normalMatrix;\r\n\r\n// Varyings (output to fragment shader)\r\nout vec3 v_position;\r\nout vec3 v_normal;\r\nout vec2 v_texCoord;\r\nout vec3 v_worldPos;\r\nout mat3 v_tbn; // Tangent-Bitangent-Normal matrix for normal mapping\r\nout vec3 v_color;\r\n\r\nvoid main() {\r\n    // Calculate world position\r\n    v_worldPos = vec3(u_modelMatrix * vec4(a_position, 1.0));\r\n    \r\n    // Transform normals using normal matrix\r\n    v_normal = normalize(u_normalMatrix * a_normal);\r\n    \r\n    // Pass texture coordinates\r\n    v_texCoord = a_texCoord;\r\n    \r\n    // Pass color\r\n    v_color = a_color;\r\n    \r\n    // Calculate TBN matrix for normal mapping when tangents are available\r\n    if (length(a_tangent) > 0.0) {\r\n        vec3 T = normalize(u_normalMatrix * a_tangent);\r\n        vec3 B = normalize(u_normalMatrix * a_bitangent);\r\n        vec3 N = v_normal;\r\n        v_tbn = mat3(T, B, N);\r\n    } else {\r\n        // Identity TBN when no tangents provided\r\n        v_tbn = mat3(1.0);\r\n    }\r\n    \r\n    // Calculate clip-space position\r\n    gl_Position = u_projectionMatrix * u_viewMatrix * vec4(v_worldPos, 1.0);\r\n}`; ", "export const pbrFragmentShader = `#version 300 es\r\nprecision highp float;\r\n\r\n// Constants\r\n#define PI 3.14159265359\r\n#define MAX_LIGHTS 10\r\n#define MAX_REFLECTION_LOD 4.0\r\n\r\n// Light types\r\n#define LIGHT_TYPE_INACTIVE -1\r\n#define LIGHT_TYPE_AMBIENT 0\r\n#define LIGHT_TYPE_DIRECTIONAL 1\r\n#define LIGHT_TYPE_POINT 2\r\n#define LIGHT_TYPE_SPOT 3\r\n\r\n// PBR Material uniforms\r\nstruct PBRMaterial {\r\n    vec3 baseColor;\r\n    float roughness;\r\n    float metallic;\r\n    float ambientOcclusion;\r\n    vec3 emissive;\r\n    \r\n    sampler2D albedoMap;\r\n    sampler2D normalMap;\r\n    sampler2D metallicMap;\r\n    sampler2D roughnessMap;\r\n    sampler2D aoMap;\r\n    sampler2D emissiveMap;\r\n    sampler2D emissiveStrengthMap;\r\n    \r\n    bool hasAlbedoMap;\r\n    bool hasNormalMap;\r\n    bool hasMetallicMap;\r\n    bool hasRoughnessMap;\r\n    bool hasAoMap;\r\n    bool hasEmissiveMap;\r\n    bool hasEmissiveStrengthMap;\r\n};\r\n\r\n// Light uniforms\r\nuniform int u_lightTypes[MAX_LIGHTS];\r\nuniform vec3 u_lightPositions[MAX_LIGHTS];\r\nuniform vec3 u_lightDirections[MAX_LIGHTS];\r\nuniform vec3 u_lightColors[MAX_LIGHTS];\r\nuniform float u_lightIntensities[MAX_LIGHTS];\r\nuniform float u_lightConstants[MAX_LIGHTS];\r\nuniform float u_lightLinears[MAX_LIGHTS];\r\nuniform float u_lightQuadratics[MAX_LIGHTS];\r\nuniform float u_lightCutOffs[MAX_LIGHTS];\r\nuniform float u_lightOuterCutOffs[MAX_LIGHTS];\r\nuniform int u_numLights;\r\n\r\n// Shadow mapping uniforms\r\nuniform sampler2D u_shadowMap0;\r\nuniform sampler2D u_shadowMap1;\r\nuniform sampler2D u_shadowMap2;\r\nuniform sampler2D u_shadowMap3;\r\nuniform mat4 u_lightSpaceMatrices[MAX_LIGHTS];\r\nuniform bool u_castsShadow[MAX_LIGHTS];\r\n\r\n// Environment mapping uniforms\r\nuniform samplerCube u_environmentMap;\r\nuniform samplerCube u_irradianceMap;\r\nuniform samplerCube u_prefilterMap;\r\nuniform sampler2D u_brdfLUT;\r\nuniform bool u_useEnvironmentMap;\r\n\r\n// Material uniforms\r\nuniform PBRMaterial u_material;\r\nuniform vec3 u_viewPos;\r\nuniform mat4 u_viewMatrix;\r\n\r\n// Varyings from vertex shader\r\nin vec3 v_normal;\r\nin vec2 v_texCoord;\r\nin vec3 v_worldPos;\r\nin mat3 v_tbn;\r\nin vec3 v_color;\r\n\r\n// Output\r\nout vec4 fragColor;\r\n\r\n// Utility function to get shadowmap value\r\nfloat getShadowMap(int index, vec2 coords) {\r\n    // We have to use a switch statement because WebGL2 requires constant array indices for samplers\r\n    // Note: Explicitly using .r component as we're using DEPTH_COMPONENT textures\r\n    switch(index) {\r\n        case 0: return texture(u_shadowMap0, coords).r;\r\n        case 1: return texture(u_shadowMap1, coords).r;\r\n        case 2: return texture(u_shadowMap2, coords).r;\r\n        case 3: return texture(u_shadowMap3, coords).r;\r\n        default: return 1.0; // No shadow if invalid index\r\n    }\r\n}\r\n\r\n// Shadow calculation function\r\nfloat ShadowCalculation(vec4 fragPosLightSpace, vec3 normal, vec3 lightDir, int shadowMapIndex) {\r\n    // Ensure we only process shadow maps that exist in the shader\r\n    if (shadowMapIndex > 3) {\r\n        return 0.0; // Return no shadow if the index is beyond the available shadow maps\r\n    }\r\n    \r\n    // Perform perspective divide\r\n    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;\r\n    \r\n    // Transform to [0,1] range\r\n    projCoords = projCoords * 0.5 + 0.5;\r\n    \r\n    // Check if fragment is in light's view frustum\r\n    if (projCoords.x < 0.0 || projCoords.x > 1.0 || \r\n        projCoords.y < 0.0 || projCoords.y > 1.0 || \r\n        projCoords.z < 0.0 || projCoords.z > 1.0) {\r\n        return 0.0; // Not in shadow if outside frustum\r\n    }\r\n    \r\n    // Calculate bias based on surface angle to reduce shadow acne\r\n    // Use a smaller bias since we've improved shadow map precision\r\n    float bias = max(0.001 * (1.0 - dot(normal, lightDir)), 0.0005);\r\n    \r\n    // Get depth from shadow map\r\n    float closestDepth = getShadowMap(shadowMapIndex, projCoords.xy);\r\n    float currentDepth = projCoords.z;\r\n    \r\n    // Debug - uncomment to log values\r\n    // if (gl_FragCoord.x < 1.0 && gl_FragCoord.y < 1.0) {\r\n    //     float diff = currentDepth - closestDepth;\r\n    //     if (abs(diff) < 0.1) {\r\n    //         // Add code to print values if needed\r\n    //     }\r\n    // }\r\n    \r\n    // Simple shadow check with bias\r\n    // return (currentDepth - bias) > closestDepth ? 1.0 : 0.0;\r\n    \r\n    // PCF (Percentage Closer Filtering) with larger kernel for softer shadows\r\n    float shadow = 0.0;\r\n    vec2 texelSize = 1.0 / vec2(textureSize(u_shadowMap0, 0));\r\n    \r\n    for(int x = -2; x <= 2; ++x) {\r\n        for(int y = -2; y <= 2; ++y) {\r\n            float pcfDepth = getShadowMap(shadowMapIndex, projCoords.xy + vec2(x, y) * texelSize);\r\n            shadow += (currentDepth - bias) > pcfDepth ? 1.0 : 0.0;\r\n        }\r\n    }\r\n    \r\n    shadow /= 25.0; // 5x5 kernel\r\n    \r\n    // Fade out shadows at the edge of the light's frustum for smoother transitions\r\n    float fadeStart = 0.9;\r\n    float distanceFromCenter = length(vec2(0.5, 0.5) - projCoords.xy) * 2.0;\r\n    if (distanceFromCenter > fadeStart) {\r\n        float fadeRatio = (distanceFromCenter - fadeStart) / (1.0 - fadeStart);\r\n        shadow = mix(shadow, 0.0, fadeRatio);\r\n    }\r\n    \r\n    return shadow;\r\n}\r\n\r\n// PBR functions\r\n\r\n// Normal Distribution Function (GGX/Trowbridge-Reitz)\r\nfloat DistributionGGX(vec3 N, vec3 H, float roughness) {\r\n    float a = roughness * roughness;\r\n    float a2 = a * a;\r\n    float NdotH = max(dot(N, H), 0.0);\r\n    float NdotH2 = NdotH * NdotH;\r\n    \r\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\r\n    denom = PI * denom * denom;\r\n    \r\n    return a2 / max(denom, 0.0000001);\r\n}\r\n\r\n// Geometry function (Smith model)\r\nfloat GeometrySchlickGGX(float NdotV, float roughness) {\r\n    float r = (roughness + 1.0);\r\n    float k = (r * r) / 8.0;\r\n    \r\n    float denom = NdotV * (1.0 - k) + k;\r\n    return NdotV / max(denom, 0.0000001);\r\n}\r\n\r\n// Combined Geometry function\r\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\r\n    float NdotV = max(dot(N, V), 0.0);\r\n    float NdotL = max(dot(N, L), 0.0);\r\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\r\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\r\n    \r\n    return ggx1 * ggx2;\r\n}\r\n\r\n// Fresnel function (Schlick's approximation)\r\nvec3 FresnelSchlick(float cosTheta, vec3 F0) {\r\n    return F0 + (1.0 - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);\r\n}\r\n\r\n// Add roughness-aware Fresnel-Schlick\r\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {\r\n    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);\r\n}\r\n\r\n// Calculates radiance for a light source\r\nvec3 calculateRadiance(vec3 N, vec3 V, vec3 L, vec3 H, vec3 F0, \r\n                       vec3 albedo, float metallic, float roughness,\r\n                       vec3 lightColor, float lightIntensity,\r\n                       float attenuation) {\r\n    // Calculate light attenuation\r\n    float attenuatedIntensity = lightIntensity * attenuation;\r\n    \r\n    // Ensure roughness is never zero (to prevent divide-by-zero in GGX)\r\n    roughness = max(roughness, 0.01);\r\n    \r\n    // Cook-Torrance BRDF calculation\r\n    float NDF = DistributionGGX(N, H, roughness);\r\n    float G = GeometrySmith(N, V, L, roughness);\r\n    vec3 F = FresnelSchlick(max(dot(H, V), 0.0), F0);\r\n    \r\n    // Calculate specular component\r\n    vec3 numerator = NDF * G * F;\r\n    float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\r\n    vec3 specular = numerator / max(denominator, 0.0000001);\r\n    \r\n    // Prevent uncontrolled specular highlights by clamping\r\n    specular = min(specular, vec3(10.0));\r\n    \r\n    // For energy conservation\r\n    vec3 kS = F;\r\n    vec3 kD = vec3(1.0) - kS;\r\n    kD *= 1.0 - metallic; // Metallic materials don't have diffuse\r\n    \r\n    // Combine diffuse and specular terms\r\n    float NdotL = max(dot(N, L), 0.0);\r\n    return (kD * albedo / PI + specular) * lightColor * attenuatedIntensity * NdotL;\r\n}\r\n\r\nvoid main() {\r\n    // Get material properties, using textures if available\r\n    \r\n    // Base color (albedo)\r\n    vec3 albedo = u_material.baseColor;\r\n    if (u_material.hasAlbedoMap) {\r\n        albedo = texture(u_material.albedoMap, v_texCoord).rgb;\r\n    } else {\r\n        // Use vertex color if no albedo map is provided\r\n        albedo = v_color;\r\n    }\r\n    \r\n    // Metallic and roughness\r\n    float metallic = u_material.metallic;\r\n    float roughness = u_material.roughness;\r\n    \r\n    // Sample metallic map if available\r\n    if (u_material.hasMetallicMap) {\r\n        metallic = texture(u_material.metallicMap, v_texCoord).r;\r\n    }\r\n    \r\n    // Sample roughness map if available\r\n    if (u_material.hasRoughnessMap) {\r\n        roughness = texture(u_material.roughnessMap, v_texCoord).r;\r\n    }\r\n    \r\n    // Ambient occlusion\r\n    float ao = u_material.ambientOcclusion;\r\n    if (u_material.hasAoMap) {\r\n        ao = texture(u_material.aoMap, v_texCoord).r;\r\n    }\r\n    \r\n    // Normals (with normal mapping if available)\r\n    vec3 N = normalize(v_normal);\r\n    if (u_material.hasNormalMap) {\r\n        // Sample and decode normal map\r\n        vec3 normalMapValue = texture(u_material.normalMap, v_texCoord).rgb;\r\n        \r\n        // Convert from [0,1] to [-1,1] range and handle OpenGL coordinate system\r\n        normalMapValue = normalMapValue * 2.0 - 1.0;\r\n        normalMapValue.y = -normalMapValue.y;  // Flip Y component for OpenGL\r\n        \r\n        // Transform normal from tangent to world space\r\n        N = normalize(v_tbn * normalMapValue);\r\n    }\r\n    \r\n    // Emissive\r\n    vec3 emissive = u_material.emissive;\r\n    if (u_material.hasEmissiveMap) {\r\n        emissive = texture(u_material.emissiveMap, v_texCoord).rgb;\r\n    }\r\n    if (u_material.hasEmissiveStrengthMap) {\r\n        float emissiveStrength = texture(u_material.emissiveStrengthMap, v_texCoord).r;\r\n        emissive *= emissiveStrength;\r\n    }\r\n    \r\n    // Calculate view direction and reflection vector\r\n    vec3 V = normalize(u_viewPos - v_worldPos);\r\n    vec3 R = reflect(-V, normalize(v_normal));\r\n    \r\n    \r\n    // Calculate F0 (surface reflection at zero incidence)\r\n    vec3 F0 = vec3(0.04); \r\n    F0 = mix(F0, albedo, metallic);\r\n    \r\n    // Initialize result\r\n    vec3 Lo = vec3(0.0);\r\n    \r\n    // Calculate lighting contribution from each light\r\n    for(int i = 0; i < u_numLights; i++) {\r\n        if(i >= MAX_LIGHTS || u_lightTypes[i] == LIGHT_TYPE_INACTIVE) \r\n            continue;\r\n        \r\n        // Calculate light direction and intensity\r\n        vec3 L;\r\n        float attenuation = 1.0;\r\n        \r\n        if (u_lightTypes[i] == LIGHT_TYPE_DIRECTIONAL) {\r\n            // Directional light\r\n            L = normalize(-u_lightDirections[i]);\r\n        } \r\n        else if (u_lightTypes[i] == LIGHT_TYPE_POINT || u_lightTypes[i] == LIGHT_TYPE_SPOT) {\r\n            // Point or spot light\r\n            L = normalize(u_lightPositions[i] - v_worldPos);\r\n            \r\n            // Calculate attenuation\r\n            float distance = length(u_lightPositions[i] - v_worldPos);\r\n            attenuation = 1.0 / (u_lightConstants[i] + \r\n                                 u_lightLinears[i] * distance + \r\n                                 u_lightQuadratics[i] * distance * distance);\r\n            \r\n            // For spot lights, calculate spotlight intensity\r\n            if (u_lightTypes[i] == LIGHT_TYPE_SPOT) {\r\n                float theta = dot(L, normalize(-u_lightDirections[i]));\r\n                float epsilon = u_lightCutOffs[i] - u_lightOuterCutOffs[i];\r\n                float intensity = clamp((theta - u_lightOuterCutOffs[i]) / epsilon, 0.0, 1.0);\r\n                attenuation *= intensity;\r\n            }\r\n        }\r\n        else if (u_lightTypes[i] == LIGHT_TYPE_AMBIENT) {\r\n            // Ambient light (applied separately)\r\n            continue;\r\n        }\r\n        \r\n        // Calculate half vector\r\n        vec3 H = normalize(V + L);\r\n        \r\n        // Calculate shadow\r\n        float shadow = 0.0;\r\n        if(u_castsShadow[i]) {\r\n            vec4 fragPosLightSpace = u_lightSpaceMatrices[i] * vec4(v_worldPos, 1.0);\r\n            shadow = ShadowCalculation(fragPosLightSpace, N, L, i);\r\n        }\r\n        \r\n        // Add light contribution\r\n        vec3 radiance = calculateRadiance(N, V, L, H, F0, albedo, metallic, roughness,\r\n                                         u_lightColors[i], u_lightIntensities[i],\r\n                                         attenuation);\r\n        \r\n        Lo += radiance * (1.0 - shadow);\r\n    }\r\n    \r\n    // Calculate ambient lighting with environment mapping\r\n    vec3 ambient = vec3(0.03) * albedo; // Default ambient if no environment map\r\n    \r\n    // Apply ambient light from light sources\r\n    vec3 ambientContribution = vec3(0.0);\r\n    for(int i = 0; i < u_numLights; i++) {\r\n        if(i >= MAX_LIGHTS || u_lightTypes[i] != LIGHT_TYPE_AMBIENT) \r\n            continue;\r\n        \r\n        // Add ambient light contribution with light color and intensity\r\n        // Scale down the intensity significantly (divide by 3) to make it much more subtle\r\n        // This means a value of 1.0 is now only 33% as bright as before\r\n        ambientContribution += u_lightColors[i] * (min(u_lightIntensities[i], 1.0) / 3.0) * albedo;\r\n    }\r\n    \r\n    if (u_useEnvironmentMap) {\r\n        // Sample both the prefilter map and the BRDF lut and combine them together\r\n        vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);\r\n        \r\n        vec3 kS = F;\r\n        vec3 kD = 1.0 - kS;\r\n        kD *= 1.0 - metallic;\r\n        \r\n        // Sample irradiance map for diffuse IBL\r\n        vec3 irradiance = texture(u_irradianceMap, N).rgb;\r\n        vec3 diffuse = irradiance * albedo;\r\n        \r\n        // Sample environment map with roughness-based LOD for specular IBL\r\n        vec3 prefilteredColor = textureLod(u_prefilterMap, R, roughness * MAX_REFLECTION_LOD).rgb;\r\n        vec2 brdf = texture(u_brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg;\r\n        vec3 specular = prefilteredColor * (F * brdf.x + brdf.y);\r\n\r\n        // Add perfect reflection from environment map when roughness is very low\r\n        float perfectReflectionWeight = (1.0 - roughness) * (1.0 - roughness) * (1.0 - roughness) * (1.0 - roughness); // Stronger falloff\r\n        if (perfectReflectionWeight > 0.001) {\r\n            vec3 perfectReflection = texture(u_environmentMap, R).rgb;\r\n            specular = mix(specular, perfectReflection, perfectReflectionWeight * metallic);\r\n        }\r\n\r\n        // Apply environment map for ambient\r\n        ambient = (kD * diffuse + specular) * ao;\r\n        \r\n        // Add extremely subtle ambient contribution that preserves reflections\r\n        if (length(ambientContribution) > 0.0) {\r\n            // Use a very light mix that strongly favors environment mapping\r\n            // Non-metallic surfaces get slightly more ambient\r\n            float mixFactor = 0.85 + (metallic * 0.1); // 0.85-0.95 range based on metallic\r\n            ambient = mix(ambientContribution, ambient, mixFactor);\r\n        }\r\n    } else {\r\n        // If no environment map, use only ambient contribution (already scaled down)\r\n        ambient = ambientContribution;\r\n    }\r\n\r\n    // Combine all lighting contributions\r\n    vec3 color = ambient + Lo + emissive;\r\n\r\n    // Calculate rim lighting based on lights in the scene\r\n    vec3 rimColor = vec3(0.0);\r\n    float rimPower = 3.0; // Controls how sharp the rim effect is\r\n    float viewFacing = 1.0 - max(dot(N, V), 0.0);\r\n    \r\n    // Add rim contribution from each light\r\n    for(int i = 0; i < u_numLights; i++) {\r\n        if(i >= MAX_LIGHTS || u_lightTypes[i] == LIGHT_TYPE_INACTIVE || u_lightTypes[i] == LIGHT_TYPE_AMBIENT) \r\n            continue;\r\n            \r\n        vec3 L;\r\n        float rimStrength = 0.0;\r\n        \r\n        if (u_lightTypes[i] == LIGHT_TYPE_DIRECTIONAL) {\r\n            L = normalize(-u_lightDirections[i]);\r\n            rimStrength = u_lightIntensities[i] * 0.3; // Scale rim by light intensity\r\n        } \r\n        else if (u_lightTypes[i] == LIGHT_TYPE_POINT || u_lightTypes[i] == LIGHT_TYPE_SPOT) {\r\n            vec3 lightToPos = v_worldPos - u_lightPositions[i];\r\n            L = normalize(lightToPos);\r\n            \r\n            // Rim strength falls off with distance\r\n            float distance = length(lightToPos);\r\n            float attenuation = 1.0 / (u_lightConstants[i] + \r\n                                     u_lightLinears[i] * distance + \r\n                                     u_lightQuadratics[i] * distance * distance);\r\n                                     \r\n            rimStrength = u_lightIntensities[i] * attenuation * 0.3;\r\n            \r\n            // For spotlights, consider the cone angle\r\n            if (u_lightTypes[i] == LIGHT_TYPE_SPOT) {\r\n                float theta = dot(-L, normalize(u_lightDirections[i]));\r\n                float epsilon = u_lightCutOffs[i] - u_lightOuterCutOffs[i];\r\n                rimStrength *= clamp((theta - u_lightOuterCutOffs[i]) / epsilon, 0.0, 1.0);\r\n            }\r\n        }\r\n        \r\n        // Calculate rim contribution from this light\r\n        float lightRim = pow(viewFacing * max(dot(L, N), 0.0), rimPower) * rimStrength;\r\n        rimColor += u_lightColors[i] * lightRim;\r\n    }\r\n    \r\n    // Add rim lighting to final color\r\n    color += rimColor * albedo;\r\n\r\n    // Enhance colored light visibility\r\n    color = mix(color, color * 1.2, metallic);\r\n\r\n    // Prevent oversaturation by clamping extremely bright values\r\n    float maxLuminance = max(max(color.r, color.g), color.b);\r\n    if (maxLuminance > 10.0) {\r\n        color *= 10.0 / maxLuminance;\r\n    }\r\n\r\n    // Apply ACES filmic tone mapping for better dynamic range\r\n    // Source: https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\r\n    vec3 mapped = (color * (2.51 * color + 0.03)) / (color * (2.43 * color + 0.59) + 0.14);\r\n    mapped = clamp(mapped, 0.0, 1.0);\r\n\r\n    // Gamma correction\r\n    color = pow(mapped, vec3(1.0/2.2));\r\n\r\n    fragColor = vec4(color, 1.0);\r\n}`; ", "export const debugDepthVertexShader = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 a_position;\r\nin vec2 a_texCoord;\r\n\r\nout vec2 v_texCoord;\r\n\r\nvoid main() {\r\n    v_texCoord = a_texCoord;\r\n    gl_Position = vec4(a_position, 0.0, 1.0);\r\n}\r\n`;\r\n\r\nexport const debugDepthFragmentShader = `#version 300 es\r\nprecision highp float;\r\n\r\nuniform sampler2D u_texture;\r\nin vec2 v_texCoord;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    float depth = texture(u_texture, v_texCoord).r;\r\n    \r\n    // Output raw depth values for better debugging\r\n    // Don't apply any transformations to better see the actual values\r\n    if (depth == 0.0) {\r\n        // Show black for zero depth - may indicate problems\r\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n    } else if (depth >= 1.0) {\r\n        // Show white for maximum depth\r\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n    } else {\r\n        // Apply gray scale for full depth range\r\n        fragColor = vec4(vec3(depth), 1.0);\r\n        \r\n        // Add grid lines for depth value reference\r\n        vec2 grid = fract(v_texCoord * 10.0);\r\n        float line = 0.05;\r\n        if (grid.x < line || grid.y < line) {\r\n            // Add slight color to grid lines\r\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.5, 0.5, 1.0), 0.2);\r\n        }\r\n    }\r\n}\r\n`; ", "import { VertexBuffer, IndexBuffer, VertexArray } from './buffer';\r\nimport { ShaderManager } from './shaderManager';\r\nimport { fragmentShaderSource } from './shaders/fragmentShaderSource';\r\nimport { vertexShaderSource } from './shaders/vertexShaderSource';\r\nimport { shadowVertexShaderSource } from './shaders/shadowVertexShader';\r\nimport { pbrVertexShader } from './shaders/pbrVertexShader';\r\nimport { pbrFragmentShader } from './shaders/pbrFragmentShader';\r\nimport { debugDepthVertexShader, debugDepthFragmentShader } from './shaders/debugDepthShader';\r\n\r\nexport class WebGL2Initializer {\r\n    private canvas: HTMLCanvasElement;\r\n    public readonly ctx: WebGL2RenderingContext | null = null;\r\n    \r\n    public vertexBuffer: VertexBuffer;\r\n    public indexBuffer: IndexBuffer;\r\n    public vao: VertexArray;\r\n    public shaderManager: ShaderManager;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        if (!canvas) {\r\n            throw new Error(`Canvas not found`);\r\n        }\r\n        this.canvas = canvas;\r\n        this.ctx = this.initializeWebGL2();\r\n\r\n        // Initialize basic WebGL objects\r\n        this.shaderManager = new ShaderManager(this.ctx);\r\n        this.vao = new VertexArray(this.ctx);\r\n        this.vertexBuffer = new VertexBuffer(this.ctx);\r\n        this.indexBuffer = new IndexBuffer(this.ctx);\r\n\r\n        // Load and use shader programs\r\n        this.shaderManager.loadShaderProgram('basic', vertexShaderSource, fragmentShaderSource);\r\n        this.shaderManager.loadShaderProgram('pbr', pbrVertexShader, pbrFragmentShader);\r\n        this.shaderManager.loadShaderProgram('shadow', shadowVertexShaderSource, `#version 300 es\r\n            precision highp float;\r\n            out vec4 fragColor;\r\n            void main() {\r\n                // Explicitly output a color (not used) but required for valid fragment shader\r\n                // The actual depth is written automatically by WebGL\r\n                fragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n            }\r\n        `);\r\n        \r\n        // Add debug shader for shadow map visualization\r\n        this.shaderManager.loadShaderProgram('debug', debugDepthVertexShader, debugDepthFragmentShader);\r\n        \r\n        // Use PBR shader as default\r\n        this.shaderManager.useProgram('pbr');\r\n\r\n        // Initialize light arrays\r\n        const numLights = 10;\r\n        const types = new Int32Array(numLights);\r\n        const positions = new Float32Array(numLights * 3);\r\n        const directions = new Float32Array(numLights * 3);\r\n        const colors = new Float32Array(numLights * 3);\r\n        const intensities = new Float32Array(numLights);\r\n        const constants = new Float32Array(numLights);\r\n        const linears = new Float32Array(numLights);\r\n        const quadratics = new Float32Array(numLights);\r\n        const cutOffs = new Float32Array(numLights);\r\n        const outerCutOffs = new Float32Array(numLights);\r\n\r\n        // Initialize all lights as inactive\r\n        types.fill(-1);\r\n        constants.fill(1.0); // Default attenuation constant\r\n\r\n        // Set default uniform values\r\n        this.shaderManager.setUniform('u_numLights', 0);\r\n        this.shaderManager.setUniform('u_lightTypes', types);\r\n        this.shaderManager.setUniform('u_lightPositions', positions);\r\n        this.shaderManager.setUniform('u_lightDirections', directions);\r\n        this.shaderManager.setUniform('u_lightColors', colors);\r\n        this.shaderManager.setUniform('u_lightIntensities', intensities);\r\n        this.shaderManager.setUniform('u_lightConstants', constants);\r\n        this.shaderManager.setUniform('u_lightLinears', linears);\r\n        this.shaderManager.setUniform('u_lightQuadratics', quadratics);\r\n        this.shaderManager.setUniform('u_lightCutOffs', cutOffs);\r\n        this.shaderManager.setUniform('u_lightOuterCutOffs', outerCutOffs);\r\n\r\n        // Initialize shadow mapping arrays\r\n        const castsShadow = new Int32Array(numLights);\r\n        const lightSpaceMatrices = new Float32Array(numLights * 16); // 4x4 matrices\r\n        castsShadow.fill(1); // Default to not casting shadows\r\n\r\n        this.shaderManager.setUniform('u_castsShadow', castsShadow);\r\n        this.shaderManager.setUniform('u_lightSpaceMatrices', lightSpaceMatrices);\r\n\r\n        // Enhance ambient lighting and gamma correction\r\n        this.shaderManager.setUniform('u_material.baseColor', new Float32Array([0.8, 0.8, 0.8]));\r\n        this.shaderManager.setUniform('u_material.roughness', 0.5);\r\n        this.shaderManager.setUniform('u_material.metallic', 0.0);\r\n        this.shaderManager.setUniform('u_material.ambientOcclusion', 1.0);\r\n        this.shaderManager.setUniform('u_material.emissive', new Float32Array([0.0, 0.0, 0.0]));\r\n        \r\n        // Initialize texture flags to false by default\r\n        this.shaderManager.setUniform('u_material.hasAlbedoMap', 0);\r\n        this.shaderManager.setUniform('u_material.hasNormalMap', 0);\r\n        this.shaderManager.setUniform('u_material.hasMetallicMap', 0);\r\n        this.shaderManager.setUniform('u_material.hasRoughnessMap', 0);\r\n        this.shaderManager.setUniform('u_material.hasAoMap', 0);\r\n        this.shaderManager.setUniform('u_material.hasEmissiveMap', 0);\r\n\r\n        // Initialize environment mapping uniforms\r\n        this.shaderManager.setUniform('u_useEnvironmentMap', 0);\r\n        this.shaderManager.setUniform('u_environmentMap', 11);\r\n        this.shaderManager.setUniform('u_irradianceMap', 12);\r\n        this.shaderManager.setUniform('u_prefilterMap', 13);\r\n        this.shaderManager.setUniform('u_brdfLUT', 14);\r\n\r\n        // Set default camera position for better lighting\r\n        this.shaderManager.setUniform('u_viewPos', new Float32Array([0.0, 1.0, 6.0]));\r\n\r\n        // Enable depth testing, backface culling and proper blending\r\n        this.ctx.enable(this.ctx.DEPTH_TEST);\r\n        this.ctx.enable(this.ctx.CULL_FACE);\r\n        this.ctx.blendFunc(this.ctx.SRC_ALPHA, this.ctx.ONE_MINUS_SRC_ALPHA);\r\n        this.ctx.enable(this.ctx.BLEND);\r\n    }\r\n\r\n    private initializeWebGL2(): WebGL2RenderingContext {\r\n        const ctx = this.canvas.getContext('webgl2');\r\n        if (!ctx) {\r\n            throw new Error('WebGL 2 not supported');\r\n        }\r\n        return ctx;\r\n    }\r\n}\r\n", "import { ElementAttributes } from '../elements/element';\r\nimport { Vector2, v2 } from '../util/math/vector2';\r\nimport { TickerReturnData } from '../ticker';\r\nimport { DomElement } from './domElement';\r\nimport { Events } from '../util/event';\r\nimport { glob } from '../../game';\r\nimport { WebGL2Initializer } from '../webgl2/initialise';\r\n\r\nexport type DomElementAttributes = ElementAttributes & {\r\n    id?: string,\r\n    size?: Vector2,\r\n    background?: string,\r\n    position?: Vector2;\r\n};\r\n\r\nexport class Renderer extends DomElement<'canvas'> {\r\n    public tickerData: TickerReturnData;\r\n    private webgl: WebGL2Initializer;\r\n    public get ctx(): WebGL2RenderingContext {\r\n        return this.webgl.ctx;\r\n    }\r\n    public get shaderManager() {\r\n        return this.webgl.shaderManager;\r\n    }\r\n    private held: boolean = false;\r\n    private lastClick: Vector2;\r\n\r\n\r\n    constructor() {\r\n        super('canvas');\r\n        this.dom.style.position = 'absolute';\r\n        this.dom.style.pointerEvents = 'all';\r\n        this.dom.style.bottom = '0px';\r\n        this.dom.style.touchAction = 'none';\r\n        this.dom.tabIndex = 1;\r\n\r\n        this.webgl = new WebGL2Initializer(this.dom);\r\n\r\n        window.addEventListener(\"resize\", () => {\r\n            this.resize();\r\n        });\r\n\r\n        glob.events.resize = new Events('resize');\r\n\r\n        this.dom.addEventListener('mousedown', (e) => {\r\n            this.lastClick = v2(e.offsetX / this.width, e.offsetY / this.height);\r\n        });\r\n        this.dom.addEventListener('touchstart', (e) => {\r\n            this.lastClick = v2(e.touches[0].clientX / this.width, e.touches[0].clientY / this.height);\r\n        });\r\n\r\n        this.dom.addEventListener('mousemove', (e) => {\r\n            if (this.lastClick) {\r\n                this.lastClick = v2(e.offsetX / this.width, e.offsetY / this.height);\r\n            }\r\n        });\r\n        this.dom.addEventListener('touchmove', (e) => {\r\n            if (this.lastClick) {\r\n                this.lastClick = v2(e.touches[0].clientX / this.width, e.touches[0].clientY / this.height);\r\n            }\r\n        });\r\n        this.dom.addEventListener('mouseup', (e) => {\r\n            this.lastClick = null;\r\n        });\r\n        this.dom.addEventListener('touchend', (e) => {\r\n            this.lastClick = null;\r\n        });\r\n        this.resize();\r\n    }\r\n\r\n\r\n    resize() {\r\n        this.size = v2(document.body.clientWidth, document.body.clientHeight);\r\n        this.dom.style.width = `${this.size.x}px`;\r\n        this.dom.setAttribute('width', String(this.size.x));\r\n        this.dom.style.height = `${this.size.y}px`;\r\n        this.dom.setAttribute('height', String(this.size.y));\r\n\r\n        glob.events.resize.alert(this.size);\r\n        this.ctx.viewport(0, 0, this.size.x, this.size.y);\r\n    }\r\n\r\n    public get width() {\r\n        return this.size.x;\r\n    }\r\n    public set width(value: number) {\r\n        this.dom.style.width = `${value}px`;\r\n        this.dom.setAttribute('width', String(value));\r\n        this.size.x = value;\r\n    }\r\n\r\n    public get height() {\r\n        return this.size.y;\r\n    }\r\n    public set height(value: number) {\r\n        this.dom.style.height = `${value}px`;\r\n        this.dom.setAttribute('height', String(value));\r\n        this.size.y = value;\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        super.tick(obj);\r\n        this.tickerData = obj;\r\n        if (this.lastClick) {\r\n            glob.game.active?.click(this.lastClick);\r\n        }\r\n        glob.game.active?.tick(obj);\r\n        glob.game.active?.afterTick(obj);\r\n    }\r\n}\r\n\r\n\r\n", "export class Pad {\r\n    recentPad: Gamepad;\r\n    constructor(public gamepad:Gamepad) {\r\n        \r\n    }\r\n\r\n    tick() {\r\n        this.recentPad = navigator.getGamepads().find((g)=>g.id === this.gamepad.id);        \r\n    }\r\n}", "import { Pad } from './gamepad';\r\n\r\nexport class PadManager {\r\n    private pads: Record<string, Pad> = {};\r\n    constructor() {\r\n        window.addEventListener(\"gamepadconnected\", this.connect.bind(this));\r\n        window.addEventListener(\"gamepaddisconnected\", this.disconnect.bind(this));\r\n    }\r\n    connect(e: GamepadEvent) {\r\n        this.pads[e.gamepad.id] = new Pad(e.gamepad);\r\n    }\r\n    disconnect(e: GamepadEvent) {\r\n        delete this.pads[e.gamepad.id];\r\n    }\r\n    tick() {        \r\n        Object.values(this.pads).forEach((pad)=>{\r\n            pad.tick();\r\n        });\r\n    }\r\n}", "import { DomElement, DomElementAttributes } from \"./domElement\";\r\n\r\nexport type  DomTextAttributes = DomElementAttributes & {\r\n    text?: string,\r\n    color?: string,\r\n    fontSize?: number,\r\n    fontWeight?: number,\r\n    fontFamily?: string,\r\n    padding?: [number,number,number,number],\r\n}\r\nexport class DomText extends DomElement<'div'> {\r\n    set color (v: string) {\r\n        this.dom.style.color = v; \r\n    }\r\n    set fontSize (v: number) {\r\n        this.dom.style.fontSize = String(v)+'px'; \r\n    }\r\n    set fontWeight (v: number) {\r\n        this.dom.style.fontWeight = String(v); \r\n    }\r\n    set fontFamily (v: string) {\r\n        this.dom.style.fontFamily = v; \r\n    }\r\n    public get text() {\r\n        return this.dom.innerHTML;\r\n    }\r\n    public set text (v: string) {\r\n        this.dom.innerHTML = v?v:''; \r\n    }\r\n    public set padding (v: [number,number,number,number]) {\r\n        this.dom.style.padding = v.join('px ')+'px'; \r\n    }\r\n    public constructor(attr: DomTextAttributes = {}) {\r\n        super('div', attr);\r\n        this.color = attr.color;\r\n        this.text = attr.text;\r\n        this.fontSize = attr.fontSize;\r\n        this.fontWeight = attr.fontWeight;\r\n        this.fontFamily = attr.fontFamily;\r\n        this.padding = attr.padding || [0,0,0,0];\r\n\r\n        this.dom.style.pointerEvents = 'none';\r\n        this.dom.style.userSelect = 'none';\r\n        this.dom.style.zIndex = '1';\r\n        this.dom.style.whiteSpace = 'pre-line';\r\n    }\r\n}", "import { glob } from '../../game';\r\nimport { DomText } from '../elements/domText';\r\n\r\nexport class Keyboard {\r\n\r\n    private keyDown: Record<string, [(frame: number) => void]> = {};\r\n    private keyUp: Record<string, [() => void]> = {};\r\n\r\n    ready() {\r\n        glob.renderer.dom.addEventListener('keydown', (e) => {\r\n            const k = e.key.toLowerCase();\r\n            this.keyDown[k]?.forEach((c) => {\r\n                c(glob.frame);\r\n            });\r\n        });\r\n        glob.renderer.dom.addEventListener('keyup', (e) => {\r\n            const k = e.key.toLowerCase();\r\n            this.keyUp[k]?.forEach((c) => {\r\n                c();\r\n            });\r\n        });\r\n    }\r\n\r\n    register(key: string, down: (frame: number) => void, up: () => void) {\r\n        const k = key.toLowerCase();\r\n\r\n        if (this.keyDown[k]) this.keyDown[k].push(down);\r\n        else this.keyDown[k] = [down];\r\n\r\n        if (this.keyUp[k]) this.keyUp[k].push(up);\r\n        else this.keyUp[k] = [up];\r\n    }\r\n}\r\n\r\nexport class InputDevices {\r\n    public keyboard: Keyboard = new Keyboard();\r\n    private overlay: DomText;\r\n    private _locked: boolean;\r\n    public mobile: boolean;\r\n    public get locked(): boolean {\r\n        return this._locked;\r\n    }\r\n    public set locked(value: boolean) {\r\n        this._locked = value;\r\n        // this.overlay.dom.style.display = !value ? 'block' : 'none';\r\n    }\r\n    constructor() {\r\n        this.overlay = new DomText({\r\n            text: 'Pauzed',\r\n        });\r\n        this.overlay.dom.setAttribute('style', `\r\n            transform-origin: left bottom;\r\n            pointer-events: none;\r\n            bottom: 0px;\r\n            left: 0px;\r\n            user-select: none;\r\n            z-index: 999;\r\n            position: absolute;\r\n            height: 100vh;\r\n            width: 100vw;\r\n            color: white !important;\r\n            font-family: monospace;\r\n            font-weight: bold;\r\n            font-size: 40px;\r\n            padding-left: 50px;\r\n            padding-top: 20px;\r\n            box-sizing: border-box;\r\n            display: none;\r\n            text-transform: uppercase;`\r\n        );\r\n    }\r\n\r\n    ready() {\r\n        window.addEventListener(`contextmenu`, (e) => e.preventDefault());\r\n\r\n        this.mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n        if (this.mobile) {\r\n            //mobile\r\n            this.locked = true;\r\n\r\n        } else {\r\n            // if (glob.game.active && glob.game.active.interface) {\r\n            //     glob.game.active.interface.touchControls.style.display = 'none';\r\n            // }\r\n            // glob.renderer.dom.addEventListener('click', (e) => {\r\n            //     if (!this.locked) {\r\n            //         glob.renderer.dom.requestPointerLock();\r\n            //     }\r\n            // });\r\n\r\n            // document.addEventListener('pointerlockchange', () => {\r\n            //     this.locked = (document.pointerLockElement === glob.renderer.dom);\r\n            // });\r\n            document.body.appendChild(this.overlay.dom);\r\n\r\n        }\r\n        this.keyboard.ready();\r\n    }\r\n}\r\n", "import { Vector3 } from \"./math/vector3\";\r\nexport abstract class Util {\r\n    public static clamp(value: number, min: number, max: number) {\r\n        return Math.max(Math.min(value, max), min);\r\n    }\r\n    public static to0(value: number, tolerance: number = 0.1) {\r\n        return Math.abs(value) < tolerance ? 0 : value;\r\n    }\r\n    public static chunk(array: unknown[], size: number): typeof array[]{\r\n        const output: unknown[][] = [];\r\n        for (let i=0; i < array.length; i += size) {\r\n            output.push(array.slice(i, i + size));\r\n        }\r\n        return output;\r\n    }\r\n    public static duplicate(array: unknown[], size: number): unknown[]{\r\n        const output: unknown[] = [];\r\n        array.forEach((v) => {\r\n            for (let i=0; i < size; i++) {\r\n                output.push(v);\r\n            }\r\n        })\r\n        return output;\r\n    }\r\n\r\n    public static padArray(ar: any[], b: any, len: number) {\r\n        return ar.concat(Array.from(Array(len).fill(b))).slice(0, len);\r\n    }\r\n\r\n    public static addArrays(ar: number[], br: number[]) {\r\n        return ar.map((a, i) => a + br[i]);\r\n    }\r\n\r\n    public static subtractArrays(ar: number[], br: number[]) {\r\n        return ar.map((a, i) => a - br[i]);\r\n    }\r\n\r\n    public static multiplyArrays(ar: number[], br: number[]) {\r\n        return ar.map((a, i) => a * br[i]);\r\n    }\r\n\r\n    public static scaleArrays(ar: number[], b: number) {\r\n        return ar.map((a, i) => a * b);\r\n    }\r\n\r\n    public static radToDeg(r: number) {\r\n        return r * 180 / Math.PI;\r\n    }\r\n\r\n    public static degToRad(d: number) {\r\n        return d * Math.PI / 180;\r\n    }\r\n\r\n    public static closestVectorMagnitude(vectors: Vector3[], target: number): Vector3 {\r\n        let current: Vector3;\r\n        vectors.forEach((v) => {\r\n            if (current === undefined || Math.abs(v.magnitude()) < Math.abs(current.magnitude())) current = v;\r\n        });\r\n        return current;\r\n    }\r\n\r\n\r\n}", "import { vec3 } from 'gl-matrix';\r\nimport { Vector2, v2 } from './vector2';\r\nimport { Util } from '../utils';\r\nimport { Quaternion } from './quaternion';\r\nimport { Camera } from '../../webgl2/camera';\r\n\r\nexport function v3(): Vector3;\r\nexport function v3(a?: [number?, number?, number?]): Vector3;\r\nexport function v3(a?: number, b?: number, c?: number): Vector3;\r\nexport function v3(a?: [number?, number?, number?] | number, b?: number, c?: number): Vector3 {\r\n\tif (typeof a === 'number') {\r\n\t\treturn Vector3.f(a, b, c);\r\n\t} else if (typeof a === 'undefined') {\r\n\t\treturn Vector3.f(0);\r\n\t} else {\r\n\t\treturn Vector3.f(...a);\r\n\t}\r\n}\r\n\r\nexport class Vector3 {\r\n\tpublic get pitch(): number { return this.x; }\r\n\tpublic set pitch(value: number) { this.x = value; }\r\n\r\n\tpublic get yaw(): number { return this.y; }\r\n\tpublic set yaw(value: number) { this.y = value; }\r\n\r\n\tpublic get roll(): number { return this.z; }\r\n\tpublic set roll(value: number) { this.z = value; }\r\n\r\n\tpublic get x(): number { return this.vec[0]; }\r\n\tpublic set x(value: number) { this.vec[0] = value; }\r\n\r\n\tpublic get y(): number { return this.vec[1]; }\r\n\tpublic set y(value: number) { this.vec[1] = value; }\r\n\r\n\tpublic get z(): number { return this.vec[2]; }\r\n\tpublic set z(value: number) { this.vec[2] = value; }\r\n\r\n\tpublic get xy() { return v2(this.x, this.y); }\r\n\tpublic set xy(v: Vector2) { this.x = v.x; this.y = v.y}\r\n\r\n\tpublic get xz() { return v2(this.x, this.z); }\r\n\tpublic set xz(v: Vector2) { this.x = v.x; this.z = v.y}\r\n\r\n\tpublic get yx() { return v2(this.y, this.x); }\r\n\tpublic set yx(v: Vector2) { this.y = v.x; this.x = v.y}\r\n\r\n\tpublic get yz() { return v2(this.y, this.z); }\r\n\tpublic set yz(v: Vector2) { this.y = v.x; this.z = v.y}\r\n\r\n\tpublic get zx() { return v2(this.z, this.x); }\r\n\tpublic set zx(v: Vector2) { this.z = v.x; this.x = v.y}\r\n\r\n\tpublic get zy() { return v2(this.z, this.y); }\r\n\tpublic set zy(v: Vector2) { this.z = v.x; this.y = v.y}\r\n\r\n\r\n\r\n\tpublic get xzy() { return v3(this.x, this.z, this.y); }\r\n\tpublic set xzy(v: Vector3) { this.x = v.x; this.z = v.y; this.y = v.z}\r\n\r\n\tpublic get xyz() { return v3(this.x, this.y, this.z); }\r\n\tpublic set xyz(v: Vector3) { this.x = v.x; this.y = v.y; this.z = v.z}\r\n\r\n\tpublic get yxz() { return v3(this.y, this.x, this.z); }\r\n\tpublic set yxz(v: Vector3) { this.y = v.x; this.x = v.y; this.z = v.z}\r\n\r\n\tpublic get yzx() { return v3(this.y, this.z, this.x); }\r\n\tpublic set yzx(v: Vector3) { this.y = v.x; this.z = v.y; this.x = v.z}\r\n\r\n\tpublic get zxy() { return v3(this.z, this.x, this.y); }\r\n\tpublic set zxy(v: Vector3) { this.z = v.x; this.x = v.y; this.y = v.z}\r\n\r\n\tpublic get zyx() { return v3(this.z, this.y, this.x); }\r\n\tpublic set zyx(v: Vector3) { this.z = v.x; this.y = v.y; this.x = v.z}\r\n\r\n\tpublic get str() {\r\n\t\treturn this.vec.toString();\r\n\t}\r\n\r\n\r\n\tpublic vec: vec3;\r\n\r\n\tconstructor(x: number = 0, y: number = 0, z: number = 0) {\r\n\t\tthis.vec = [x, y, z];\r\n\t}\r\n\r\n\tstatic from2(vector: Vector2, z: number = 0) {\r\n\t\treturn new Vector3(vector.x, vector.y, z);\r\n\t}\r\n\r\n\tstatic f(x: number = 0, y: number = x, z: number = x) {\r\n\t\treturn new Vector3(x, y, z);\r\n\t}\r\n\r\n\tstatic get forwards() {\r\n\t\treturn new Vector3(0, 0, 1);\r\n\t}\r\n\tstatic get backwards() {\r\n\t\treturn new Vector3(0, 0, -1);\r\n\t}\r\n\tstatic get up() {\r\n\t\treturn new Vector3(0, 1, 0);\r\n\t}\r\n\tstatic get down() {\r\n\t\treturn new Vector3(0, -1, 0);\r\n\t}\r\n\tstatic get left() {\r\n\t\treturn new Vector3(-1, 0, 0);\r\n\t}\r\n\tstatic get right() {\r\n\t\treturn new Vector3(1, 0, 0);\r\n\t}\r\n\tstatic get PI() {\r\n\t\treturn new Vector3(Math.PI, Math.PI, Math.PI);\r\n\t}\r\n\tstatic get TAU() {\r\n\t\treturn Vector3.PI.scale(0.5);\r\n\t}\r\n\r\n\tget array() {\r\n\t\treturn [this.x, this.y, this.z];\r\n\t}\r\n\r\n\tset array(a: [number, number, number]) {\r\n\t\t[this.x, this.y, this.z] = a;\r\n\t}\r\n\r\n\tforEach(callbackfn: (value: number, index: number, array: number[]) => void): void {\r\n\t\tthis.array.forEach(callbackfn);\r\n\t};\r\n\r\n\tget c(): Vector3 {\r\n\t\treturn this.clone();\r\n\t}\r\n\r\n\tequals(vector: Vector3): boolean {\r\n\t\treturn (\r\n\t\t\tthis.x === vector.x &&\r\n\t\t\tthis.y === vector.y &&\r\n\t\t\tthis.z === vector.z\r\n\t\t);\r\n\t}\r\n\r\n\tclone(): Vector3 {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x,\r\n\t\t\tthis.y,\r\n\t\t\tthis.z\r\n\t\t);\r\n\t}\r\n\r\n\tadd(...vectors: Vector3[]) {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x + vectors.reduce((a, b) => a + b.x, 0),\r\n\t\t\tthis.y + vectors.reduce((a, b) => a + b.y, 0),\r\n\t\t\tthis.z + vectors.reduce((a, b) => a + b.z, 0),\r\n\t\t);\r\n\t}\r\n\r\n\tmultiply(a: Vector3): Vector3;\r\n\tmultiply(a: number, b: number, c: number): Vector3;\r\n\tmultiply(a: Vector3 | number, b?: number, c?: number): Vector3 {\r\n\t\tconst [x, y, z] = (typeof a === 'number') ? [a, b, c] : a.array;\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x * x,\r\n\t\t\tthis.y * y,\r\n\t\t\tthis.z * z,\r\n\t\t);\r\n\t}\r\n\r\n\tsubtract(...vectors: Vector3[]) {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x - vectors.reduce((a, b) => a + b.x, 0),\r\n\t\t\tthis.y - vectors.reduce((a, b) => a + b.y, 0),\r\n\t\t\tthis.z - vectors.reduce((a, b) => a + b.z, 0),\r\n\t\t);\r\n\t}\r\n\r\n\tscale(...scalars: number[]) {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x * scalars.reduce((a, b) => a * b, 1),\r\n\t\t\tthis.y * scalars.reduce((a, b) => a * b, 1),\r\n\t\t\tthis.z * scalars.reduce((a, b) => a * b, 1),\r\n\t\t);\r\n\t}\r\n\r\n\tdivide(...vectors: Vector3[]) {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x / vectors.reduce((a, b) => a * b.x, 1),\r\n\t\t\tthis.y / vectors.reduce((a, b) => a * b.y, 1),\r\n\t\t\tthis.z / vectors.reduce((a, b) => a * b.z, 1),\r\n\t\t);\r\n\t}\r\n\r\n\trotateXY(rad: number) {\r\n\t\tconst [a, b] = this.xy.rotate(rad).array;\r\n\r\n\t\treturn new Vector3(\r\n\t\t\ta,\r\n\t\t\tthis.y,\r\n\t\t\tb,\r\n\t\t);\r\n\t}\r\n\trotateXZ(rad: number) {\r\n\t\tconst [a, b] = this.xz.rotate(rad).array;\r\n\r\n\t\treturn new Vector3(\r\n\t\t\ta,\r\n\t\t\tb,\r\n\t\t\tthis.z,\r\n\t\t);\r\n\t}\r\n\trotateYZ(rad: number) {\r\n\t\tconst [a, b] = this.yz.rotate(rad).array;\r\n\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x,\r\n\t\t\ta,\r\n\t\t\tb,\r\n\t\t);\r\n\t}\r\n\r\n\tmagnitude() {\r\n\t\treturn Math.sqrt(this.magnitudeSqr());\r\n\t}\r\n\r\n\tmagnitudeSqr() {\r\n\t\treturn (this.x * this.x + this.y * this.y + this.z * this.z);\r\n\t}\r\n\r\n\tmod(max: Vector3) {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.x % max.x,\r\n\t\t\tthis.y % max.y,\r\n\t\t\tthis.z % max.z,\r\n\t\t);\r\n\t}\r\n\tclamp(min: Vector3, max: Vector3) {\r\n\t\treturn new Vector3(\r\n\t\t\tUtil.clamp(this.x, min.x, max.x),\r\n\t\t\tUtil.clamp(this.y, min.y, max.y),\r\n\t\t\tUtil.clamp(this.z, min.z, max.z),\r\n\t\t);\r\n\t}\r\n\tnormalize() {\r\n\t\tlet len = this.x * this.x + this.y * this.y + this.z * this.z;\r\n\t\tif (len > 0) {\r\n\t\t\tlen = 1 / Math.sqrt(len);\r\n\t\t}\r\n\t\treturn v3(\r\n\t\t\tthis.x * len,\r\n\t\t\tthis.y * len,\r\n\t\t\tthis.z * len\r\n\t\t);\r\n\t}\r\n\r\n\tapplyQuaternion(q: Quaternion): Vector3 {\r\n\t\tconst x = this.x;\r\n\t\tconst y = this.y;\r\n\t\tconst z = this.z;\r\n\t\tconst qx = q.x;\r\n\t\tconst qy = q.y;\r\n\t\tconst qz = q.z;\r\n\t\tconst qw = q.w;\r\n\r\n\t\t// Calculate quat * vector\r\n\t\tconst ix = qw * x + qy * z - qz * y;\r\n\t\tconst iy = qw * y + qz * x - qx * z;\r\n\t\tconst iz = qw * z + qx * y - qy * x;\r\n\t\tconst iw = -qx * x - qy * y - qz * z;\r\n\r\n\t\t// Calculate result * inverse quat\r\n\t\treturn new Vector3(\r\n\t\t\tix * qw + iw * -qx + iy * -qz - iz * -qy,\r\n\t\t\tiy * qw + iw * -qy + iz * -qx - ix * -qz,\r\n\t\t\tiz * qw + iw * -qz + ix * -qy - iy * -qx\r\n\t\t);\r\n\t}\r\n\r\n\tcross(other: Vector3): Vector3 {\r\n\t\treturn new Vector3(\r\n\t\t\tthis.y * other.z - this.z * other.y,\r\n\t\t\tthis.z * other.x - this.x * other.z,\r\n\t\t\tthis.x * other.y - this.y * other.x\r\n\t\t);\r\n\t}\r\n\r\n\tdot(other: Vector3): number {\r\n\t\treturn this.x * other.x + this.y * other.y + this.z * other.z;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a screen space coordinate to a world position on a plane\r\n\t * @param screenPos Screen position in normalized coordinates (0-1)\r\n\t * @param camera Camera used for the projection\r\n\t * @param planeNormal Normal vector of the plane (must be normalized)\r\n\t * @param planeCoordinate The world coordinate value where the plane intersects the axis defined by the normal\r\n\t * @returns World position where the ray intersects the plane, or null if ray is parallel to plane\r\n\t */\r\n\tpublic static screenToWorldPlane(\r\n\t\tscreenPos: Vector2, \r\n\t\tcamera: Camera, \r\n\t\tplaneNormal: Vector3,\r\n\t\tplaneCoordinate: number\r\n\t): Vector3 | null {\r\n\t\t// Convert screen position to NDC (-1 to 1)\r\n\t\tconst ndcX = screenPos.x * 2 - 1;\r\n\t\tconst ndcY = (1 - screenPos.y) * 2 - 1; // Flip Y back to OpenGL coordinates\r\n\r\n\t\t// Get camera matrices\r\n\t\tconst projMatrix = camera.getProjectionMatrix();\r\n\t\tconst viewMatrix = camera.getViewMatrix();\r\n\r\n\t\t// Create inverse matrices\r\n\t\tconst invProj = projMatrix.clone().invert();\r\n\t\tconst invView = viewMatrix.clone().invert();\r\n\r\n\t\t// Reconstruct position on near plane\r\n\t\tconst nearPoint = v3(ndcX, ndcY, -1);\r\n\t\t\r\n\t\t// Unproject point to get ray direction in view space\r\n\t\tconst rayDir = v3(\r\n\t\t\tinvProj.mat4[0] * nearPoint.x + invProj.mat4[4] * nearPoint.y + invProj.mat4[8] * nearPoint.z + invProj.mat4[12],\r\n\t\t\tinvProj.mat4[1] * nearPoint.x + invProj.mat4[5] * nearPoint.y + invProj.mat4[9] * nearPoint.z + invProj.mat4[13],\r\n\t\t\tinvProj.mat4[2] * nearPoint.x + invProj.mat4[6] * nearPoint.y + invProj.mat4[10] * nearPoint.z + invProj.mat4[14]\r\n\t\t).normalize();\r\n\r\n\t\t// Transform ray to world space\r\n\t\tconst worldRayDir = v3(\r\n\t\t\tinvView.mat4[0] * rayDir.x + invView.mat4[4] * rayDir.y + invView.mat4[8] * rayDir.z,\r\n\t\t\tinvView.mat4[1] * rayDir.x + invView.mat4[5] * rayDir.y + invView.mat4[9] * rayDir.z,\r\n\t\t\tinvView.mat4[2] * rayDir.x + invView.mat4[6] * rayDir.y + invView.mat4[10] * rayDir.z\r\n\t\t).normalize();\r\n\r\n\t\tconst rayOrigin = camera.getPosition();\r\n\r\n\t\t// Calculate intersection with the plane\r\n\t\tconst denom = worldRayDir.dot(planeNormal);\r\n\r\n\t\t// If denominator is close to 0, ray is parallel to the plane\r\n\t\tif (Math.abs(denom) < 1e-6) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// For a given normal (nx,ny,nz) and coordinate c, any point P(x,y,z) on the plane satisfies:\r\n\t\t// If normal is (0,1,0) and coordinate is -1, then y = -1\r\n\t\t// So: dot(P - (normal * coordinate), normal) = 0\r\n\t\tconst planePoint = planeNormal.scale(planeCoordinate);\r\n\t\tconst t = planePoint.subtract(rayOrigin).dot(planeNormal) / denom;\r\n\r\n\t\t// Calculate the intersection point\r\n\t\treturn rayOrigin.add(worldRayDir.scale(t));\r\n\t} \r\n}\r\n", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import { mat4, vec3 } from 'gl-matrix';\r\nimport { Vector3, v3 } from './vector3';\r\nimport { glob } from '../../../game';\r\n\r\nexport function m4() {\r\n    return Matrix4.f();\r\n}\r\n\r\nexport class Matrix4 {\r\n    public mat4: mat4;\r\n    public constructor(source?: mat4) {\r\n        this.mat4 = source ? mat4.clone(source) : mat4.create();\r\n        return this;\r\n    }\r\n\r\n    static f() {\r\n        return new Matrix4();\r\n    }\r\n\r\n    public add(mat: Matrix4) {\r\n        mat4.add(\r\n            this.mat4,\r\n            this.mat4,\r\n            mat.mat4\r\n        );\r\n        return this;\r\n    }\r\n    public subtract(mat: Matrix4) {\r\n        mat4.subtract(\r\n            this.mat4,\r\n            this.mat4,\r\n            mat.mat4\r\n        );\r\n        return this;\r\n    }\r\n    public multiply(mat: Matrix4) {\r\n        mat4.multiply(\r\n            this.mat4,\r\n            this.mat4,\r\n            mat.mat4\r\n        );\r\n        return this;\r\n    }\r\n    public scale(vector: Vector3) {\r\n        mat4.scale(\r\n            this.mat4,\r\n            this.mat4,\r\n            vector.vec\r\n        );\r\n        return this;\r\n    }\r\n    public translate(vector: Vector3) {\r\n        mat4.translate(\r\n            this.mat4,\r\n            this.mat4,\r\n            vector.vec\r\n        );\r\n        return this;\r\n    }\r\n    public invert() {\r\n        mat4.invert(\r\n            this.mat4,\r\n            this.mat4,\r\n        );\r\n        return this;\r\n    }\r\n    public transpose(mat?: Matrix4) {\r\n        mat4.transpose(\r\n            this.mat4,\r\n            mat ? mat.mat4 : this.mat4,\r\n        );\r\n        return this;\r\n    }\r\n    public rotateAxis(angle: number, axis: 0 | 1 | 2) {\r\n        mat4.rotate(\r\n            this.mat4,\r\n            this.mat4,\r\n            angle,\r\n            [[1, 0, 0], [0, 1, 0], [0, 0, 1]][axis] as vec3\r\n        );\r\n        return this;\r\n    }\r\n    public rotate(rotation: Vector3) {\r\n        rotation.forEach((r, i) => {\r\n            this.rotateAxis(r, i as 0 | 1 | 2);\r\n        });\r\n        return this;\r\n    }\r\n    public perspective(fov: number, near: number = 1, far: number = Infinity) {\r\n        mat4.perspective(\r\n            this.mat4,\r\n            fov,\r\n            glob.renderer ? glob.renderer.width / glob.renderer.height : document.body.clientWidth / document.body.clientHeight,\r\n            near,\r\n            far\r\n        );\r\n        return this;\r\n    }\r\n    public ortho(left: number, right: number, bottom: number, top: number, near: number = 1, far: number = Infinity) {\r\n        mat4.ortho(this.mat4,\r\n            left, right, bottom, top, near, far\r\n        );\r\n        return this;\r\n    }\r\n    public clone() {\r\n        return new Matrix4(this.mat4);\r\n    }\r\n\r\n    public static lookAt(camera: Vector3, target: Vector3): Matrix4 {\r\n        let matrix = m4();\r\n        mat4.lookAt(\r\n            matrix.mat4,\r\n            camera.vec,\r\n            target.vec,\r\n            v3(0, 1, 0).vec\r\n        );\r\n        return matrix;\r\n    }\r\n\r\n    public get position() {\r\n        return v3(this.mat4[12], this.mat4[13], this.mat4[14]);\r\n    }\r\n}\r\n", "import { Matrix4 } from './matrix4';\r\nimport { Vector3 } from './vector3';\r\n\r\nexport function q(): Quaternion;\r\nexport function q(x: number, y?: number, z?: number, w?: number): Quaternion;\r\nexport function q(x: [number, number, number, number]): Quaternion;\r\nexport function q(x?: number | [number, number, number, number], y?: number, z?: number, w?: number): Quaternion {\r\n    if (typeof x === 'number') {\r\n        return Quaternion.f(x, y, z, w);\r\n    } else if (typeof x === 'undefined') {\r\n        return Quaternion.f(0);\r\n    } else {\r\n        return Quaternion.f(...x);\r\n    }\r\n}\r\n\r\nexport class Quaternion {\r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n    public w: number;\r\n\r\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n\r\n    public clone(): Quaternion {\r\n        return new Quaternion(this.x, this.y, this.z, this.w);\r\n    }\r\n\r\n    public multiply(q: Quaternion): Quaternion {\r\n        const x = this.w * q.x + this.x * q.w + this.y * q.z - this.z * q.y;\r\n        const y = this.w * q.y - this.x * q.z + this.y * q.w + this.z * q.x;\r\n        const z = this.w * q.z + this.x * q.y - this.y * q.x + this.z * q.w;\r\n        const w = this.w * q.w - this.x * q.x - this.y * q.y - this.z * q.z;\r\n        \r\n        return new Quaternion(x, y, z, w);\r\n    }\r\n\r\n    public toMatrix4(): Matrix4 {\r\n        // Convert quaternion to rotation matrix\r\n        const xx = this.x * this.x;\r\n        const xy = this.x * this.y;\r\n        const xz = this.x * this.z;\r\n        const xw = this.x * this.w;\r\n        \r\n        const yy = this.y * this.y;\r\n        const yz = this.y * this.z;\r\n        const yw = this.y * this.w;\r\n        \r\n        const zz = this.z * this.z;\r\n        const zw = this.z * this.w;\r\n\r\n        return new Matrix4([\r\n            1 - 2 * (yy + zz), 2 * (xy - zw), 2 * (xz + yw), 0,\r\n            2 * (xy + zw), 1 - 2 * (xx + zz), 2 * (yz - xw), 0,\r\n            2 * (xz - yw), 2 * (yz + xw), 1 - 2 * (xx + yy), 0,\r\n            0, 0, 0, 1\r\n        ]);\r\n    }\r\n\r\n    public static fromEuler(x: number, y: number, z: number): Quaternion {\r\n        // Convert Euler angles to quaternion\r\n        const cx = Math.cos(x * 0.5);\r\n        const cy = Math.cos(y * 0.5);\r\n        const cz = Math.cos(z * 0.5);\r\n        const sx = Math.sin(x * 0.5);\r\n        const sy = Math.sin(y * 0.5);\r\n        const sz = Math.sin(z * 0.5);\r\n\r\n        return new Quaternion(\r\n            sx * cy * cz + cx * sy * sz,\r\n            cx * sy * cz - sx * cy * sz,\r\n            cx * cy * sz + sx * sy * cz,\r\n            cx * cy * cz - sx * sy * sz\r\n        );\r\n    }\r\n\r\n    public static fromMatrix(matrix: Matrix4): Quaternion {\r\n        // Implementation needed: Extract quaternion from rotation matrix\r\n        // This is a complex operation that requires careful handling of edge cases\r\n        // For now, returning identity quaternion\r\n        return new Quaternion();\r\n    }\r\n\r\n    public static f(x: number, y: number = x, z: number = x, w: number = 1): Quaternion {\r\n        return new Quaternion(x, y, z, w);\r\n    }\r\n\r\n    public setAxisAngle(axis: Vector3, angle: number): Quaternion {\r\n        const halfAngle = angle * 0.5;\r\n        const s = Math.sin(halfAngle);\r\n        \r\n        this.x = axis.x * s;\r\n        this.y = axis.y * s;\r\n        this.z = axis.z * s;\r\n        this.w = Math.cos(halfAngle);\r\n        \r\n        return this;\r\n    }\r\n\r\n    public toEuler(): Vector3 {\r\n        // convert to euler angles\r\n        const x = Math.atan2(2 * (this.w * this.x + this.y * this.z), 1 - 2 * (this.x * this.x + this.y * this.y));\r\n        const y = Math.asin(2 * (this.w * this.y - this.z * this.x));\r\n        const z = Math.atan2(2 * (this.w * this.z + this.x * this.y), 1 - 2 * (this.y * this.y + this.z * this.z));\r\n        return new Vector3(x, y, z);    \r\n    }\r\n} ", "import { Matrix4, m4 } from './matrix4';\r\nimport { Quaternion } from './quaternion';\r\nimport { Vector3, v3 } from './vector3';\r\nimport { Vector2, v2 } from './vector2';\r\nimport { Camera } from '../../webgl2/camera';\r\nimport { glob } from '../../../game';\r\n\r\nexport class Transform {\r\n    private _localPosition: Vector3;\r\n    private _localRotation: Quaternion; // Note: You'll need to implement a Quaternion class\r\n    private _localScale: Vector3;\r\n    private _anchor: Vector3;\r\n    \r\n    private _worldMatrix: Matrix4;\r\n    private _localMatrix: Matrix4;\r\n    private _isDirty: boolean;\r\n    \r\n    private _parent: Transform | null;\r\n    private _children: Transform[];\r\n\r\n    constructor() {\r\n        this._localPosition = v3(0);\r\n        this._localRotation = new Quaternion(); // Identity quaternion\r\n        this._localScale = v3(1);\r\n        this._anchor = v3(0);\r\n        \r\n        this._worldMatrix = m4();\r\n        this._localMatrix = m4();\r\n        this._isDirty = true;\r\n        \r\n        this._parent = null;\r\n        this._children = [];\r\n    }\r\n\r\n    // Position methods\r\n    public setPosition(position: Vector3): void {\r\n        this._localPosition = position;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    public getLocalPosition(): Vector3 {\r\n        return this._localPosition.clone();\r\n    }\r\n\r\n    public getWorldPosition(): Vector3 {\r\n        return this.getWorldMatrix().position;\r\n    }\r\n\r\n    // Rotation methods\r\n    public setRotation(rotation: Quaternion): void {\r\n        this._localRotation = rotation;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    public getLocalRotation(): Quaternion {\r\n        return this._localRotation.clone();\r\n    }\r\n\r\n    public getWorldRotation(): Quaternion {\r\n        // Extract rotation from world matrix\r\n        return Quaternion.fromMatrix(this.getWorldMatrix());\r\n    }\r\n\r\n    // Scale methods\r\n    public setScale(scale: Vector3): void {\r\n        this._localScale = scale;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    // Anchor point methods\r\n    public setAnchor(anchor: Vector3): void {\r\n        this._anchor = anchor;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    // Hierarchy methods\r\n    public setParent(parent: Transform | null): void {\r\n        if (this._parent) {\r\n            const index = this._parent._children.indexOf(this);\r\n            if (index !== -1) this._parent._children.splice(index, 1);\r\n        }\r\n\r\n        this._parent = parent;\r\n        if (parent) {\r\n            parent._children.push(this);\r\n        }\r\n        this._isDirty = true;\r\n    }\r\n\r\n    // Matrix calculations\r\n    private updateLocalMatrix(): void {\r\n        if (!this._isDirty) return;\r\n\r\n        this._localMatrix = m4();\r\n        \r\n        // Apply anchor point translation\r\n        if (!this._anchor.equals(v3(0))) {\r\n            this._localMatrix.translate(this._anchor.scale(-1));\r\n        }\r\n\r\n        // Apply transformations\r\n        this._localMatrix.translate(this._localPosition);\r\n        this._localMatrix.multiply(this._localRotation.toMatrix4());\r\n        this._localMatrix.scale(this._localScale);\r\n\r\n        // Reverse anchor point translation\r\n        if (!this._anchor.equals(v3(0))) {\r\n            this._localMatrix.translate(this._anchor);\r\n        }\r\n\r\n        this._isDirty = false;\r\n    }\r\n\r\n    public getLocalMatrix(): Matrix4 {\r\n        this.updateLocalMatrix();\r\n        return this._localMatrix.clone();\r\n    }\r\n\r\n    public getWorldMatrix(): Matrix4 {\r\n        this.updateLocalMatrix();\r\n        \r\n        if (this._parent) {\r\n            return this._parent.getWorldMatrix().multiply(this._localMatrix);\r\n        }\r\n        \r\n        return this._localMatrix.clone();\r\n    }\r\n\r\n    public getScreenPosition(camera: Camera, scaleToScreen: boolean = false): Vector2 {\r\n        // Get world position\r\n        const worldPos = this.getWorldPosition().clone();\r\n        \r\n        // Get view-projection matrix\r\n        const viewMatrix = camera.getViewMatrix().clone();\r\n        const projectionMatrix = camera.getProjectionMatrix().clone();\r\n        \r\n        // Combine view and projection matrices\r\n        const viewProjectionMatrix = projectionMatrix.multiply(viewMatrix);\r\n        const m = viewProjectionMatrix.mat4;\r\n        \r\n        // Transform world position to clip space\r\n        const x = m[0] * worldPos.x + m[4] * worldPos.y + m[8] * worldPos.z + m[12];\r\n        const y = m[1] * worldPos.x + m[5] * worldPos.y + m[9] * worldPos.z + m[13];\r\n        const z = m[2] * worldPos.x + m[6] * worldPos.y + m[10] * worldPos.z + m[14];\r\n        const w = m[3] * worldPos.x + m[7] * worldPos.y + m[11] * worldPos.z + m[15];\r\n        \r\n        // Perform perspective divide to get NDC (Normalized Device Coordinates)\r\n        if (Math.abs(w) < 1e-7) return v2(0); // Return zero if point is too close to camera\r\n        \r\n        const ndcX = x / w;\r\n        const ndcY = y / w;\r\n        \r\n        // Convert NDC to screen space (0 to 1 range)\r\n        return v2(\r\n            (ndcX + 1) * 0.5,\r\n            (1 - ndcY) * 0.5  // Flip Y because screen space is top-down\r\n        ).multiply(scaleToScreen ? v2(glob.renderer.width, glob.renderer.height): v2(1));\r\n    }\r\n} ", "import { Vector3 } from './vector3';\r\nimport { v3 } from './vector3';\r\n\r\nexport function hslToRgb(h: number, s: number, l: number): Vector3 {\r\n    let r, g, b;\r\n\r\n    if (s === 0) {\r\n        r = g = b = l;\r\n    } else {\r\n        const hue2rgb = (p: number, q: number, t: number) => {\r\n            if (t < 0) t += 1;\r\n            if (t > 1) t -= 1;\r\n            if (t < 1/6) return p + (q - p) * 6 * t;\r\n            if (t < 1/2) return q;\r\n            if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        };\r\n\r\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        const p = 2 * l - q;\r\n        r = hue2rgb(p, q, h + 1/3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1/3);\r\n    }\r\n\r\n    return v3(r, g, b);\r\n}\r\n\r\nexport function rgbToHue(rgb: Vector3, range: 1|255 = 1): number {\r\n    const r = rgb.x;\r\n    const g = rgb.y;\r\n    const b = rgb.z;\r\n    \r\n    const max = Math.max(r, g, b);\r\n    const min = Math.min(r, g, b);\r\n    \r\n    if (max === min) return 0;\r\n    \r\n    const d = max - min;\r\n    let h = 0;\r\n    \r\n    switch (max) {\r\n        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n        case g: h = (b - r) / d + 2; break;\r\n        case b: h = (r - g) / d + 4; break;\r\n    }\r\n    \r\n    return h / 6 * range;\r\n} ", "import { VertexArray, IndexBuffer } from '../buffer';\r\nimport { ShaderManager } from '../shaderManager';\r\nimport { glob } from '../../../game';\r\nimport { Matrix4 } from '../../util/math/matrix4';\r\nimport { v3, Vector3 } from '../../util/math/vector3';\r\nimport { Transform } from '../../util/math/transform';\r\nimport { Quaternion } from '../../util/math/quaternion';\r\nimport { hslToRgb } from '../../util/math/color';\r\nimport { Material } from '../material';\r\n\r\nexport interface SceneObjectData {\r\n    vao: VertexArray;\r\n    indexBuffer: IndexBuffer;\r\n    shaderManager: ShaderManager;\r\n    drawMode: number;\r\n    drawCount: number;\r\n    drawType: number;\r\n    ignoreLighting: boolean;\r\n}\r\n\r\nexport interface SceneObjectProps {\r\n    position?: Vector3;\r\n    scale?: Vector3;\r\n    rotation?: Quaternion;\r\n    parent?: SceneObject;\r\n    ignoreLighting?: boolean;\r\n    pickColor?: number;\r\n    material?: Material;\r\n}\r\n\r\nexport class SceneObject implements SceneObjectData {\r\n    public readonly vao: VertexArray;\r\n    public readonly indexBuffer: IndexBuffer;\r\n    public readonly shaderManager: ShaderManager;\r\n    public readonly transform: Transform;\r\n    public readonly drawMode: number = glob.ctx.TRIANGLES;\r\n    public readonly drawCount: number;\r\n    public readonly drawType: number = glob.ctx.UNSIGNED_SHORT;\r\n    public readonly ignoreLighting: boolean = false;\r\n    public readonly material?: Material;\r\n    private set pickColor(value: number) {\r\n        if (value === 0) {\r\n            this.pickColorArray = v3(1, 1, 1);\r\n        } else if (value === -1) {\r\n            this.pickColorArray = undefined;\r\n        } else {\r\n            this.pickColorArray = hslToRgb(value/255, 1, 0.5);\r\n        }\r\n    }\r\n    public pickColorArray: Vector3 | undefined;\r\n    public colorMatch(color: Vector3): boolean {\r\n        if (!this.pickColorArray) return false;\r\n        return this.pickColorArray.equals(color);\r\n    }\r\n    public static getAttributeLocation(name: string): number {\r\n        return glob.shaderManager.getAttributeLocation(`a_${name}`);\r\n    }\r\n\r\n    constructor(data: Omit<SceneObjectData, 'shaderManager' | 'drawMode' |'drawType'>, props: SceneObjectProps = {}) {\r\n        this.vao = data.vao;\r\n        this.indexBuffer = data.indexBuffer;\r\n        this.shaderManager = glob.shaderManager;\r\n        this.drawCount = data.drawCount;\r\n        this.ignoreLighting = data.ignoreLighting ?? false;\r\n        this.pickColor = props.pickColor ?? 0;\r\n        this.material = props.material;\r\n\r\n        this.transform = new Transform();\r\n        if (props.position) this.transform.setPosition(props.position);\r\n        if (props.scale) this.transform.setScale(props.scale);\r\n        if (props.rotation) this.transform.setRotation(props.rotation);\r\n        if (props.parent) {\r\n            this.transform.setParent(props.parent.transform);\r\n        }\r\n    }\r\n\r\n    public render(viewMatrix: Matrix4, projectionMatrix: Matrix4) {\r\n        const modelMatrix = this.transform.getWorldMatrix();\r\n\r\n        // Set transform uniforms if they exist in the current shader\r\n        if (this.shaderManager.hasUniform('u_modelMatrix')) {\r\n            this.shaderManager.setUniform('u_modelMatrix', modelMatrix.mat4 as Float32Array);\r\n        }\r\n        if (this.shaderManager.hasUniform('u_viewMatrix')) {\r\n            this.shaderManager.setUniform('u_viewMatrix', viewMatrix.mat4 as Float32Array);\r\n        }\r\n        if (this.shaderManager.hasUniform('u_projectionMatrix')) {\r\n            this.shaderManager.setUniform('u_projectionMatrix', projectionMatrix.mat4 as Float32Array);\r\n        }\r\n\r\n        // Only calculate and set normal matrix if the shader needs it\r\n        if (this.shaderManager.hasUniform('u_normalMatrix')) {\r\n            const normalMatrix = modelMatrix.clone();\r\n            normalMatrix.invert();\r\n            normalMatrix.transpose();\r\n            const normalMat3 = new Float32Array([\r\n                normalMatrix.mat4[0], normalMatrix.mat4[1], normalMatrix.mat4[2],\r\n                normalMatrix.mat4[4], normalMatrix.mat4[5], normalMatrix.mat4[6],\r\n                normalMatrix.mat4[8], normalMatrix.mat4[9], normalMatrix.mat4[10]\r\n            ]);\r\n            this.shaderManager.setUniform('u_normalMatrix', normalMat3);\r\n        }\r\n        \r\n        // Apply material settings if available\r\n        if (this.material && this.shaderManager.hasUniform('u_material.baseColor')) {\r\n            // Set base color\r\n            this.shaderManager.setUniform('u_material.baseColor', new Float32Array(this.material.baseColor.vec));\r\n            \r\n            // Set PBR properties\r\n            this.shaderManager.setUniform('u_material.roughness', this.material.roughness);\r\n            this.shaderManager.setUniform('u_material.metallic', this.material.metallic);\r\n            this.shaderManager.setUniform('u_material.ambientOcclusion', this.material.ambientOcclusion);\r\n            this.shaderManager.setUniform('u_material.emissive', new Float32Array(this.material.emissive.vec));\r\n            \r\n            // Set texture flags\r\n            this.shaderManager.setUniform('u_material.hasAlbedoMap', this.material.albedoMap ? 1 : 0);\r\n            this.shaderManager.setUniform('u_material.hasNormalMap', this.material.normalMap ? 1 : 0);\r\n            this.shaderManager.setUniform('u_material.hasMetallicMap', this.material.metallicMap ? 1 : 0);\r\n            this.shaderManager.setUniform('u_material.hasRoughnessMap', this.material.roughnessMap ? 1 : 0);\r\n            this.shaderManager.setUniform('u_material.hasAoMap', this.material.aoMap ? 1 : 0);\r\n            this.shaderManager.setUniform('u_material.hasEmissiveMap', this.material.emissiveMap ? 1 : 0);\r\n            this.shaderManager.setUniform('u_material.hasEmissiveStrengthMap', this.material.emissiveStrengthMap ? 1 : 0);\r\n\r\n            // Bind textures if available\r\n            if (this.material.albedoMap) {\r\n                glob.ctx.activeTexture(glob.ctx.TEXTURE0);\r\n                glob.ctx.bindTexture(glob.ctx.TEXTURE_2D, this.material.albedoMap);\r\n                this.shaderManager.setUniform('u_material.albedoMap', 0);\r\n            }\r\n            \r\n            if (this.material.normalMap) {\r\n                glob.ctx.activeTexture(glob.ctx.TEXTURE1);\r\n                glob.ctx.bindTexture(glob.ctx.TEXTURE_2D, this.material.normalMap);\r\n                this.shaderManager.setUniform('u_material.normalMap', 1);\r\n            }\r\n            \r\n            if (this.material.metallicMap) {\r\n                glob.ctx.activeTexture(glob.ctx.TEXTURE2);\r\n                glob.ctx.bindTexture(glob.ctx.TEXTURE_2D, this.material.metallicMap);\r\n                this.shaderManager.setUniform('u_material.metallicMap', 2);\r\n            }\r\n            \r\n            if (this.material.roughnessMap) {\r\n                glob.ctx.activeTexture(glob.ctx.TEXTURE3);\r\n                glob.ctx.bindTexture(glob.ctx.TEXTURE_2D, this.material.roughnessMap);\r\n                this.shaderManager.setUniform('u_material.roughnessMap', 3);\r\n            }\r\n            \r\n            if (this.material.aoMap) {\r\n                glob.ctx.activeTexture(glob.ctx.TEXTURE4);\r\n                glob.ctx.bindTexture(glob.ctx.TEXTURE_2D, this.material.aoMap);\r\n                this.shaderManager.setUniform('u_material.aoMap', 4);\r\n            }\r\n            \r\n            if (this.material.emissiveMap) {\r\n                glob.ctx.activeTexture(glob.ctx.TEXTURE5);\r\n                glob.ctx.bindTexture(glob.ctx.TEXTURE_2D, this.material.emissiveMap);\r\n                this.shaderManager.setUniform('u_material.emissiveMap', 5);\r\n            }\r\n            \r\n            if (this.material.emissiveStrengthMap) {\r\n                glob.ctx.activeTexture(glob.ctx.TEXTURE6);\r\n                glob.ctx.bindTexture(glob.ctx.TEXTURE_2D, this.material.emissiveStrengthMap);\r\n                this.shaderManager.setUniform('u_material.emissiveStrengthMap', 6);\r\n            }\r\n        }\r\n\r\n        // Bind VAO\r\n        this.vao.bind();\r\n\r\n        // Draw\r\n        if (this.indexBuffer) {\r\n            // Indexed drawing\r\n            glob.ctx.drawElements(\r\n                this.drawMode,\r\n                this.drawCount,\r\n                this.drawType || glob.ctx.UNSIGNED_INT,\r\n                0\r\n            );\r\n        } else {\r\n            // Non-indexed drawing\r\n            glob.ctx.drawArrays(\r\n                this.drawMode,\r\n                0,\r\n                this.drawCount\r\n            );\r\n        }\r\n\r\n        // Cleanup\r\n        this.vao.unbind();\r\n    }\r\n}", "import { MeshData } from './types';\nimport { VertexArray, VertexBuffer, IndexBuffer } from '../buffer';\nimport { SceneObject, SceneObjectProps } from './sceneObject';\nimport { glob } from '../../../game';\nimport { Material } from '../material';\n\nexport interface BaseMeshProps extends SceneObjectProps {\n    colors?: [number, number, number] | Array<[number, number, number]>;\n    ignoreLighting?: boolean;\n    material?: Material;\n}\n\nexport abstract class BaseMesh extends SceneObject {\n    protected static setupBuffers(meshData: MeshData, props: BaseMeshProps): {\n        vao: VertexArray;\n        indexBuffer: IndexBuffer;\n        drawCount: number;\n        ignoreLighting: boolean;\n    } {\n        // Create and setup VAO\n        const vao = new VertexArray(glob.ctx);\n        vao.bind();\n\n        // Create and setup vertex buffer\n        const vertexBuffer = new VertexBuffer(glob.ctx);\n        vertexBuffer.setData(meshData.vertices);\n        vao.setAttributePointer(\n            SceneObject.getAttributeLocation('position'),\n            3,\n            glob.ctx.FLOAT,\n            false,\n            0,\n            0\n        );\n\n        // Create and setup color buffer\n        const colorBuffer = new VertexBuffer(glob.ctx);\n        const colors = meshData.colors || new Float32Array(Array(meshData.vertices.length).fill(1.0));\n        colorBuffer.setData(colors);\n        vao.setAttributePointer(\n            SceneObject.getAttributeLocation('color'),\n            3,\n            glob.ctx.FLOAT,\n            false,\n            0,\n            0\n        );\n\n        // Create and setup normal buffer\n        const normalBuffer = new VertexBuffer(glob.ctx);\n        const normals = meshData.normals || new Float32Array(Array(meshData.vertices.length).fill(0.0, 0, meshData.vertices.length / 3 * 3));\n        normalBuffer.setData(normals);\n        vao.setAttributePointer(\n            SceneObject.getAttributeLocation('normal'),\n            3,\n            glob.ctx.FLOAT,\n            false,\n            0,\n            0\n        );\n\n        // Create and setup texture coordinate buffer\n        const texCoordBuffer = new VertexBuffer(glob.ctx);\n        const texCoords = meshData.texCoords || new Float32Array(Array(meshData.vertices.length / 3 * 2).fill(0.0));\n        texCoordBuffer.setData(texCoords);\n        vao.setAttributePointer(\n            SceneObject.getAttributeLocation('texCoord'),\n            2,\n            glob.ctx.FLOAT,\n            false,\n            0,\n            0\n        );\n\n        // Create and setup tangent buffer if available\n        if (meshData.tangents) {\n            const tangentBuffer = new VertexBuffer(glob.ctx);\n            tangentBuffer.setData(meshData.tangents);\n            vao.setAttributePointer(\n                SceneObject.getAttributeLocation('tangent'),\n                3,\n                glob.ctx.FLOAT,\n                false,\n                0,\n                0\n            );\n        }\n\n        // Create and setup bitangent buffer if available\n        if (meshData.bitangents) {\n            const bitangentBuffer = new VertexBuffer(glob.ctx);\n            bitangentBuffer.setData(meshData.bitangents);\n            vao.setAttributePointer(\n                SceneObject.getAttributeLocation('bitangent'),\n                3,\n                glob.ctx.FLOAT,\n                false,\n                0,\n                0\n            );\n        }\n\n        // Create and setup index buffer\n        const indexBuffer = new IndexBuffer(glob.ctx);\n        indexBuffer.setData(meshData.indices!);\n\n        return {\n            vao,\n            indexBuffer,\n            drawCount: meshData.indices!.length,\n            ignoreLighting: props.ignoreLighting ?? false\n        };\n    }\n\n    protected static createSceneObject(meshData: MeshData, props: BaseMeshProps): SceneObject {\n        const bufferData = this.setupBuffers(meshData, props);\n        return new SceneObject(bufferData, props);\n    }\n\n    public constructor(meshData: MeshData, props: BaseMeshProps = {}) {\n        super(BaseMesh.setupBuffers(meshData, props), props);\n    }\n} ", "import { Vector3, v3 } from '../util/math/vector3';\r\n\r\n/**\r\n * PBR Material class using physically-based rendering properties\r\n */\r\nexport class Material {\r\n    // Base color (albedo) of the material\r\n    public baseColor?: Vector3;\r\n    \r\n    // Controls how rough/smooth the material is (0 = smooth, 1 = rough)\r\n    public roughness?: number;\r\n    \r\n    // Controls how metallic the material is (0 = dielectric, 1 = metal)\r\n    public metallic?: number;\r\n    \r\n    // Controls ambient occlusion effect (1 = no occlusion, 0 = fully occluded)\r\n    public ambientOcclusion: number;\r\n    \r\n    // Controls the emission color of the material\r\n    public emissive?: Vector3;\r\n    \r\n    // Texture maps\r\n    public albedoMap?: WebGLTexture;\r\n    public normalMap?: WebGLTexture;\r\n    public metallicMap?: WebGLTexture;\r\n    public roughnessMap?: WebGLTexture;\r\n    public aoMap?: WebGLTexture;\r\n    public emissiveMap?: WebGLTexture;\r\n    public emissiveStrengthMap?: WebGLTexture;\r\n\r\n    constructor({\r\n        baseColor = v3(0.8, 0.8, 0.8),\r\n        roughness = 0.5,\r\n        metallic = 0.0,\r\n        ambientOcclusion = 1.0,\r\n        emissive = v3(0.0, 0.0, 0.0),\r\n        albedoMap,\r\n        normalMap,\r\n        metallicMap,\r\n        roughnessMap,\r\n        aoMap,\r\n        emissiveMap,\r\n        emissiveStrengthMap\r\n    }: {\r\n        baseColor?: Vector3;\r\n        roughness?: number;\r\n        metallic?: number;\r\n        ambientOcclusion?: number;\r\n        emissive?: Vector3;\r\n        albedoMap?: WebGLTexture;\r\n        normalMap?: WebGLTexture;\r\n        metallicMap?: WebGLTexture;\r\n        roughnessMap?: WebGLTexture;\r\n        aoMap?: WebGLTexture;\r\n        emissiveMap?: WebGLTexture;\r\n        emissiveStrengthMap?: WebGLTexture;\r\n    } = {}) {\r\n        this.baseColor = baseColor;\r\n        this.roughness = roughness;\r\n        this.metallic = metallic;\r\n        this.ambientOcclusion = ambientOcclusion;\r\n        this.emissive = emissive;\r\n        this.albedoMap = albedoMap;\r\n        this.normalMap = normalMap;\r\n        this.metallicMap = metallicMap;\r\n        this.roughnessMap = roughnessMap;\r\n        this.aoMap = aoMap;\r\n        this.emissiveMap = emissiveMap;\r\n        this.emissiveStrengthMap = emissiveStrengthMap;\r\n    }\r\n\r\n    private static _materials: {\r\n        [key: string]: ConstructorParameters<typeof Material>[0]\r\n    } = {\r\n        'plastic': {\r\n            baseColor: v3(0.8, 0.8, 0.8),\r\n            roughness: 0.4,\r\n            metallic: 0.4,\r\n            ambientOcclusion: 1.0,\r\n            emissive: v3(0.0, 0.0, 0.0)\r\n        },\r\n        'metal': {\r\n            baseColor: v3(0.8, 0.8, 0.8),\r\n            roughness: 0.3,\r\n            metallic: 1.0,\r\n            ambientOcclusion: 1.0,\r\n            emissive: v3(0.0, 0.0, 0.0)\r\n        },\r\n        'rough': {\r\n            baseColor: v3(0.8, 0.8, 0.8),\r\n            roughness: 0.4,\r\n            metallic: 0.5,\r\n            ambientOcclusion: 1.0,\r\n            emissive: v3(0.0, 0.0, 0.0)\r\n        }\r\n    }\r\n\r\n    public static library(name: 'plastic' | 'metal' | 'rough', color: Vector3): Material {\r\n        const material = new Material(this._materials[name]);\r\n        material.baseColor = color;\r\n        return material;\r\n    }\r\n} ", "import { MeshData } from './types';\r\nimport { SceneObject } from './sceneObject';\r\nimport { BaseMesh, BaseMeshProps } from './baseMesh';\r\nimport { v3 } from '../../util/math/vector3';\r\nimport { Material } from '../material';\r\n\r\nexport interface IcoSphereProps extends BaseMeshProps {\r\n    subdivisions?: number;  // Number of times to subdivide the icosahedron (0-5 recommended)\r\n    color?: [number, number, number];\r\n    smoothShading?: boolean;\r\n}\r\n\r\nexport class IcoSphere extends BaseMesh {\r\n    private static readonly X = 0.525731112119133606;\r\n    private static readonly Z = 0.850650808352039932;\r\n\r\n    // Initial icosahedron vertices\r\n    private static readonly baseVertices = [\r\n        [-this.X, 0.0, this.Z], [this.X, 0.0, this.Z], [-this.X, 0.0, -this.Z], [this.X, 0.0, -this.Z],\r\n        [0.0, this.Z, this.X], [0.0, this.Z, -this.X], [0.0, -this.Z, this.X], [0.0, -this.Z, -this.X],\r\n        [this.Z, this.X, 0.0], [-this.Z, this.X, 0.0], [this.Z, -this.X, 0.0], [-this.Z, -this.X, 0.0]\r\n    ];\r\n\r\n    // Initial icosahedron indices\r\n    private static readonly baseIndices = [\r\n        1,4,0,  4,9,0,  4,5,9,  8,5,4,  1,8,4,\r\n        1,10,8, 10,3,8, 8,3,5,  3,2,5,  3,7,2,\r\n        3,10,7, 10,6,7, 6,11,7, 6,0,11, 6,1,0,\r\n        10,1,6, 11,0,9, 2,11,9, 5,2,9,  11,2,7\r\n    ];\r\n\r\n    protected static normalize(v: number[]): number[] {\r\n        const length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\r\n        return [v[0] / length, v[1] / length, v[2] / length];\r\n    }\r\n\r\n    private static midpoint(v1: number[], v2: number[]): number[] {\r\n        return this.normalize([\r\n            (v1[0] + v2[0]) / 2,\r\n            (v1[1] + v2[1]) / 2,\r\n            (v1[2] + v2[2]) / 2\r\n        ]);\r\n    }\r\n\r\n    private static generateMeshData(\r\n        subdivisions: number = 0,\r\n        smoothShading: boolean = true,\r\n        color: [number, number, number] = [0.8, 0.2, 0.2]\r\n    ): MeshData {\r\n        let vertices: number[][] = [...this.baseVertices];\r\n        let indices: number[] = [...this.baseIndices];\r\n        const vertexMap = new Map<string, number>();\r\n\r\n        // Helper to get or create midpoint vertex\r\n        const getMiddlePoint = (v1Index: number, v2Index: number): number => {\r\n            const key = `${Math.min(v1Index, v2Index)}_${Math.max(v1Index, v2Index)}`;\r\n            if (vertexMap.has(key)) {\r\n                return vertexMap.get(key)!;\r\n            }\r\n\r\n            const p1 = vertices[v1Index];\r\n            const p2 = vertices[v2Index];\r\n            const middle = this.midpoint(p1, p2);\r\n            \r\n            const i = vertices.length;\r\n            vertices.push(middle);\r\n            vertexMap.set(key, i);\r\n            return i;\r\n        };\r\n\r\n        // Subdivide\r\n        for (let i = 0; i < subdivisions; i++) {\r\n            const newIndices: number[] = [];\r\n            \r\n            for (let j = 0; j < indices.length; j += 3) {\r\n                const a = indices[j];\r\n                const b = indices[j + 1];\r\n                const c = indices[j + 2];\r\n\r\n                const ab = getMiddlePoint(a, b);\r\n                const bc = getMiddlePoint(b, c);\r\n                const ca = getMiddlePoint(c, a);\r\n\r\n                newIndices.push(\r\n                    a, ab, ca,\r\n                    b, bc, ab,\r\n                    c, ca, bc,\r\n                    ab, bc, ca\r\n                );\r\n            }\r\n            \r\n            indices = newIndices;\r\n        }\r\n\r\n        // Scale vertices to radius 0.5\r\n        vertices = vertices.map(v => [v[0] * 0.5, v[1] * 0.5, v[2] * 0.5]);\r\n\r\n        // Generate flat arrays and normals\r\n        const flatVertices: number[] = [];\r\n        const normals: number[] = [];\r\n        const generatedColors: number[] = [];\r\n        const texCoords: number[] = [];\r\n        const tangents: number[] = [];\r\n        const bitangents: number[] = [];\r\n\r\n        if (smoothShading) {\r\n            // For smooth shading, use vertices directly as normals\r\n            vertices.forEach(v => {\r\n                flatVertices.push(...v);\r\n                const normal = this.normalize(v);\r\n                normals.push(...normal);\r\n                generatedColors.push(...color);\r\n                \r\n                // Generate basic texture coordinates based on spherical projection\r\n                const u = 0.5 + Math.atan2(v[2], v[0]) / (2 * Math.PI);\r\n                const vCoord = 0.5 - Math.asin(v[1]) / Math.PI;\r\n                texCoords.push(u, vCoord);\r\n                \r\n                // Calculate tangent and bitangent for normal mapping\r\n                // Tangent is perpendicular to normal and points around the sphere horizontally\r\n                const tangent = [-v[2], 0, v[0]];\r\n                const tangentLength = Math.sqrt(tangent[0] * tangent[0] + tangent[2] * tangent[2]);\r\n                if (tangentLength > 0.01) {\r\n                    tangent[0] /= tangentLength;\r\n                    tangent[2] /= tangentLength;\r\n                } else {\r\n                    // For poles, use a fixed tangent\r\n                    tangent[0] = 1;\r\n                    tangent[1] = 0;\r\n                    tangent[2] = 0;\r\n                }\r\n                tangents.push(...tangent);\r\n                \r\n                // Bitangent is cross product of normal and tangent\r\n                const bitangent = [\r\n                    normal[1] * tangent[2] - normal[2] * tangent[1],\r\n                    normal[2] * tangent[0] - normal[0] * tangent[2],\r\n                    normal[0] * tangent[1] - normal[1] * tangent[0]\r\n                ];\r\n                bitangents.push(...bitangent);\r\n            });\r\n        } else {\r\n            // For flat shading, create separate vertices for each face\r\n            const newIndices: number[] = [];\r\n            for (let i = 0; i < indices.length; i += 3) {\r\n                const v1 = vertices[indices[i]];\r\n                const v2 = vertices[indices[i + 1]];\r\n                const v3 = vertices[indices[i + 2]];\r\n\r\n                // Calculate face normal\r\n                const dx1 = v2[0] - v1[0], dy1 = v2[1] - v1[1], dz1 = v2[2] - v1[2];\r\n                const dx2 = v3[0] - v1[0], dy2 = v3[1] - v1[1], dz2 = v3[2] - v1[2];\r\n                const normal = this.normalize([\r\n                    dy1 * dz2 - dz1 * dy2,\r\n                    dz1 * dx2 - dx1 * dz2,\r\n                    dx1 * dy2 - dy1 * dx2\r\n                ]);\r\n\r\n                // Each vertex needs to be duplicated for flat shading\r\n                const baseIndex = flatVertices.length / 3;\r\n                \r\n                // Calculate tangent based on texture coordinates\r\n                const tangent = [1, 0, 0]; // Default tangent along x-axis for flat shading\r\n                const bitangent = [0, 1, 0]; // Default bitangent along y-axis\r\n                \r\n                // Add vertices in correct winding order\r\n                [v1, v2, v3].forEach(vertex => {\r\n                    flatVertices.push(...vertex);\r\n                    normals.push(...normal);\r\n                    generatedColors.push(...color);\r\n                    \r\n                    const u = 0.5 + Math.atan2(vertex[2], vertex[0]) / (2 * Math.PI);\r\n                    const vCoord = 0.5 - Math.asin(vertex[1]) / Math.PI;\r\n                    texCoords.push(u, vCoord);\r\n                    \r\n                    tangents.push(...tangent);\r\n                    bitangents.push(...bitangent);\r\n                });\r\n\r\n                // Add indices for this face\r\n                newIndices.push(baseIndex, baseIndex + 1, baseIndex + 2);\r\n            }\r\n            indices = newIndices;\r\n        }\r\n\r\n        return {\r\n            vertices: new Float32Array(flatVertices),\r\n            indices: new Uint16Array(indices),\r\n            normals: new Float32Array(normals),\r\n            colors: new Float32Array(generatedColors),\r\n            texCoords: new Float32Array(texCoords),\r\n            tangents: new Float32Array(tangents),\r\n            bitangents: new Float32Array(bitangents)\r\n        };\r\n    }\r\n\r\n    public static create(props: Omit<IcoSphereProps, 'colors'> = {}): SceneObject {\r\n        // Create default material based on color if no material provided\r\n        if (!props.material && props.color) {\r\n            const baseColor = v3(props.color[0], props.color[1], props.color[2]);\r\n            props = {\r\n                ...props,\r\n                material: new Material({\r\n                    baseColor,\r\n                    roughness: 0.5,\r\n                    metallic: 0.0,\r\n                    ambientOcclusion: 1.0,\r\n                    emissive: v3(0, 0, 0)\r\n                })\r\n            };\r\n        }\r\n        \r\n        // Determine which color to use for the mesh generation\r\n        let meshColor: [number, number, number];\r\n        if (props.material) {\r\n            // Use material's baseColor for mesh generation\r\n            const { baseColor } = props.material;\r\n            meshColor = [baseColor.x, baseColor.y, baseColor.z];\r\n        } else if (props.color) {\r\n            // Use provided color\r\n            meshColor = props.color;\r\n        } else {\r\n            // Default color\r\n            meshColor = [0.8, 0.2, 0.2];\r\n        }\r\n        \r\n        const meshData = this.generateMeshData(\r\n            props.subdivisions ?? 0,\r\n            props.smoothShading ?? true,\r\n            meshColor\r\n        );\r\n        \r\n        const sceneObject = this.createSceneObject(meshData, props);\r\n        \r\n        // The material is now set in the SceneObject constructor\r\n        // and applied during each render call\r\n        \r\n        return sceneObject;\r\n    }\r\n} ", "export class ShadowMap {\r\n    private framebuffer: WebGLFramebuffer;\r\n    private depthTexture: WebGLTexture;\r\n    private size: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, size: number = 2048) {\r\n        this.size = size;\r\n        \r\n        // Create depth texture with high precision format\r\n        this.depthTexture = gl.createTexture()!;\r\n        gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            gl.DEPTH_COMPONENT24,  // Use 24-bit depth for better precision\r\n            size,\r\n            size,\r\n            0,\r\n            gl.DEPTH_COMPONENT,\r\n            gl.UNSIGNED_INT,       // Use unsigned int format for wider range\r\n            null\r\n        );\r\n        \r\n        // Use NEAREST filtering for more precise depth values\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        \r\n        // Use CLAMP_TO_EDGE to avoid sampling outside shadow map\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        \r\n        // Remove comparison mode - shader is using regular texture() calls\r\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n        // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL);\r\n\r\n        // Create and setup framebuffer\r\n        this.framebuffer = gl.createFramebuffer()!;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n        gl.framebufferTexture2D(\r\n            gl.FRAMEBUFFER,\r\n            gl.DEPTH_ATTACHMENT,\r\n            gl.TEXTURE_2D,\r\n            this.depthTexture,\r\n            0\r\n        );\r\n\r\n        // No color buffer needed for shadow map\r\n        gl.drawBuffers([gl.NONE]);\r\n        gl.readBuffer(gl.NONE);\r\n\r\n        // Check framebuffer status\r\n        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n        if (status !== gl.FRAMEBUFFER_COMPLETE) {\r\n            console.error('Framebuffer not complete:', status);\r\n        }\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n\r\n    bind(gl: WebGL2RenderingContext) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n        gl.viewport(0, 0, this.size, this.size);\r\n        \r\n        // Clear depth buffer with maximum depth\r\n        gl.clearDepth(1.0);\r\n        gl.clear(gl.DEPTH_BUFFER_BIT);\r\n        \r\n        // Set up depth test - important for proper shadow maps\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.depthFunc(gl.LESS);\r\n        gl.depthMask(true);\r\n        \r\n        // Important: When rendering shadows, disable color writing\r\n        // We only want to write to the depth buffer\r\n        gl.colorMask(false, false, false, false);\r\n    }\r\n\r\n    unbind(gl: WebGL2RenderingContext) {\r\n        // Re-enable color writing when we're done with shadow map\r\n        gl.colorMask(true, true, true, true);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n\r\n    bindDepthTexture(gl: WebGL2RenderingContext, textureUnit: number) {\r\n        gl.activeTexture(gl.TEXTURE0 + textureUnit);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.depthTexture);\r\n    }\r\n\r\n    getDepthTexture(): WebGLTexture {\r\n        return this.depthTexture;\r\n    }\r\n\r\n    getSize(): number {\r\n        return this.size;\r\n    }\r\n} ", "import { glob } from '../../../game';\r\nimport { Matrix4 } from '../../util/math/matrix4';\r\nimport { Quaternion } from '../../util/math/quaternion';\r\nimport { v3, Vector3 } from '../../util/math/vector3';\r\nimport { Arrow } from '../meshes/arrow';\r\nimport { IcoSphere } from '../meshes/icoSphere';\r\nimport { SceneObject } from '../meshes/sceneObject';\r\nimport { Scene } from '../scene';\r\nimport { ShadowMap } from './shadowMap';\r\n\r\nexport enum LightType {\r\n    AMBIENT = 0,\r\n    DIRECTIONAL = 1,\r\n    POINT = 2,\r\n    SPOT = 3,\r\n    INACTIVE = 4\r\n}\r\n\r\nexport interface LightData {\r\n    color: Vector3;\r\n    intensity: number;\r\n    enabled?: boolean;\r\n}\r\n\r\nexport interface DirectionalLightData extends LightData {\r\n    direction: Vector3;\r\n}\r\n\r\nexport interface PointLightData extends LightData {\r\n    position: Vector3;\r\n    constant: number;\r\n    linear: number;\r\n    quadratic: number;\r\n}\r\n\r\nexport interface SpotLightData extends PointLightData {\r\n    direction: Vector3;\r\n    cutOff: number;\r\n    outerCutOff: number;\r\n}\r\n\r\nexport class Light {\r\n    protected type: LightType;\r\n    protected color: Vector3;\r\n    protected intensity: number;\r\n    protected enabled: boolean = true;\r\n\r\n    constructor({ \r\n        color = v3(1, 1, 1), \r\n        intensity = 1.0,\r\n        enabled = true \r\n    }: { \r\n        color?: Vector3, \r\n        intensity?: number,\r\n        enabled?: boolean \r\n    } = {}) {\r\n        this.color = color;\r\n        this.intensity = intensity;\r\n        this.enabled = enabled;\r\n        this.type = LightType.INACTIVE;\r\n    }\r\n\r\n    public getIntensity(): number {\r\n        return this.enabled ? this.intensity : 0;\r\n    }\r\n\r\n    public isEnabled(): boolean {\r\n        return this.enabled;\r\n    }\r\n\r\n    public setEnabled(enabled: boolean): void {\r\n        this.enabled = enabled;\r\n    }\r\n\r\n    getType(): LightType {\r\n        return this.enabled ? this.type : LightType.INACTIVE;\r\n    }\r\n\r\n    getData(): LightData {\r\n        return {\r\n            color: this.color,\r\n            intensity: this.getIntensity(),\r\n            enabled: this.enabled\r\n        };\r\n    }\r\n\r\n    getShadowMap(): ShadowMap | null {\r\n        return this.enabled ? null : null;\r\n    }\r\n}\r\n\r\nexport class AmbientLight extends Light {\r\n    constructor({ color = v3(1, 1, 1), intensity = 0.1 }: { color?: Vector3, intensity?: number; } = {}) {\r\n        super({ color, intensity });\r\n        this.type = LightType.AMBIENT;\r\n    }\r\n}\r\n\r\nexport class DirectionalLight extends Light {\r\n    protected direction: Vector3;\r\n    protected shadowMap: ShadowMap;\r\n    protected lightProjection: Matrix4;\r\n\r\n    constructor({\r\n        direction = v3(0, -1, 0),\r\n        color = v3(1, 1, 1),\r\n        intensity = 1.0,\r\n        enabled = true\r\n    }: {\r\n        direction?: Vector3;\r\n        color?: Vector3;\r\n        intensity?: number;\r\n        enabled?: boolean;\r\n    } = {}) {\r\n        super({ color, intensity, enabled });\r\n        this.direction = direction.normalize();\r\n        this.type = LightType.DIRECTIONAL;\r\n        this.shadowMap = new ShadowMap(glob.ctx, 4096); // High resolution for directional shadows\r\n\r\n        // Create orthographic projection matrix for the light\r\n        this.lightProjection = new Matrix4().ortho(\r\n            -20, 20,    // left, right\r\n            -20, 20,    // bottom, top\r\n            0.1, 200.0  // near, far\r\n        );\r\n    }\r\n\r\n    getData(): DirectionalLightData {\r\n        return {\r\n            ...super.getData(),\r\n            direction: this.direction\r\n        };\r\n    }\r\n\r\n    getDirection(): Vector3 {\r\n        return this.direction;\r\n    }\r\n\r\n    setDirection(direction: Vector3): void {\r\n        this.direction = direction.normalize();\r\n    }\r\n\r\n    getLightSpaceMatrix(): Matrix4 {\r\n        // Calculate view matrix from light's direction\r\n        const lightView = Matrix4.lookAt(\r\n            this.direction.scale(-10), // Position light far enough away in opposite direction\r\n            v3(0, 0, 0)               // Look at scene center\r\n        );\r\n\r\n        return this.lightProjection.multiply(lightView);\r\n    }\r\n\r\n    getShadowMap(): ShadowMap {\r\n        return this.shadowMap;\r\n    }\r\n\r\n    public lookAt(from: Vector3, target: Vector3) {\r\n        const direction = target.subtract(from).normalize();\r\n\r\n        // Calculate rotation axis and angle\r\n        const defaultDir = v3(0, -1, 0); // Light points down by default\r\n        const rotationAxis = defaultDir.cross(direction).normalize();\r\n        const angle = Math.acos(defaultDir.y * direction.y + defaultDir.x * direction.x + defaultDir.z * direction.z);\r\n\r\n        this.direction = new Quaternion().setAxisAngle(rotationAxis, angle).toEuler();\r\n    }\r\n}\r\n\r\nexport class PointLight extends Light {\r\n    protected position: Vector3;\r\n    protected constant: number;\r\n    protected linear: number;\r\n    protected quadratic: number;\r\n    protected shadowMap: ShadowMap;\r\n    protected lightProjection: Matrix4;\r\n    protected mesh: SceneObject;\r\n\r\n    constructor({\r\n        position = v3(0, 0, 0),\r\n        color = v3(1, 1, 1),\r\n        intensity = 5.0, // Increased intensity for PBR\r\n        attenuation = { constant: 1.0, linear: 0.22, quadratic: 0.20 }, // Better PBR attenuation values\r\n        meshContainer,\r\n        enabled = true\r\n    }: {\r\n        position?: Vector3;\r\n        color?: Vector3;\r\n        intensity?: number;\r\n        attenuation?: {\r\n            constant: number;\r\n            linear: number;\r\n            quadratic: number;\r\n        };\r\n        meshContainer?: Scene;\r\n        enabled?: boolean;\r\n    } = {}) {\r\n        super({ color, intensity, enabled });\r\n        this.position = position;\r\n        this.constant = attenuation.constant;\r\n        this.linear = attenuation.linear;\r\n        this.quadratic = attenuation.quadratic;\r\n        this.type = LightType.POINT;\r\n        this.shadowMap = new ShadowMap(glob.ctx, 4096);\r\n\r\n        // Create orthographic projection matrix for the light\r\n        this.lightProjection = new Matrix4().ortho(\r\n            -20, 20,    // left, right - doubled for wider coverage\r\n            -20, 20,    // bottom, top - doubled for wider coverage\r\n            0.1, 200.0  // near, far - increased far plane for deeper shadows\r\n        );\r\n\r\n        if (meshContainer) {\r\n            // Create a small emissive sphere to represent the light\r\n            meshContainer.add(this.mesh = IcoSphere.create({\r\n                position: position,\r\n                scale: v3(0.2, 0.2, 0.2),\r\n                smoothShading: true,\r\n                subdivisions: 0,\r\n                ignoreLighting: false,\r\n                pickColor: -1,\r\n                color: [color.x, color.y, color.z]\r\n            }));\r\n        }\r\n    }\r\n\r\n    public setPosition(position: Vector3) {\r\n        this.position = position;\r\n        if (this.mesh) {\r\n            this.mesh.transform.setPosition(position);\r\n        }\r\n    }\r\n\r\n    public getPosition(): Vector3 {\r\n        return this.position;\r\n    }\r\n\r\n    getData(): PointLightData {\r\n        return {\r\n            ...super.getData(),\r\n            position: this.position,\r\n            constant: this.constant,\r\n            linear: this.linear,\r\n            quadratic: this.quadratic\r\n        };\r\n    }\r\n\r\n    getLightSpaceMatrix(): Matrix4 {\r\n        // Calculate view matrix from light position to scene center\r\n        const lightView = Matrix4.lookAt(\r\n            this.position,      // Light position\r\n            v3(0, 0, 0)        // Looking at scene center\r\n        );\r\n\r\n        // Get distance to determine appropriate frustum size\r\n        const distanceToCenter = Math.sqrt(\r\n            this.position.x * this.position.x + \r\n            this.position.y * this.position.y + \r\n            this.position.z * this.position.z\r\n        );\r\n        \r\n        // Create a much larger orthographic projection to ensure it captures everything\r\n        // Make near plane much closer and far plane much farther\r\n        this.lightProjection = new Matrix4().ortho(\r\n            -20, 20,     // Much wider left/right bounds\r\n            -20, 20,     // Much wider top/bottom bounds\r\n            0.01,        // Much closer near plane (was 0.1 or higher)\r\n            50           // Much farther far plane \r\n        );\r\n\r\n        return this.lightProjection.multiply(lightView);  // projection * view order is correct\r\n    }\r\n\r\n\r\n    getShadowMap(): ShadowMap {\r\n        return this.shadowMap;\r\n    }\r\n}\r\n\r\nexport class SpotLight extends PointLight {\r\n    private rotation: Quaternion;\r\n    private cutOff: number;\r\n    private outerCutOff: number;\r\n    arrow: Arrow;\r\n\r\n    constructor(\r\n        { position = v3(0, 0, 0),\r\n            direction = v3(0, -1, 0),\r\n            color = v3(1, 1, 1),\r\n            intensity = 8.0, // Increased intensity for PBR\r\n            cutOff = Math.cos(Math.PI / 6), // 30 degrees\r\n            outerCutOff = Math.cos(Math.PI / 4), // 45 degrees\r\n            meshContainer,\r\n            enabled = true,\r\n            lookAt\r\n        }: {\r\n            position?: Vector3;\r\n            direction?: Vector3;\r\n            color?: Vector3;\r\n            intensity?: number;\r\n            cutOff?: number;\r\n            outerCutOff?: number;\r\n            meshContainer?: Scene;\r\n            enabled?: boolean;\r\n            lookAt?: Vector3;\r\n        } = {}) {\r\n\r\n        // Update attenuation for better PBR values\r\n        super({ \r\n            position, \r\n            color, \r\n            intensity, \r\n            attenuation: { \r\n                constant: 1.0, \r\n                linear: 0.22, \r\n                quadratic: 0.20 \r\n            }, \r\n            meshContainer,\r\n            enabled\r\n        });\r\n        \r\n        this.rotation = new Quaternion();\r\n        this.cutOff = cutOff;\r\n        this.outerCutOff = outerCutOff;\r\n        this.type = LightType.SPOT;\r\n\r\n        if (this.mesh) {\r\n            // Create a visual indicator for the spotlight direction\r\n            this.arrow = new Arrow(meshContainer, {\r\n                shaftColor: [color.x * 0.8, color.y * 0.8, color.z * 0.8],\r\n                headColor: [color.x, color.y, color.z],\r\n                length: 0.5,\r\n                shaftRadius: 0.05,\r\n                headLength: 0.15,\r\n                headRadius: 0.12,\r\n                sides: 8,\r\n                position: this.position,\r\n                rotation: this.rotation,\r\n                lookAt: v3(0, 0, 0),\r\n                ignoreLighting: true,\r\n                pickColor: -1,\r\n            });\r\n        }\r\n\r\n        if (direction && !lookAt) {\r\n            this.lookAt(position.add(direction));\r\n        }\r\n\r\n        if (lookAt) {\r\n            this.lookAt(lookAt);\r\n        }\r\n    }\r\n\r\n    getData(): SpotLightData {\r\n        // Convert rotation to direction vector\r\n        const defaultDir = v3(0, -1, 0);\r\n        const direction = defaultDir.applyQuaternion(this.rotation);\r\n\r\n        return {\r\n            ...super.getData(),\r\n            direction: direction,\r\n            cutOff: this.cutOff,\r\n            outerCutOff: this.outerCutOff\r\n        };\r\n    }\r\n\r\n    public lookAt(target: Vector3) {\r\n        const direction = target.subtract(this.position).normalize();\r\n\r\n        // Calculate rotation axis and angle\r\n        const defaultDir = v3(0, -1, 0); // Light points down by default\r\n        const rotationAxis = defaultDir.cross(direction).normalize();\r\n        const angle = Math.acos(defaultDir.y * direction.y + defaultDir.x * direction.x + defaultDir.z * direction.z);\r\n\r\n        this.rotation = new Quaternion().setAxisAngle(rotationAxis, angle);\r\n\r\n        if (this.arrow) {\r\n            this.arrow.lookAt(target);\r\n        }\r\n    }\r\n\r\n    public setPosition(x: number, y: number, z: number): void;\r\n    public setPosition(position: Vector3): void;\r\n    public setPosition(x: number | Vector3, y?: number, z?: number): void {\r\n        if (typeof x === 'number') {\r\n            super.setPosition(v3(x, y, z));\r\n        } else {\r\n            super.setPosition(x);\r\n        }\r\n        if (this.arrow) {\r\n            this.arrow.transform.setPosition(super.getPosition());\r\n        }\r\n    }\r\n\r\n    public getPosition(): Vector3 {\r\n        return this.position;\r\n    }\r\n\r\n    public getRotation(): Quaternion {\r\n        return this.rotation.clone();\r\n    }\r\n\r\n    public setRotation(rotation: Quaternion) {\r\n        this.rotation = rotation;\r\n    }\r\n} ", "import { Light, LightType, DirectionalLight, PointLight, SpotLight, AmbientLight } from './light';\nimport { ShaderManager } from '../shaderManager';\nimport { v3 } from '../../util/math/vector3';\n\nexport class LightManager {\n    private lights: Light[] = [];\n    private shaderManager: ShaderManager;\n    private ambientLight: AmbientLight | null = null;\n    private readonly MAX_LIGHTS = 10;\n\n    constructor(shaderManager: ShaderManager) {\n        this.shaderManager = shaderManager;\n        // Initialize with a default ambient light\n        this.setAmbientLight(new AmbientLight({\n            color: v3(1, 1, 1),\n            intensity: 0.03 // Lower default ambient for PBR to emphasize directional lighting\n        }));\n    }\n\n    /**\n     * Sets the ambient light for the scene\n     * For PBR, keep ambient light intensity low (0.01-0.05) to maintain physical accuracy\n     */\n    setAmbientLight(light: AmbientLight) {\n        this.ambientLight = light;\n        this.updateShaderUniforms();\n    }\n\n    /**\n     * Adds a light to the scene\n     * Note: For PBR, use higher intensities (5-10) for point and spot lights\n     */\n    addLight(light: Light) {\n        if (light instanceof AmbientLight) {\n            console.warn('Use setAmbientLight() to set the ambient light instead of addLight()');\n            return;\n        }\n        if (this.lights.length >= this.MAX_LIGHTS) {\n            console.warn(`Maximum number of lights (${this.MAX_LIGHTS}) reached. Light not added.`);\n            return;\n        }\n        this.lights.push(light);\n        this.updateShaderUniforms();\n    }\n\n    removeLight(light: Light) {\n        if (light instanceof AmbientLight) {\n            console.warn('Cannot remove ambient light. Use setAmbientLight() to modify it instead');\n            return;\n        }\n        const index = this.lights.indexOf(light);\n        if (index !== -1) {\n            this.lights.splice(index, 1);\n            this.updateShaderUniforms();\n        }\n    }\n\n    getLights(): Light[] {\n        return this.lights;\n    }\n\n    /**\n     * Updates all light-related shader uniforms\n     * This sets the PBR-optimized values for lights in the shader\n     */\n    updateShaderUniforms() {\n        // Initialize arrays for each light component\n        const types = new Int32Array(this.MAX_LIGHTS);\n        const positions = new Float32Array(this.MAX_LIGHTS * 3);\n        const directions = new Float32Array(this.MAX_LIGHTS * 3);\n        const colors = new Float32Array(this.MAX_LIGHTS * 3);\n        const intensities = new Float32Array(this.MAX_LIGHTS);\n        const constants = new Float32Array(this.MAX_LIGHTS);\n        const linears = new Float32Array(this.MAX_LIGHTS);\n        const quadratics = new Float32Array(this.MAX_LIGHTS);\n        const cutOffs = new Float32Array(this.MAX_LIGHTS);\n        const outerCutOffs = new Float32Array(this.MAX_LIGHTS);\n\n        // Initialize all lights as inactive\n        types.fill(LightType.INACTIVE);\n        // Set default attenuation values\n        constants.fill(1.0);\n\n        let currentIndex = 0;\n\n        // Set ambient light first (if exists and enabled)\n        if (this.ambientLight && this.ambientLight.isEnabled()) {\n            const data = this.ambientLight.getData();\n            types[currentIndex] = LightType.AMBIENT;\n            \n            // Set color\n            colors[currentIndex * 3] = data.color.x;\n            colors[currentIndex * 3 + 1] = data.color.y;\n            colors[currentIndex * 3 + 2] = data.color.z;\n            \n            // Set intensity\n            intensities[currentIndex] = data.intensity;\n            currentIndex++;\n        }\n\n        // Fill in active lights\n        for (const light of this.lights) {\n            // Skip disabled lights\n            if (!light.isEnabled()) continue;\n            \n            // Skip if we've reached the maximum lights\n            if (currentIndex >= this.MAX_LIGHTS) {\n                console.warn(`Maximum number of lights (${this.MAX_LIGHTS}) reached. Some lights will not be rendered.`);\n                break;\n            }\n            \n            const data = light.getData();\n\n            // Set type\n            types[currentIndex] = light.getType();\n\n            // Set color and intensity (common to all lights)\n            const colorOffset = currentIndex * 3;\n            colors[colorOffset] = data.color.x;\n            colors[colorOffset + 1] = data.color.y;\n            colors[colorOffset + 2] = data.color.z;\n            intensities[currentIndex] = data.intensity;\n\n            // Type-specific properties\n            switch (light.getType()) {\n                case LightType.DIRECTIONAL: {\n                    const dirLight = light as DirectionalLight;\n                    const dirData = dirLight.getData();\n                    const dirOffset = currentIndex * 3;\n                    directions[dirOffset] = dirData.direction.x;\n                    directions[dirOffset + 1] = dirData.direction.y;\n                    directions[dirOffset + 2] = dirData.direction.z;\n                    break;\n                }\n                case LightType.POINT: {\n                    const pointLight = light as PointLight;\n                    const pointData = pointLight.getData();\n                    const posOffset = currentIndex * 3;\n                    positions[posOffset] = pointData.position.x;\n                    positions[posOffset + 1] = pointData.position.y;\n                    positions[posOffset + 2] = pointData.position.z;\n                    constants[currentIndex] = pointData.constant;\n                    linears[currentIndex] = pointData.linear;\n                    quadratics[currentIndex] = pointData.quadratic;\n                    break;\n                }\n                case LightType.SPOT: {\n                    const spotLight = light as SpotLight;\n                    const spotData = spotLight.getData();\n                    const posOffset = currentIndex * 3;\n                    const dirOffset = currentIndex * 3;\n                    positions[posOffset] = spotData.position.x;\n                    positions[posOffset + 1] = spotData.position.y;\n                    positions[posOffset + 2] = spotData.position.z;\n                    directions[dirOffset] = spotData.direction.x;\n                    directions[dirOffset + 1] = spotData.direction.y;\n                    directions[dirOffset + 2] = spotData.direction.z;\n                    constants[currentIndex] = spotData.constant;\n                    linears[currentIndex] = spotData.linear;\n                    quadratics[currentIndex] = spotData.quadratic;\n                    cutOffs[currentIndex] = spotData.cutOff;\n                    outerCutOffs[currentIndex] = spotData.outerCutOff;\n                    break;\n                }\n            }\n            currentIndex++;\n        }\n\n        // Update shader uniforms with the actual number of active lights\n        this.shaderManager.setUniform('u_numLights', currentIndex);\n        this.shaderManager.setUniform('u_lightTypes', types);\n        this.shaderManager.setUniform('u_lightPositions', positions);\n        this.shaderManager.setUniform('u_lightDirections', directions);\n        this.shaderManager.setUniform('u_lightColors', colors);\n        this.shaderManager.setUniform('u_lightIntensities', intensities);\n        this.shaderManager.setUniform('u_lightConstants', constants);\n        this.shaderManager.setUniform('u_lightLinears', linears);\n        this.shaderManager.setUniform('u_lightQuadratics', quadratics);\n        this.shaderManager.setUniform('u_lightCutOffs', cutOffs);\n        this.shaderManager.setUniform('u_lightOuterCutOffs', outerCutOffs);\n    }\n} ", "// Color picking vertex shader\r\nexport const colorPickingVertexShader = `#version 300 es\r\nin vec3 a_position;\r\n\r\nuniform mat4 u_modelMatrix;\r\nuniform mat4 u_viewMatrix;\r\nuniform mat4 u_projectionMatrix;\r\n\r\nvoid main() {\r\n    gl_Position = u_projectionMatrix * u_viewMatrix * u_modelMatrix * vec4(a_position, 1.0);\r\n}`;\r\n\r\n// Color picking fragment shader\r\nexport const colorPickingFragmentShader = `#version 300 es\r\nprecision highp float;\r\n\r\nuniform vec3 u_pickingColor;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    fragColor = vec4(u_pickingColor, 1.0);\r\n}`; ", "export const skyboxVertexShader = `#version 300 es\r\nprecision highp float;\r\n\r\n// Attributes\r\nin vec3 a_position;\r\n\r\n// Uniforms\r\nuniform mat4 u_viewMatrix;\r\nuniform mat4 u_projectionMatrix;\r\n\r\n// Output to fragment shader\r\nout vec3 v_texCoord;\r\n\r\nvoid main() {\r\n    // Use position as texture coordinate for cubemap sampling\r\n    v_texCoord = a_position;\r\n    \r\n    // Remove translation from view matrix to keep skybox centered on camera\r\n    mat4 viewMatrixNoTranslation = mat4(\r\n        vec4(u_viewMatrix[0].xyz, 0.0),\r\n        vec4(u_viewMatrix[1].xyz, 0.0),\r\n        vec4(u_viewMatrix[2].xyz, 0.0),\r\n        vec4(0.0, 0.0, 0.0, 1.0)\r\n    );\r\n    \r\n    // Position vertices at the far plane\r\n    vec4 pos = u_projectionMatrix * viewMatrixNoTranslation * vec4(a_position, 1.0);\r\n    \r\n    // Set z equal to w to ensure skybox is always at the far plane\r\n    gl_Position = pos.xyww;\r\n}`; ", "export const skyboxFragmentShader = `#version 300 es\r\nprecision highp float;\r\n\r\n// Input from vertex shader\r\nin vec3 v_texCoord;\r\n\r\n// Environment map\r\nuniform samplerCube u_environmentMap;\r\n\r\n// Output\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    // Sample environment map (skybox) using direction vector\r\n    vec3 color = texture(u_environmentMap, v_texCoord).rgb;\r\n    \r\n    // Apply tone mapping\r\n    // color = color / (color + vec3(1.0)); // Reinhard tone mapping\r\n\r\n    // Gamma correction\r\n    color = pow(color, vec3(1.0/2.2));\r\n    \r\n    fragColor = vec4(color, 1.0);\r\n}`; ", "import { glob } from '../../game';\r\nimport { VertexArray } from './buffer';\r\nimport { skyboxVertexShader } from './shaders/skyboxVertexShader';\r\nimport { skyboxFragmentShader } from './shaders/skyboxFragmentShader';\r\nimport { EnvironmentMap } from './environmentMap';\r\n\r\nexport class Skybox {\r\n    private vao: VertexArray;\r\n    private environmentMap: EnvironmentMap | null = null;\r\n\r\n    constructor() {\r\n        // Create and load skybox shader program\r\n        try {\r\n            // Try to use the program first to see if it exists\r\n            glob.shaderManager.useProgram('skybox');\r\n        } catch (error) {\r\n            // Program doesn't exist, create it\r\n            glob.shaderManager.loadShaderProgram('skybox', skyboxVertexShader, skyboxFragmentShader);\r\n        }\r\n\r\n        // Create a cube for the skybox\r\n        this.vao = new VertexArray(glob.ctx);\r\n        this.initCube();\r\n    }\r\n\r\n    private initCube(): void {\r\n        // Define the vertices for a unit cube centered at the origin\r\n        const vertices = new Float32Array([\r\n            // Positions          \r\n            -1.0,  1.0, -1.0,\r\n            -1.0, -1.0, -1.0,\r\n             1.0, -1.0, -1.0,\r\n             1.0, -1.0, -1.0,\r\n             1.0,  1.0, -1.0,\r\n            -1.0,  1.0, -1.0,\r\n\r\n            -1.0, -1.0,  1.0,\r\n            -1.0, -1.0, -1.0,\r\n            -1.0,  1.0, -1.0,\r\n            -1.0,  1.0, -1.0,\r\n            -1.0,  1.0,  1.0,\r\n            -1.0, -1.0,  1.0,\r\n\r\n             1.0, -1.0, -1.0,\r\n             1.0, -1.0,  1.0,\r\n             1.0,  1.0,  1.0,\r\n             1.0,  1.0,  1.0,\r\n             1.0,  1.0, -1.0,\r\n             1.0, -1.0, -1.0,\r\n\r\n            -1.0, -1.0,  1.0,\r\n            -1.0,  1.0,  1.0,\r\n             1.0,  1.0,  1.0,\r\n             1.0,  1.0,  1.0,\r\n             1.0, -1.0,  1.0,\r\n            -1.0, -1.0,  1.0,\r\n\r\n            -1.0,  1.0, -1.0,\r\n             1.0,  1.0, -1.0,\r\n             1.0,  1.0,  1.0,\r\n             1.0,  1.0,  1.0,\r\n            -1.0,  1.0,  1.0,\r\n            -1.0,  1.0, -1.0,\r\n\r\n            -1.0, -1.0, -1.0,\r\n            -1.0, -1.0,  1.0,\r\n             1.0, -1.0, -1.0,\r\n             1.0, -1.0, -1.0,\r\n            -1.0, -1.0,  1.0,\r\n             1.0, -1.0,  1.0\r\n        ]);\r\n\r\n        // Create and bind vertex buffer\r\n        this.vao.bind();\r\n        \r\n        // Create a position buffer with attribute 0\r\n        const positionBuffer = glob.ctx.createBuffer();\r\n        glob.ctx.bindBuffer(glob.ctx.ARRAY_BUFFER, positionBuffer);\r\n        glob.ctx.bufferData(glob.ctx.ARRAY_BUFFER, vertices, glob.ctx.STATIC_DRAW);\r\n        glob.ctx.enableVertexAttribArray(0);\r\n        glob.ctx.vertexAttribPointer(0, 3, glob.ctx.FLOAT, false, 0, 0);\r\n        \r\n        this.vao.unbind();\r\n    }\r\n\r\n    public setEnvironmentMap(environmentMap: EnvironmentMap): void {\r\n        this.environmentMap = environmentMap;\r\n    }\r\n\r\n    public render(viewMatrix: Float32Array, projectionMatrix: Float32Array): void {\r\n        // Skip if no environment map is set\r\n        if (!this.environmentMap) return;\r\n\r\n        const gl = glob.ctx;\r\n\r\n        // Disable depth writing but enable depth testing\r\n        gl.depthMask(false);\r\n        gl.depthFunc(gl.LEQUAL); // Important for skybox to render at the back\r\n\r\n        // Use skybox shader program\r\n        glob.shaderManager.useProgram('skybox');\r\n\r\n        // Set view and projection matrices\r\n        glob.shaderManager.setUniform('u_viewMatrix', viewMatrix);\r\n        glob.shaderManager.setUniform('u_projectionMatrix', projectionMatrix);\r\n\r\n        // Bind the environment map to texture unit 0\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        this.environmentMap.bindCubemap(0);\r\n        glob.shaderManager.setUniform('u_environmentMap', 0);\r\n\r\n        // Render the cube\r\n        this.vao.bind();\r\n        gl.drawArrays(gl.TRIANGLES, 0, 36);\r\n        this.vao.unbind();\r\n\r\n        // Reset depth mask\r\n        gl.depthMask(true);\r\n        gl.depthFunc(gl.LESS);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.vao.dispose();\r\n    }\r\n} ", "import { glob } from '../../game';\nimport { TickerReturnData } from '../ticker';\nimport { Camera } from './camera';\nimport { SceneObject } from './meshes/sceneObject';\nimport { Light, AmbientLight, PointLight } from './lights/light';\nimport { LightManager } from './lights/lightManager';\nimport { v3, Vector3 } from '../util/math/vector3';\nimport { Vector2 } from '../util/math/vector2';\nimport { colorPickingVertexShader, colorPickingFragmentShader } from './shaders/colorPickingShader';\nimport { VertexArray } from './buffer';\nimport { EnvironmentMap } from './environmentMap';\nimport { Skybox } from './skybox';\n\nexport interface SceneOptions {\n    ambientLightColor?: Vector3;\n    ambientLightIntensity?: number;\n    environmentMap?: EnvironmentMap;\n}\n\nexport class Scene {\n    protected objects: SceneObject[] = [];\n    protected camera: Camera;\n    protected clearColor: [number, number, number, number] = [0, 0, 0, 1];\n    protected lightManager: LightManager;\n    private _ambientLight: AmbientLight;\n    protected showColorPicking: boolean = true; // Debug flag to show color picking\n    // Picking framebuffer setup\n    private pickingFramebuffer: WebGLFramebuffer | null = null;\n    private pickingTexture: WebGLTexture | null = null;\n    private pickingDepthBuffer: WebGLRenderbuffer | null = null;\n    protected get ambientLight(): AmbientLight {\n        return this._ambientLight;\n    }\n    protected set ambientLight(value: AmbientLight) {\n        this._ambientLight = value;\n        this.lightManager.setAmbientLight(this.ambientLight);\n    }\n    protected showShadowMap: boolean = false;\n    protected frameCount: number = 0;\n    protected lastClick: Vector2;\n    protected debugShadowMap: boolean = false;\n    protected debugLightIndex: number = 0;\n    protected fullScreenQuadVAO: VertexArray | null = null;\n    protected environmentMap?: EnvironmentMap;\n    protected skybox: Skybox;\n\n    public click(vector2: Vector2) {\n        this.lastClick = vector2;\n    }\n\n    constructor(camera: Camera, options: SceneOptions = {}) {\n        this.camera = camera;\n        this.lightManager = new LightManager(glob.shaderManager);\n\n        // Set up ambient light with default or provided values\n        this.ambientLight = new AmbientLight({ color: options.ambientLightColor || v3(1, 1, 1), intensity: options.ambientLightIntensity ?? 0.1 });\n        this.environmentMap = options.environmentMap;\n\n        // Initialize skybox\n        this.skybox = new Skybox();\n        if (this.environmentMap) {\n            this.skybox.setEnvironmentMap(this.environmentMap);\n        }\n\n        // Load color picking shader\n        glob.shaderManager.loadShaderProgram('picking', colorPickingVertexShader, colorPickingFragmentShader);\n\n        glob.events.resize.subscribe('level', this.resize.bind(this));\n    }\n\n    public add(object: SceneObject|SceneObject[]): SceneObject {\n        if (Array.isArray(object)) {\n            this.objects.push(...object);\n            return object[0];\n        } else {\n            this.objects.push(object);\n            return object;\n        }\n    }\n\n    public remove(object: SceneObject): void {\n        const index = this.objects.indexOf(object);\n        if (index !== -1) {\n            this.objects.splice(index, 1);\n        }\n    }\n\n    public getLights(): Light[] {\n        return this.lightManager.getLights();\n    }\n\n    public render(): void {\n        const gl = glob.ctx;\n        const viewMatrix = this.camera.getViewMatrix();\n        const projectionMatrix = this.camera.getProjectionMatrix();\n\n        // First do color picking render pass (to offscreen buffer)\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.pickingFramebuffer);\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.clearColor(0, 0, 0, 1);\n        \n        gl.enable(gl.DEPTH_TEST);\n        gl.depthFunc(gl.LEQUAL);\n        \n        glob.shaderManager.useProgram('picking');\n\n        for (const object of this.objects) {\n            // Skip objects that should be ignored in picking pass\n            if (!object.vao || object.pickColorArray === undefined) continue;\n            \n            glob.shaderManager.setUniform('u_pickingColor', new Float32Array(object.pickColorArray.vec));\n            object.render(viewMatrix, projectionMatrix);\n        }\n\n        // Switch back to default framebuffer for normal rendering\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n        // Second render pass: create shadow maps\n        const shadowCastingLights = this.getLights().filter(light => \n            light instanceof PointLight && \n            light.isEnabled() &&\n            light.getIntensity() > 0.0001 // Only cast shadows for lights that are actually contributing\n        );\n        const castsShadow = new Array(10).fill(false);\n        const lightSpaceMatrices = new Float32Array(10 * 16); // MAX_LIGHTS * 4x4 matrix\n        const hasAmbientLight = this.ambientLight !== null && this.ambientLight.isEnabled();\n        const indexOffset = hasAmbientLight ? 1 : 0;\n\n        // For each light that casts shadows\n        for (let i = 0; i < shadowCastingLights.length; i++) {\n            const light = shadowCastingLights[i] as PointLight;\n            const lightIndex = i + indexOffset; // Adjust index for ambient light offset\n            const shadowMap = light.getShadowMap();\n            shadowMap.bind(glob.ctx);\n            shadowMap.bindDepthTexture(glob.ctx, 0);\n\n            // Use shadow shader program\n            glob.shaderManager.useProgram('shadow');\n\n            // Set light space matrix uniform for shadow pass\n            const lightSpaceMatrix = light.getLightSpaceMatrix();\n            glob.shaderManager.setUniform('u_lightSpaceMatrix', lightSpaceMatrix.mat4);\n\n            // Set up depth state for shadow map rendering\n            glob.ctx.enable(glob.ctx.DEPTH_TEST);\n            glob.ctx.depthFunc(glob.ctx.LESS);\n            glob.ctx.depthMask(true); // Ensure depth writing is enabled\n            glob.ctx.clearDepth(1.0);\n            glob.ctx.clear(glob.ctx.DEPTH_BUFFER_BIT);\n\n            // Store light space matrix for main render pass\n            lightSpaceMatrix.mat4.forEach((value, index) => {\n                lightSpaceMatrices[lightIndex * 16 + index] = value;\n            });\n            castsShadow[lightIndex] = true; // Set to true instead of 1\n\n            // Render scene from light's perspective - render ALL objects\n            for (const object of this.objects) {\n                // Skip objects without geometry\n                if (!object.vao) continue;\n                \n                // Always render objects into shadow map, regardless of ignoreLighting flag\n                glob.shaderManager.setUniform('u_modelMatrix', object.transform.getWorldMatrix().mat4);\n                object.vao.bind();\n                \n                if (object.indexBuffer) {\n                    glob.ctx.drawElements(glob.ctx.TRIANGLES, object.indexBuffer.getCount(), glob.ctx.UNSIGNED_SHORT, 0);\n                } else {\n                    glob.ctx.drawArrays(glob.ctx.TRIANGLES, 0, object.drawCount);\n                }\n            }\n            \n            // Important: Unbind the shadow map framebuffer and restore color mask\n            shadowMap.unbind(glob.ctx);\n\n        }\n\n        // Third render pass: regular scene rendering with shadows\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n        gl.clearColor(...this.clearColor);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        // Reset depth test and blend functions\n        gl.enable(gl.DEPTH_TEST);\n        gl.depthFunc(gl.LESS);\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n        // Render skybox first (before regular objects but after clearing the screen)\n        if (this.environmentMap) {\n            this.skybox.render(viewMatrix.mat4 as Float32Array, projectionMatrix.mat4 as Float32Array);\n        }\n\n        // Use PBR shader program for rendering\n        glob.shaderManager.useProgram('pbr');\n\n        // Update light uniforms including shadow maps\n        this.lightManager.updateShaderUniforms();\n\n        // Set shadow mapping uniforms\n        glob.shaderManager.setUniform('u_lightSpaceMatrices', lightSpaceMatrices);\n        glob.shaderManager.setUniform('u_castsShadow', castsShadow);\n\n        // Bind all shadow maps to different texture units\n        shadowCastingLights.forEach((light, i) => {\n            if (light instanceof PointLight) {\n                const lightIndex = i + indexOffset;\n                const shadowMap = light.getShadowMap();\n                shadowMap.bindDepthTexture(glob.ctx, lightIndex + 5); // Use higher texture units to avoid conflicts\n                // Only set uniform if it exists in the shader (max 4 shadow maps)\n                if (lightIndex < 4) {\n                    // Ensure u_shadowMap uniform is correctly set with the texture unit\n                    glob.shaderManager.setUniform(`u_shadowMap${lightIndex}`, lightIndex + 5);\n                    \n                    // Make sure the light's world-to-light matrix is correctly set\n                    const lightSpaceMatrix = light.getLightSpaceMatrix();\n                    for (let j = 0; j < 16; j++) {\n                        lightSpaceMatrices[lightIndex * 16 + j] = lightSpaceMatrix.mat4[j];\n                    }\n                    \n                    // Explicitly mark this light as casting shadows\n                    castsShadow[lightIndex] = true;\n                }\n            }\n        });\n        \n        // Re-set critical shadow uniforms right before rendering\n        glob.shaderManager.setUniform('u_lightSpaceMatrices', lightSpaceMatrices);\n        glob.shaderManager.setUniform('u_castsShadow', castsShadow);\n\n        // Bind environment map if available\n        if (this.environmentMap) {\n            this.environmentMap.bind(11); // Use texture units 11-14 for environment mapping\n            glob.shaderManager.setUniform('u_environmentMap', 11);\n            glob.shaderManager.setUniform('u_irradianceMap', 12);\n            glob.shaderManager.setUniform('u_prefilterMap', 13);\n            glob.shaderManager.setUniform('u_brdfLUT', 14);\n            glob.shaderManager.setUniform('u_useEnvironmentMap', 1);\n        } else {\n            glob.shaderManager.setUniform('u_useEnvironmentMap', 0);\n        }\n\n        // Update the camera position for reflections and lighting calculations\n        const cameraPosition = this.camera.getPosition();\n        glob.shaderManager.setUniform('u_viewPos', new Float32Array([cameraPosition.x, cameraPosition.y, cameraPosition.z]));\n\n        // For each object in the scene\n        for (const object of this.objects) {\n            object.render(viewMatrix, projectionMatrix);\n        }\n\n        this.frameCount++;\n    }\n\n    public dispose(): void {\n        for (const object of this.objects) {\n            object.vao.dispose();\n            object.indexBuffer?.dispose();\n        }\n        // Dispose skybox resources\n        this.skybox.dispose();\n        this.objects = [];\n    }\n\n    public tick(obj: TickerReturnData) {\n\n    }\n    public afterTick(obj: TickerReturnData) {\n        this.render();\n    }\n    public resize(): void {\n        this.camera.updateProjectionMatrix();\n        \n        // Resize picking buffers\n        const gl = glob.ctx;\n        \n        // Resize texture\n        gl.bindTexture(gl.TEXTURE_2D, this.pickingTexture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, \n            gl.canvas.width, gl.canvas.height, \n            0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n            \n        // Resize depth buffer\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this.pickingDepthBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, \n            gl.canvas.width, gl.canvas.height);\n            \n        // Reset bindings\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    }\n\n    public getActualColor(vector2: Vector2, range: 1|255 = 1): Vector3 | undefined {\n        const gl = glob.ctx;\n        const pixelData = new Uint8Array(4);\n        \n        // Bind picking framebuffer to read from it\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.pickingFramebuffer);\n        \n        // Convert from screen coordinates to WebGL viewport coordinates\n        const rect = (gl.canvas as HTMLCanvasElement).getBoundingClientRect();\n        const x = Math.round(vector2.x - rect.left);\n        const y = Math.round(gl.canvas.height - (vector2.y - rect.top)); // Flip Y coordinate\n        \n        gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixelData);\n        \n        // Reset framebuffer binding\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        \n        // Convert to 0-1 range\n        let color = v3(\n            pixelData[0],\n            pixelData[1],\n            pixelData[2]\n        );\n        if (range === 1){\n            color = color.scale(1/255);\n        }\n        return color;\n        \n    }\n\n    public getColor(vector2: Vector2): SceneObject | undefined {\n        const color = this.getActualColor(vector2);\n        \n        // Check for black or white (no object)\n        if (color.equals(v3(0, 0, 0)) || color.equals(v3(1, 1, 1))) return undefined;\n        \n        // Find matching object\n        for (const object of this.objects) {\n            if (object.colorMatch(color)) {\n                return object;\n            }\n        }\n        \n        return undefined;\n    }\n\n    addLight(light: Light): void {\n        if (light instanceof AmbientLight) {\n            console.warn('Use setAmbientLight() to set the ambient light instead of addLight()');\n            return;\n        }\n        this.lightManager.addLight(light);\n    }\n\n    removeLight(light: Light): void {\n        if (light instanceof AmbientLight) {\n            console.warn('Cannot remove ambient light. Use setAmbientLight() to modify it instead');\n            return;\n        }\n        this.lightManager.removeLight(light);\n    }\n\n    // Add method to toggle color picking visualization\n    public toggleColorPicking(): void {\n        this.showColorPicking = !this.showColorPicking;\n    }\n\n    public setEnvironmentMap(envMap: EnvironmentMap) {\n        this.environmentMap = envMap;\n        // Also update the skybox with the new environment map\n        this.skybox.setEnvironmentMap(envMap);\n    }\n} ", "import { v3, Vector3 } from '../util/math/vector3';\r\nimport { m4, Matrix4 } from '../util/math/matrix4';\r\n\r\nexport class Camera {\r\n    private position: Vector3;\r\n    private target: Vector3;\r\n\r\n    private viewMatrix: Matrix4;\r\n    private projectionMatrix: Matrix4;\r\n\r\n    private fov: number;\r\n    private near: number;\r\n    private far: number;\r\n\r\n    constructor(\r\n        { position = v3(0, 0, 5), target = v3(0, 0, 0), fov = 30, near = 100, far = 170000 }: { position?: Vector3; target?: Vector3; fov?: number; near?: number; far?: number; } = {}) {\r\n        this.position = position;\r\n        this.target = target;\r\n\r\n        this.fov = fov;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.updateViewMatrix();\r\n        this.updateProjectionMatrix();\r\n    }\r\n\r\n    public updateViewMatrix(): void {\r\n        this.viewMatrix = Matrix4.lookAt(this.position, this.target);\r\n    }\r\n\r\n    public updateProjectionMatrix(): void {\r\n        this.projectionMatrix = m4().perspective(\r\n            this.fov * Math.PI / 180,\r\n            this.near,\r\n            this.far\r\n        );\r\n    }\r\n\r\n    public setPosition(position: Vector3): void {\r\n        this.position = position;\r\n        this.updateViewMatrix();\r\n    }\r\n\r\n    public setTarget(target: Vector3): void {\r\n        this.target = target;\r\n        this.updateViewMatrix();\r\n    }\r\n\r\n    public setFov(fov: number): void {\r\n        this.fov = fov;\r\n        this.updateProjectionMatrix();\r\n    }\r\n\r\n    public getViewMatrix(): Matrix4 {\r\n        return this.viewMatrix;\r\n    }\r\n\r\n    public getProjectionMatrix(): Matrix4 {\r\n        return this.projectionMatrix;\r\n    }\r\n\r\n    public getPosition(): Vector3 {\r\n        return this.position;\r\n    }\r\n\r\n    public getTarget(): Vector3 {\r\n        return this.target;\r\n    }\r\n} ", "import { MeshData } from './types';\r\nimport { BaseMesh, BaseMeshProps } from './baseMesh';\r\nimport { SceneObject } from './sceneObject';\r\nimport { Material } from '../material';\r\nimport { vec3 } from 'gl-matrix';\r\nimport { Vector2 } from '../../util/math/vector2';\r\nimport { v3 } from '../../util/math/vector3';\r\n\r\nexport interface PlaneProps extends BaseMeshProps {\r\n    material?: Material;\r\n    texture?: string;\r\n    flipNormal?: boolean;\r\n}\r\n\r\nexport class Plane extends BaseMesh {\r\n    private static vertices: Float32Array = new Float32Array([\r\n        // Single face (square)\r\n        -0.5, 0.0, -0.5,  // bottom-left\r\n        0.5, 0.0, -0.5,  // bottom-right\r\n        0.5, 0.0, 0.5,  // top-right\r\n        -0.5, 0.0, 0.5   // top-left\r\n    ]);\r\n\r\n    private static generateIndices(flipNormal: boolean): Uint16Array {\r\n        return new Uint16Array(\r\n            flipNormal\r\n                ? [0, 1, 2, 2, 3, 0]     // clockwise winding for bottom visibility\r\n                : [0, 2, 1, 0, 3, 2]      // counter-clockwise winding for top visibility\r\n        );\r\n    }\r\n\r\n    private static generateNormals(flipNormal: boolean): Float32Array {\r\n        const normalY = flipNormal ? -1.0 : 1.0;\r\n        return new Float32Array([\r\n            0.0, normalY, 0.0,\r\n            0.0, normalY, 0.0,\r\n            0.0, normalY, 0.0,\r\n            0.0, normalY, 0.0\r\n        ]);\r\n    }\r\n\r\n    private static texCoords: Float32Array = new Float32Array([\r\n        0.0, 0.0,\r\n        1.0, 0.0,\r\n        1.0, 1.0,\r\n        0.0, 1.0\r\n    ]);\r\n\r\n    // Generate tangents for normal mapping\r\n    private static generateTangents(): Float32Array {\r\n        // For a plane, tangents are aligned with x-axis \r\n        return new Float32Array([\r\n            1.0, 0.0, 0.0,\r\n            1.0, 0.0, 0.0,\r\n            1.0, 0.0, 0.0,\r\n            1.0, 0.0, 0.0\r\n        ]);\r\n    }\r\n\r\n    // Generate bitangents for normal mapping\r\n    private static generateBitangents(flipNormal: boolean): Float32Array {\r\n        // For a plane, bitangents should be aligned with z-axis\r\n        const bitangentZ = flipNormal ? -1.0 : 1.0;\r\n        return new Float32Array([\r\n            0.0, 0.0, bitangentZ,\r\n            0.0, 0.0, bitangentZ,\r\n            0.0, 0.0, bitangentZ,\r\n            0.0, 0.0, bitangentZ\r\n        ]);\r\n    }\r\n\r\n    private static generateColors(material?: Material): Float32Array {\r\n        const defaultColor = vec3.fromValues(0.8, 0.8, 0.8); // Default to light gray\r\n        const color = material ? material.baseColor.vec : defaultColor;\r\n\r\n        // Four vertices need the same color\r\n        return new Float32Array([\r\n            color[0], color[1], color[2],\r\n            color[0], color[1], color[2],\r\n            color[0], color[1], color[2],\r\n            color[0], color[1], color[2]\r\n        ]);\r\n    }\r\n\r\n    private static createMeshData(props: Omit<PlaneProps, 'scale'> = {}): MeshData {\r\n        const flipNormal = props.flipNormal || false;\r\n        return {\r\n            vertices: this.vertices,\r\n            indices: this.generateIndices(flipNormal),\r\n            normals: this.generateNormals(flipNormal),\r\n            texCoords: this.texCoords,\r\n            colors: this.generateColors(props.material),\r\n            tangents: this.generateTangents(),\r\n            bitangents: this.generateBitangents(flipNormal)\r\n        };\r\n    }\r\n\r\n    public static create(props: Omit<PlaneProps, 'scale'> & { scale?: Vector2 } = {}): SceneObject {\r\n        // Create default material if none provided\r\n        if (!props.material && !props.texture) {\r\n            props.material = new Material();\r\n        }\r\n\r\n        const meshData = this.createMeshData(props);\r\n        const sceneObject = this.createSceneObject(meshData, {...props, scale: v3(props.scale?.x ?? 1, 1, props.scale?.y ?? 1)});\r\n\r\n        // The material is now set in the SceneObject constructor\r\n        // and applied during each render call\r\n        \r\n        return sceneObject;\r\n    }\r\n} ", "/**\r\n * Utilities for handling URLs in the application\r\n */\r\nexport class UrlUtils {\r\n    /**\r\n     * Gets the base URL for the application, considering base tags and current location\r\n     */\r\n    public static getBaseUrl(): string {\r\n        // If we have a base tag, use that href\r\n        const baseTag = document.querySelector('base');\r\n        if (baseTag && baseTag.href) {\r\n            return baseTag.href;\r\n        }\r\n        \r\n        // Use the window.location.href but ensure it ends with a slash\r\n        // This preserves the full path including any directories\r\n        const href = window.location.href;\r\n        // Remove any query parameters or hash\r\n        const cleanHref = href.split(/[?#]/)[0];\r\n        // Ensure the URL ends with a slash\r\n        return cleanHref.endsWith('/') ? cleanHref : cleanHref.substring(0, cleanHref.lastIndexOf('/') + 1);\r\n    }\r\n\r\n    /**\r\n     * Resolve a relative URL against the application's base URL\r\n     * @param url The URL to resolve\r\n     * @returns The fully resolved URL\r\n     */\r\n    public static resolveUrl(url: string): string {\r\n        // Don't modify URLs that are already absolute\r\n        if (url.match(/^(https?:)?\\/\\//)) {\r\n            return url;\r\n        }\r\n        \r\n        // For absolute paths starting with /, use the origin only\r\n        if (url.startsWith('/')) {\r\n            return new URL(url, window.location.origin).href;\r\n        }\r\n        \r\n        // For relative paths, use the full base URL\r\n        return new URL(url, this.getBaseUrl()).href;\r\n    }\r\n} ", "import { glob } from '../../game';\r\nimport { UrlUtils } from '../util/urlUtils';\r\n\r\nexport class EnvironmentMap {\r\n    private cubemapTexture: WebGLTexture;\r\n    private irradianceTexture: WebGLTexture;\r\n    private prefilterTexture: WebGLTexture;\r\n    private brdfLUTTexture: WebGLTexture;\r\n\r\n    constructor() {\r\n        const gl = glob.ctx;\r\n        \r\n        // Create cubemap texture\r\n        this.cubemapTexture = gl.createTexture()!;\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.cubemapTexture);\r\n        \r\n        // Initialize each face with a placeholder\r\n        const faces = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X,\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\r\n        ];\r\n\r\n        faces.forEach(face => {\r\n            // Use RGBA8 format which supports mipmaps\r\n            gl.texImage2D(face, 0, gl.RGBA8, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 255]));\r\n        });\r\n\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n\r\n        // Create irradiance map texture (for diffuse IBL)\r\n        this.irradianceTexture = gl.createTexture()!;\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.irradianceTexture);\r\n        faces.forEach(face => {\r\n            gl.texImage2D(face, 0, gl.RGBA8, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n        });\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n\r\n        // Create prefilter map texture (for specular IBL)\r\n        this.prefilterTexture = gl.createTexture()!;\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.prefilterTexture);\r\n        faces.forEach(face => {\r\n            gl.texImage2D(face, 0, gl.RGBA8, 128, 128, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n        });\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);\r\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n\r\n        // Create BRDF LUT texture\r\n        this.brdfLUTTexture = gl.createTexture()!;\r\n        gl.bindTexture(gl.TEXTURE_2D, this.brdfLUTTexture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, 512, 512, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    }\r\n\r\n    public async loadFromUrls(urls: string[]) {\r\n        if (urls.length !== 6) {\r\n            throw new Error('Environment map requires exactly 6 image URLs for the cubemap faces');\r\n        }\r\n\r\n        const gl = glob.ctx;\r\n        const faces = [\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X,\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\r\n            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\r\n        ];\r\n\r\n        // Load all images\r\n        const imagePromises = urls.map((url, index) => {\r\n            return new Promise<HTMLImageElement>((resolve, reject) => {\r\n                const img = new Image();\r\n                img.onload = () => resolve(img);\r\n                img.onerror = (err) => {\r\n                    console.error(`Failed to load cubemap image: ${url}`, err);\r\n                    // Create a colored placeholder for debugging\r\n                    const colors = [\r\n                        [255, 0, 0, 255],    // positiveX - red\r\n                        [0, 255, 0, 255],    // negativeX - green\r\n                        [0, 0, 255, 255],    // positiveY - blue\r\n                        [255, 255, 0, 255],  // negativeY - yellow\r\n                        [255, 0, 255, 255],  // positiveZ - magenta\r\n                        [0, 255, 255, 255]   // negativeZ - cyan\r\n                    ];\r\n                    \r\n                    // Create a small canvas with the placeholder color\r\n                    const canvas = document.createElement('canvas');\r\n                    canvas.width = 64;\r\n                    canvas.height = 64;\r\n                    const ctx = canvas.getContext('2d');\r\n                    if (ctx) {\r\n                        ctx.fillStyle = `rgba(${colors[index].join(',')})`;\r\n                        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n                        \r\n                        // Draw error text\r\n                        ctx.fillStyle = 'black';\r\n                        ctx.font = '10px Arial';\r\n                        ctx.fillText('Load Error', 5, 32);\r\n                    }\r\n                    \r\n                    resolve(canvas as unknown as HTMLImageElement);\r\n                };\r\n                img.src = url;\r\n            });\r\n        });\r\n\r\n        try {\r\n            const images = await Promise.all(imagePromises);\r\n\r\n            // Upload images to cubemap\r\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.cubemapTexture);\r\n            images.forEach((image, i) => {\r\n                gl.texImage2D(faces[i], 0, gl.RGBA8, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n            });\r\n\r\n            // Generate mipmaps after all faces are loaded\r\n            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n\r\n            // TODO: Generate irradiance map and prefiltered environment map\r\n            // This requires additional render passes and shaders\r\n            // Will be implemented in the next step\r\n        } catch (error) {\r\n            console.error('Failed to load environment map images:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public bind(unit: number = 0) {\r\n        const gl = glob.ctx;\r\n        \r\n        // Bind environment map\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.cubemapTexture);\r\n        \r\n        // Bind irradiance map\r\n        gl.activeTexture(gl.TEXTURE0 + unit + 1);\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.irradianceTexture);\r\n        \r\n        // Bind prefilter map\r\n        gl.activeTexture(gl.TEXTURE0 + unit + 2);\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.prefilterTexture);\r\n        \r\n        // Bind BRDF LUT\r\n        gl.activeTexture(gl.TEXTURE0 + unit + 3);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.brdfLUTTexture);\r\n    }\r\n\r\n    /**\r\n     * Binds only the main cubemap texture (for skybox)\r\n     * @param unit The texture unit to bind to\r\n     */\r\n    public bindCubemap(unit: number = 0) {\r\n        const gl = glob.ctx;\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.cubemapTexture);\r\n    }\r\n} \r\n\r\n\r\nexport interface EnvironmentMapUrls {\r\n    positiveX: string;\r\n    negativeX: string;\r\n    positiveY: string;\r\n    negativeY: string;\r\n    positiveZ: string;\r\n    negativeZ: string;\r\n}\r\n\r\nexport class EnvironmentMapLoader {\r\n    public static async loadFromUrls(urls: EnvironmentMapUrls): Promise<EnvironmentMap> {\r\n        const envMap = new EnvironmentMap();\r\n        \r\n        // Convert the URLs object to an array in the correct order\r\n        // and resolve relative URLs using UrlUtils\r\n        const urlArray = [\r\n            UrlUtils.resolveUrl(urls.positiveX),\r\n            UrlUtils.resolveUrl(urls.negativeX),\r\n            UrlUtils.resolveUrl(urls.positiveY),\r\n            UrlUtils.resolveUrl(urls.negativeY),\r\n            UrlUtils.resolveUrl(urls.positiveZ),\r\n            UrlUtils.resolveUrl(urls.negativeZ)\r\n        ];\r\n\r\n\r\n        await envMap.loadFromUrls(urlArray);\r\n        return envMap;\r\n    }\r\n\r\n    public static async loadFromDirectory(baseUrl: string, format: string = 'png'): Promise<EnvironmentMap> {\r\n        // Make sure path doesn't start with / to avoid going to the domain root\r\n        const texturePath = baseUrl.replace(/^\\//, '');\r\n        \r\n        // Resolve the baseUrl using UrlUtils\r\n        const fullBaseUrl = UrlUtils.resolveUrl(texturePath);\r\n        \r\n        \r\n        return this.loadFromUrls({\r\n            positiveX: `${fullBaseUrl}/px.${format}`,\r\n            negativeX: `${fullBaseUrl}/nx.${format}`,\r\n            positiveY: `${fullBaseUrl}/py.${format}`,\r\n            negativeY: `${fullBaseUrl}/ny.${format}`,\r\n            positiveZ: `${fullBaseUrl}/pz.${format}`,\r\n            negativeZ: `${fullBaseUrl}/nz.${format}`\r\n        });\r\n    }\r\n}", "import * as FBXParser from 'fbx-parser';\nimport { MeshData } from './types';\nimport { Material } from '../material';\nimport { SceneObject } from './sceneObject';\nimport { BaseMesh, BaseMeshProps } from './baseMesh';\nimport { v3 } from '../../util/math/vector3';\nimport { glob } from '../../../game';\nimport { Util } from '../../util/utils';\nimport { UrlUtils } from '../../util/urlUtils';\n\n// Base FBX node types\ninterface FBXNodeBase {\n    name: string;\n    props: unknown[];\n    nodes?: FBXNodeBase[];\n}\n\ninterface FBXValueNode extends FBXNodeBase {\n    value: number | string | number[];\n}\n\n// Geometry-specific types\ninterface FBXGeometryValueNode extends FBXNodeBase {\n    value: number[] | string | number;\n}\n\ninterface FBXGeometryPropertyNode extends FBXNodeBase {\n    nodes: FBXGeometryValueNode[];\n}\n\ninterface FBXGeometryNode extends FBXNodeBase {\n    name: 'Geometry';\n    nodes: FBXGeometryPropertyNode[];\n}\n\n// Material-specific types\ninterface FBXMaterialValueNode extends FBXNodeBase {\n    value: number | string;\n}\n\ninterface FBXMaterialPropertyNode extends FBXNodeBase {\n    nodes: FBXMaterialValueNode[];\n}\n\ninterface FBXMaterialNode extends FBXNodeBase {\n    name: 'Material';\n    nodes: FBXMaterialPropertyNode[];\n}\n\n// Connection-specific types\ninterface FBXConnectionValueNode extends FBXNodeBase {\n    value: number | string;\n}\n\ninterface FBXConnectionNode extends FBXNodeBase {\n    name: 'Connections';\n    nodes: FBXConnectionValueNode[];\n}\n\n// Add texture-specific types\ninterface FBXTextureValueNode extends FBXNodeBase {\n    value: string;\n}\n\ninterface FBXTexturePropertyNode extends FBXNodeBase {\n    nodes: FBXTextureValueNode[];\n}\n\ninterface FBXTextureNode extends FBXNodeBase {\n    name: 'Texture';\n    nodes: FBXTexturePropertyNode[];\n}\n\ninterface FBXVideoNode extends FBXNodeBase {\n    name: 'Video';\n    nodes: FBXTexturePropertyNode[];\n}\n\n// Objects node type\ninterface FBXObjectsNode extends FBXNodeBase {\n    name: 'Objects';\n    nodes: Array<FBXGeometryNode | FBXMaterialNode | FBXTextureNode | FBXVideoNode | FBXNodeBase>;\n}\n\n// Root node type\ntype FBXNode = FBXGeometryNode | FBXMaterialNode | FBXConnectionNode | FBXObjectsNode | FBXNodeBase;\n\n// Add smoothShading to props interface\nexport interface FBXLoaderProps extends BaseMeshProps {\n    gl?: WebGL2RenderingContext;\n}\n\n// Private namespace for FBXLoader types\nnamespace FBXLoaderTypes {\n    export interface ProcessedFBXData {\n        geometries: FBXGeometryNode[];\n        materials: Map<string | number, Material>;\n        geometryMaterialMap: Map<string | number, Material>;\n    }\n}\n\nexport class FBXLoader extends BaseMesh {\n    private static CHUNK_SIZE = 65536; // Maximum vertices per chunk\n\n    private static async processFBXData(fbxData: FBXNode[]): Promise<FBXLoaderTypes.ProcessedFBXData> {\n        const objectsNode = fbxData.find(node => node.name === 'Objects') as FBXObjectsNode;\n        const connectionsNode = fbxData.find(node => node.name === 'Connections') as FBXConnectionNode;\n\n        if (!objectsNode) throw new Error('No Objects node found in FBX file');\n        if (!connectionsNode) throw new Error('No Connections node found in FBX file');\n\n        // Get all geometries and materials\n        const geometries = objectsNode.nodes.filter((node): node is FBXGeometryNode => node.name === 'Geometry');\n        const materialNodes = objectsNode.nodes.filter((node): node is FBXMaterialNode => node.name === 'Material');\n\n        // First, parse all materials\n        const materials = new Map<string | number, Material>();\n        for (const matNode of materialNodes) {\n            const matId = matNode.props[0] as string | number;\n            const material = await this.parseMaterial(matNode, fbxData);\n            materials.set(matId, material);\n        }\n\n        // Then process all connections to create geometry->material mapping\n        const geometryMaterialMap = new Map<string | number, Material>();\n        \n        // First, create a map of type -> [connected IDs]\n        const typeConnections = new Map<number, Set<string | number>>();\n        for (const conn of connectionsNode.nodes) {\n            const props = (conn as FBXConnectionValueNode).props;\n            const sourceId = props[0] as string | number;\n            const destId = props[1] as string | number;\n            const type = props[2] as number;\n\n            if (type) {\n                if (!typeConnections.has(type)) {\n                    typeConnections.set(type, new Set());\n                }\n                typeConnections.get(type)?.add(destId);\n            }\n        }\n\n        // Then find materials and geometries that share the same type\n        for (const [type, connectedIds] of typeConnections) {\n            // Find if this type connects to any materials\n            const materialId = Array.from(connectedIds).find(id => materials.has(id));\n            if (materialId) {\n                const material = materials.get(materialId);\n                if (material) {\n                    // Find geometries connected to this same type\n                    const geometryIds = Array.from(connectedIds).filter(id => \n                        geometries.some(g => g.props[0] === id)\n                    );\n                    \n                    for (const geometryId of geometryIds) {\n                        geometryMaterialMap.set(geometryId, material);\n                    }\n                }\n            }\n        }\n\n        return {\n            geometries,\n            materials,\n            geometryMaterialMap\n        };\n    }\n\n    private static chunkMesh(vertices: number[], indices: number[], normals: number[], texCoords: number[], tangents: number[], bitangents: number[]): MeshData[] {\n        const chunks: MeshData[] = [];\n        const vertexCount = vertices.length / 3;\n        \n        // If under limit, return as single chunk\n        if (vertexCount <= FBXLoader.CHUNK_SIZE) {\n            return [{\n                vertices: new Float32Array(vertices),\n                indices: new Uint16Array(indices),\n                normals: new Float32Array(normals),\n                texCoords: new Float32Array(texCoords),\n                tangents: new Float32Array(tangents),\n                bitangents: new Float32Array(bitangents)\n            }];\n        }\n\n        // Split into chunks\n        let currentChunkVertices: number[] = [];\n        let currentChunkIndices: number[] = [];\n        let currentChunkNormals: number[] = [];\n        let currentChunkTexCoords: number[] = [];\n        let currentChunkTangents: number[] = [];\n        let currentChunkBitangents: number[] = [];\n        let vertexIndexMap = new Map<number, number>();\n        let nextIndex = 0;\n\n        for (let i = 0; i < indices.length; i += 3) {\n            const faceIndices = [indices[i], indices[i + 1], indices[i + 2]];\n            const faceVertCount = currentChunkVertices.length / 3;\n\n            // If this face would exceed chunk size, start new chunk\n            if (faceVertCount + 3 > FBXLoader.CHUNK_SIZE) {\n                // Add current chunk to chunks array\n                chunks.push({\n                    vertices: new Float32Array(currentChunkVertices),\n                    indices: new Uint16Array(currentChunkIndices),\n                    normals: new Float32Array(currentChunkNormals),\n                    texCoords: new Float32Array(currentChunkTexCoords),\n                    tangents: new Float32Array(currentChunkTangents),\n                    bitangents: new Float32Array(currentChunkBitangents)\n                });\n\n                // Reset for next chunk\n                currentChunkVertices = [];\n                currentChunkIndices = [];\n                currentChunkNormals = [];\n                currentChunkTexCoords = [];\n                currentChunkTangents = [];\n                currentChunkBitangents = [];\n                vertexIndexMap.clear();\n                nextIndex = 0;\n            }\n\n            // Add face to current chunk\n            for (const oldIndex of faceIndices) {\n                let newIndex = vertexIndexMap.get(oldIndex);\n                if (newIndex === undefined) {\n                    newIndex = nextIndex++;\n                    vertexIndexMap.set(oldIndex, newIndex);\n\n                    // Add vertex data\n                    const vIdx = oldIndex * 3;\n                    currentChunkVertices.push(vertices[vIdx], vertices[vIdx + 1], vertices[vIdx + 2]);\n                    currentChunkNormals.push(normals[vIdx], normals[vIdx + 1], normals[vIdx + 2]);\n                    \n                    const tIdx = oldIndex * 2;\n                    currentChunkTexCoords.push(texCoords[tIdx], texCoords[tIdx + 1]);\n                    \n                    const tanIdx = oldIndex * 3;\n                    currentChunkTangents.push(tangents[tanIdx], tangents[tanIdx + 1], tangents[tanIdx + 2]);\n                    currentChunkBitangents.push(bitangents[tanIdx], bitangents[tanIdx + 1], bitangents[tanIdx + 2]);\n                }\n                currentChunkIndices.push(newIndex);\n            }\n        }\n\n        // Add final chunk if not empty\n        if (currentChunkVertices.length > 0) {\n            chunks.push({\n                vertices: new Float32Array(currentChunkVertices),\n                indices: new Uint16Array(currentChunkIndices),\n                normals: new Float32Array(currentChunkNormals),\n                texCoords: new Float32Array(currentChunkTexCoords),\n                tangents: new Float32Array(currentChunkTangents),\n                bitangents: new Float32Array(currentChunkBitangents)\n            });\n        }\n\n        return chunks;\n    }\n\n    private static parseMesh(fbxMesh: FBXGeometryNode, smoothShading: boolean = true): MeshData[] {\n        // Get vertices and indices\n        const verticesNode = fbxMesh.nodes.find(n => n.name === 'Vertices');\n        const vertices = verticesNode?.props[0] as number[] || [];\n        const indicesNode = fbxMesh.nodes.find(n => n.name === 'PolygonVertexIndex');\n        const rawIndices = indicesNode?.props[0] as number[] || [];\n        \n        // Convert polygon indices to triangle indices\n        const indices: number[] = [];\n        let currentPolygon: number[] = [];\n        \n        // Process each index\n        rawIndices.forEach((index) => {\n            // If negative, it's the last vertex of the polygon\n            const actualIndex = index < 0 ? (-index - 1) : index;\n            currentPolygon.push(actualIndex);\n            \n            if (index < 0) {\n                // End of polygon - triangulate\n                for (let i = 1; i < currentPolygon.length - 1; i++) {\n                    indices.push(\n                        currentPolygon[0],\n                        currentPolygon[i],\n                        currentPolygon[i + 1]\n                    );\n                }\n                currentPolygon = [];\n            }\n        });\n\n        // Get UV coordinates (for texture mapping)\n        const layerElementUV = fbxMesh.nodes.find(n => n.name === 'LayerElementUV');\n        const uvsNode = layerElementUV?.nodes.find(n => n.name === 'UV');\n        const uvIndexNode = layerElementUV?.nodes.find(n => n.name === 'UVIndex');\n\n        const uvs = uvsNode?.props[0] as number[] || [];\n        const uvIndices = uvIndexNode?.props[0] as number[] || indices;\n        const uvPairs = Util.duplicate(\n            Util.chunk(uvs, 2).map(([u, v]: [number, number]) => [u, 1.0 - v]) as [number, number][],\n            1\n        ) as [number, number][];\n\n        // Helper function to normalize a vector\n        const normalizeVector = (x: number, y: number, z: number) => {\n            const length = Math.sqrt(x * x + y * y + z * z);\n            if (length === 0) return [0, 1, 0]; // Default up vector if invalid\n            return [x / length, y / length, z / length];\n        };\n\n        // Helper function to transform vertices from FBX coordinate system\n        const transformVertex = (x: number, y: number, z: number) => {\n            // Transform based on FBX normal data:\n            // Original [0,1,0] should be top (red)\n            // Original [0,-1,0] should be bottom (green)\n            // Original [0,0,-1] should be back (yellow)\n            return [x, z, -y];\n        };\n\n        // For flat shading, we need to duplicate vertices for each face\n        const flatVertices: number[] = [];\n        const flatNormals: number[] = [];\n        const flatIndices: number[] = [];\n        const flatTexCoords: number[] = [];\n        const flatTangents: number[] = [];\n        const flatBitangents: number[] = [];\n\n        // Process all triangles in the mesh\n        for (let i = 0; i < indices.length; i += 3) {\n            const v1Index = indices[i] * 3;\n            const v2Index = indices[i + 1] * 3;\n            const v3Index = indices[i + 2] * 3;\n\n            const v1 = transformVertex(\n                vertices[v1Index],\n                vertices[v1Index + 1],\n                vertices[v1Index + 2]\n            );\n            const v2 = transformVertex(\n                vertices[v2Index],\n                vertices[v2Index + 1],\n                vertices[v2Index + 2]\n            );\n            const v3 = transformVertex(\n                vertices[v3Index],\n                vertices[v3Index + 1],\n                vertices[v3Index + 2]\n            );\n\n            const uv1 = uvPairs[uvIndices[i]] || [0, 0];\n            const uv2 = uvPairs[uvIndices[i + 1]] || [0, 0];\n            const uv3 = uvPairs[uvIndices[i + 2]] || [0, 0];\n\n            const edge1 = [v2[0] - v1[0], v2[1] - v1[1], v2[2] - v1[2]];\n            const edge2 = [v3[0] - v1[0], v3[1] - v1[1], v3[2] - v1[2]];\n            const normal = normalizeVector(\n                edge1[1] * edge2[2] - edge1[2] * edge2[1],\n                edge1[2] * edge2[0] - edge1[0] * edge2[2],\n                edge1[0] * edge2[1] - edge1[1] * edge2[0]\n            );\n\n            const deltaUV1 = [uv2[0] - uv1[0], uv2[1] - uv1[1]];\n            const deltaUV2 = [uv3[0] - uv1[0], uv3[1] - uv1[1]];\n\n            const f = 1.0 / (deltaUV1[0] * deltaUV2[1] - deltaUV2[0] * deltaUV1[1] || 1.0);\n\n            const tangent = normalizeVector(\n                f * (deltaUV2[1] * edge1[0] - deltaUV1[1] * edge2[0]),\n                f * (deltaUV2[1] * edge1[1] - deltaUV1[1] * edge2[1]),\n                f * (deltaUV2[1] * edge1[2] - deltaUV1[1] * edge2[2])\n            );\n\n            const bitangent = normalizeVector(\n                f * (-deltaUV2[0] * edge1[0] + deltaUV1[0] * edge2[0]),\n                f * (-deltaUV2[0] * edge1[1] + deltaUV1[0] * edge2[1]),\n                f * (-deltaUV2[0] * edge1[2] + deltaUV1[0] * edge2[2])\n            );\n\n            const vertexCount = Math.floor(flatVertices.length / 3);\n\n            flatVertices.push(...v1, ...v2, ...v3);\n            flatTexCoords.push(...uv1, ...uv2, ...uv3);\n            flatNormals.push(...normal, ...normal, ...normal);\n            flatTangents.push(...tangent, ...tangent, ...tangent);\n            flatBitangents.push(...bitangent, ...bitangent, ...bitangent);\n            flatIndices.push(vertexCount, vertexCount + 1, vertexCount + 2);\n        }\n\n        // Instead of returning a single MeshData, we return chunks\n        return FBXLoader.chunkMesh(\n            flatVertices,\n            flatIndices,\n            flatNormals,\n            flatTexCoords,\n            flatTangents,\n            flatBitangents\n        );\n    }\n\n    private static async parseMaterial(fbxMaterial: FBXMaterialNode, fbxData: FBXNode[]): Promise<Material> {\n        // Extract material properties from FBX\n        const properties = fbxMaterial.nodes.find(n => n.name === 'Properties70')?.nodes || [];\n\n        // Default material properties\n        let baseColor = v3(0.8, 0.2, 0.2);  // Default to red\n        let roughness = 1;\n        let metallic = 0.0;\n        let ambientOcclusion = 1.0;\n        let emissive = v3(0, 0, 0);\n        let albedoMap: WebGLTexture | undefined;\n        let metallicMap: WebGLTexture | undefined;\n        let roughnessMap: WebGLTexture | undefined;\n        let normalMap: WebGLTexture | undefined;\n        let emissiveMap: WebGLTexture | undefined;\n        let emissiveStrengthMap: WebGLTexture | undefined;\n\n        // Find textures connected to this material\n        const objectsNode = fbxData.find(node => node.name === 'Objects') as FBXObjectsNode;\n        const connectionsNode = fbxData.find(node => node.name === 'Connections') as FBXConnectionNode;\n\n        // Find texture nodes\n        const textures = objectsNode.nodes.filter(n => n.name === 'Texture') as FBXTextureNode[];\n\n        // Get material ID from the material's properties\n        const materialId = fbxMaterial.props[0];\n        // Find texture connections (look for both directions)\n        const textureConnections = connectionsNode.nodes.filter(c => {\n            const conn = c as FBXConnectionValueNode;\n            const isConnectedToMaterial = conn.props[0] === materialId || conn.props[1] === materialId;\n            const isConnectedToTexture = textures.some(t => {\n                const textureId = t.props[0];\n                return conn.props[0] === textureId || conn.props[1] === textureId;\n            });\n            return isConnectedToMaterial || isConnectedToTexture;\n        });\n\n        // Process each texture connection\n        for (const connection of textureConnections) {\n            const textureNode = textures.find(t => {\n                const textureId = t.props[0];\n                return textureId === (connection as FBXConnectionValueNode).props[0] ||\n                    textureId === (connection as FBXConnectionValueNode).props[1];\n            });\n\n            if (textureNode) {\n                const textureName = textureNode.nodes.find(n => n.name === 'TextureName')?.props[0] as string;\n                const relativeFilename = textureNode.nodes.find(n => n.name === 'RelativeFilename')?.props[0] as string;\n\n                if (relativeFilename) {\n                    try {\n                        const texture = await this.createTextureFromFile(relativeFilename);\n\n                        // Determine texture type from the connection or name\n                        if (textureName?.toLowerCase().includes('diffuse') ||\n                            textureName?.toLowerCase().includes('base_color')) {\n                            albedoMap = texture;\n                            baseColor = v3(1, 1, 1); // Set base color to white to let texture color show through\n                        } else if (textureName?.toLowerCase().includes('metallic') ||\n                                 textureName?.toLowerCase().includes('metalness')) {\n                            metallicMap = texture;\n                            metallic = 1.0; // Set metallic to 1.0 to let texture control it\n                        } else if (textureName?.toLowerCase().includes('roughness')) {\n                            roughnessMap = texture;\n                            roughness = 1.0; // Set roughness to 1.0 to let texture control it\n                        } else if (textureName?.toLowerCase().includes('normal') ||\n                                 textureName?.toLowerCase().includes('bump')) {\n                            normalMap = texture;\n                        } else if (textureName?.toLowerCase().includes('emission') ||\n                                 textureName?.toLowerCase().includes('emissive')) {\n                            if (textureName?.toLowerCase().includes('strength')) {\n                                emissiveStrengthMap = texture;\n                            } else {\n                                emissiveMap = texture;\n                                emissive = v3(1, 1, 1); // Set emissive to white to let texture control it\n                            }\n                        }\n                    } catch (error) {\n                        console.error('Failed to load texture:', error);\n                    }\n                }\n            }\n        }\n\n        // Parse material properties\n        for (const prop of properties) {\n            if (!Array.isArray(prop.props)) continue;\n\n            const propName = prop.props[0] as string;\n            const propType = prop.props[1] as string;\n\n            const isColorProp = propType === 'Color' || propType === 'ColorRGB';\n            const colorValues = isColorProp ? [\n                prop.props[4] as number,\n                prop.props[5] as number,\n                prop.props[6] as number\n            ] : null;\n\n            switch (propName) {\n                case 'DiffuseColor':\n                case 'Diffuse':\n                    if (colorValues && !albedoMap) {\n                        baseColor = v3(colorValues[0], colorValues[1], colorValues[2]);\n                    }\n                    break;\n                case 'Roughness':\n                case 'Roughness Factor':\n                    roughness = Number(prop.props[4]) || 0.5;\n                    break;\n                case 'ShininessExponent':\n                    const shininess = Number(prop.props[4]) || 50;\n                    roughness = 1.0 - Math.min(shininess / 100.0, 1.0);\n                    break;\n                case 'Metallic':\n                case 'MetallicFactor':\n                    metallic = Number(prop.props[4]) || 0.0;\n                    break;\n                case 'SpecularFactor':\n                    metallic = Math.min(Number(prop.props[4]) || 0.0, 1.0);\n                    break;\n                case 'AmbientColor':\n                case 'Ambient':\n                    if (colorValues) {\n                        ambientOcclusion = (colorValues[0] + colorValues[1] + colorValues[2]) / 3;\n                    }\n                    break;\n                case 'EmissiveColor':\n                case 'Emissive':\n                    if (colorValues) {\n                        const emissiveFactor = properties.find(p =>\n                            p.props[0] === 'EmissiveFactor'\n                        )?.props[4] as number || 1.0;\n\n                        emissive = v3(\n                            colorValues[0] * emissiveFactor,\n                            colorValues[1] * emissiveFactor,\n                            colorValues[2] * emissiveFactor\n                        );\n                    }\n                    break;\n            }\n        }\n\n        // Return the material with all maps\n        return new Material({\n            baseColor,\n            roughness,\n            metallic,\n            ambientOcclusion,\n            emissive,\n            albedoMap,\n            metallicMap,\n            roughnessMap,\n            normalMap,\n            emissiveMap,\n            emissiveStrengthMap\n        });\n    }\n\n    // Helper function to create a texture from a file\n    private static async createTextureFromFile(filename: string): Promise<WebGLTexture> {\n        // Create a new image element\n        const image = new Image();\n\n        // Set up a promise to handle the image loading\n        const texturePromise = new Promise<WebGLTexture>((resolve, reject) => {\n            image.onload = () => {\n                try {\n                    // Get WebGL context from global\n                    const gl = glob.ctx;\n                    if (!gl) {\n                        throw new Error('WebGL context not available');\n                    }\n\n                    // Create and bind texture\n                    const texture = gl.createTexture();\n                    if (!texture) {\n                        throw new Error('Failed to create texture');\n                    }\n\n                    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n                    // Set texture parameters\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n                    // Upload the image into the texture\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\n                    // Generate mipmaps\n                    gl.generateMipmap(gl.TEXTURE_2D);\n\n                    resolve(texture);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            image.onerror = (err) => {\n                console.error(`Failed to load texture: ${filename}`, err);\n                reject(new Error(`Failed to load texture: ${filename}`));\n            };\n        });\n        \n        // Make the path relative to the current app, not root-relative\n        const texturePath = `fbx/${filename}`.replace(/^\\//, '');\n        \n        // Construct the full URL using UrlUtils\n        image.src = UrlUtils.resolveUrl(texturePath);\n        \n\n        return texturePromise;\n    }\n\n    public static async loadFromBuffer(buffer: ArrayBuffer, props: FBXLoaderProps = {}): Promise<SceneObject[]> {\n        try {\n            const fbxData = FBXParser.parseBinary(new Uint8Array(buffer)) as FBXNode[];\n            const processedData = await this.processFBXData(fbxData);\n            const objects: SceneObject[] = [];\n\n            // Now we can simply create chunks with the pre-processed data\n            for (const geometry of processedData.geometries) {\n                const geometryId = geometry.props[0] as string | number;\n                const material = processedData.geometryMaterialMap.get(geometryId);\n                const meshDataChunks = this.parseMesh(geometry);\n                for (const meshData of meshDataChunks) {\n                    const sceneObject = this.createSceneObject(meshData, {\n                        ...props,\n                        material\n                    });\n                    objects.push(sceneObject);\n                }\n            }\n\n            return objects;\n        } catch (error) {\n            console.error('Error loading FBX:', error);\n            throw error;\n        }\n    }\n\n    public static async loadFromUrl(url: string, props: FBXLoaderProps = {}): Promise<SceneObject[]> {\n        try {\n            // Resolve the URL using UrlUtils\n            const fullUrl = UrlUtils.resolveUrl(url);\n            \n            const response = await fetch(fullUrl);\n            if (!response.ok) {\n                console.error(`Failed to fetch FBX file: ${response.statusText} (${response.status}) from ${fullUrl}`);\n                throw new Error(`Failed to fetch FBX file: ${response.statusText} (${response.status})`);\n            }\n            const buffer = await response.arrayBuffer();\n            return this.loadFromBuffer(buffer, props);\n        } catch (error) {\n            console.error(`Error loading FBX from URL: ${url}`, error);\n            throw error;\n        }\n    }\n} ", "import { v3 } from './util/math/vector3';\nimport { TickerReturnData } from './ticker';\nimport { Scene } from './webgl2/scene';\nimport { Camera } from './webgl2/camera';\nimport { DirectionalLight } from './webgl2/lights/light';\nimport { v2 } from './util/math/vector2';\nimport { Plane } from './webgl2/meshes/plane';\nimport { EnvironmentMapLoader } from './webgl2/environmentMap';\nimport { FBXLoader } from './webgl2/meshes/fbxLoader';\nimport { Quaternion } from './util/math/quaternion';\n\nexport class TestLevel extends Scene {\n    protected clearColor: [number, number, number, number] = [0.2, 0.3, 0.5, 1.0];  // Match sky color\n    sun: DirectionalLight;\n    baseRotation: number;\n    waterPlane: import(\"c:/Users/basm/Documents/Development/BWGL2/ts/classes/webgl2/meshes/sceneObject\").SceneObject;\n\n    constructor() {\n        // Position camera to see reflections better\n        super(new Camera({ position: v3(0, 100, 200), target: v3(0, 0, 0), fov: 40 }), {\n            ambientLightColor: v3(0.4, 0.8, 0.9),\n            ambientLightIntensity: 0.7  // Very subtle ambient lighting\n        });\n\n        // Create a reflective plane\n        this.add(this.waterPlane = Plane.create({\n            position: v3(0, 10, 0),  // Lower position for better sky reflections - world position affects reflection quality\n            material: {\n                baseColor: v3(0.4, 0.8, 0.9),  // Deep blue-green tint for ocean\n                roughness: 0.4,  // Smoother surface for calm water, but not perfectly reflective\n                metallic: 0.8,    // Good reflection without being too mirror-like\n                ambientOcclusion: 0.8,\n                emissive: v3(0.01, 0.03, 0.05)  // Subtle glow for depth\n            },\n            scale: v2(100000, 100000),  // Adjust scale to see more of the reflection\n        }));\n\n        // Adjust lighting to match skybox\n        this.addLight(this.sun = new DirectionalLight({\n            direction: v3(0.2, -1, -1.3).normalize(),  // Match sun position in skybox\n            color: v3(1, 0.98, 0.95),  // Slightly warm sunlight\n            intensity: 2,  // Increased intensity\n            enabled: true,\n        }));\n\n        this.build();\n\n        this.baseRotation = 0;\n    }\n\n    async build() {\n        // Load environment map using the EnvironmentMapLoader\n        this.setEnvironmentMap(await EnvironmentMapLoader.loadFromDirectory('textures/envmap/sky'));\n\n        this.add(await FBXLoader.loadFromUrl('fbx/island1.fbx', {\n            position: v3(0, 0, 0),\n            rotation: Quaternion.fromEuler(0, 0, 0),\n        }));\n        this.add(await FBXLoader.loadFromUrl('fbx/island2.fbx', {\n            position: v3(0, 0, 0),\n            rotation: Quaternion.fromEuler(0, 0, 0),\n        }));\n        this.add(await FBXLoader.loadFromUrl('fbx/island3.fbx', {\n            position: v3(0, 0, 0),\n            rotation: Quaternion.fromEuler(0, 0, 0),\n        }));\n    }\n\n    tick(obj: TickerReturnData) {\n        super.tick(obj);\n\n        // Slower, gentler camera movement\n        const radius = 4000 + Math.sin(obj.total * 0.0005) * 2000;\n        const height = 2000;\n        const v = v3(\n            radius,\n            height,\n            0\n        ).rotateXY(obj.total * 0.0001 % Math.PI*2);\n        this.camera.setPosition(v.add(v3(0, Math.sin(obj.total * 0.0005) * 1000, 0)));\n        this.camera.setTarget(v3(Math.sin(obj.total * 0.0005) * 1000, -1000, Math.sin(obj.total * 0.0007) * 1000));  // Keep looking at the reflective plane\n\n        // Slowly rotate the sun to match skybox movement\n        const sunRadius = 3;\n        const v2 = v3(\n            sunRadius,\n            -1,\n            0\n        ).normalize().rotateXY((obj.total  * -0.0001 + Math.PI/0.75) % Math.PI*2);\n        this.sun.setDirection(v2);\n\n        this.waterPlane.transform.setPosition(v3(0, Math.sin(obj.total * 0.001) * 15 + 10, 0));\n    }\n}", "import { glob } from '../game';\r\n\r\nexport type TickerReturnData = {\r\n    interval: number, intervalS3: number, intervalS10: number, intervalS20: number, total: number, frameRate: number, frame: number; \r\n};\r\nexport type TickerCallback = (obj: TickerReturnData) => void;\r\nexport class Ticker {\r\n    private _running: boolean = false;\r\n    private started: boolean = false;\r\n    private pauzedTime: number = 0;\r\n    private intervalKeeper:number[] = []\r\n    private id: number;\r\n    public get running(): boolean {\r\n        return this._running;\r\n    }\r\n    public set running(value: boolean) {\r\n        this._running = value;\r\n        \r\n        if (value) {\r\n            this.pTime = performance.now() - this.pauzedTime;\r\n            this.id = window.requestAnimationFrame(this.frame.bind(this));\r\n        } else {\r\n            window.cancelAnimationFrame(this.id);\r\n            this.pauzedTime = performance.now() - this.pTime\r\n            \r\n        }\r\n    }\r\n    constructor() {\r\n        document.addEventListener(\"visibilitychange\", () => {\r\n            if (this.started) {\r\n                this.running = !document.hidden;\r\n            }\r\n        });\r\n    }\r\n    private callbacks: TickerCallback[] = [];\r\n    private sTime: number;\r\n    public get startTime() {\r\n        return this.sTime;\r\n    }\r\n    private get eTime() {\r\n        return performance.now() - this.sTime;\r\n    }\r\n    // public get elapsed() {\r\n    //     return this.eTime;\r\n    // }\r\n    private pTime: number;\r\n    private frameN: number = 0;\r\n\r\n    private averagedInterval(count: number, interval: number){\r\n        const average = this.intervalKeeper.slice(0,count).reduce((partialSum, a) => partialSum + a, 0) / count;\r\n        return Math.abs(interval - average) > 10?interval: average;\r\n    }\r\n\r\n    private frame(timeStamp: number) {\r\n\r\n        if (this.running) {\r\n            const interval = timeStamp - this.pTime;\r\n            this.intervalKeeper.push(interval);\r\n            this.intervalKeeper = this.intervalKeeper.slice(0,20);\r\n            while(this.intervalKeeper.length<20){\r\n                this.intervalKeeper.push(this.intervalKeeper[0]);\r\n            }\r\n\r\n            this.pTime = timeStamp;\r\n            this.frameN++;\r\n            glob.frame = this.frameN;\r\n            const o = {\r\n                interval,\r\n                total: this.eTime,\r\n                frameRate: 1000 / interval,\r\n                frame: this.frameN,\r\n                intervalS3: this.averagedInterval(3, interval),\r\n                intervalS10: this.averagedInterval(5, interval),\r\n                intervalS20: this.averagedInterval(20, interval),\r\n            };\r\n\r\n            this.callbacks.forEach((c) => {\r\n                c(o);\r\n            });\r\n\r\n            this.id = window.requestAnimationFrame(this.frame.bind(this));\r\n        }\r\n    }\r\n\r\n    public start() {\r\n        this.started = true;\r\n        this._running = true;\r\n        this.sTime = performance.now();\r\n        this.pTime = performance.now();\r\n        this.id = window.requestAnimationFrame(this.frame.bind(this));\r\n    }\r\n\r\n    public add(callback: TickerCallback) {\r\n        this.callbacks.push(callback);\r\n    }\r\n}\r\n", "import { DomElement } from '../elements/domElement';\r\nimport { DomText } from '../elements/domText';\r\nimport { Vector2 } from './math/vector2';\r\n\r\n\r\nexport class Loader extends DomElement<'div'> {\r\n    bar: DomElement<'div'>;\r\n    barBackground: DomElement<'div'>;\r\n    text: DomText;\r\n    public constructor( ) {\r\n        super('div',{\r\n            position: new Vector2(5, 5),\r\n            size: new Vector2(600, 70),\r\n            background: '#272727',\r\n        });\r\n\r\n        this.bar = new DomElement('div', {\r\n            size: new Vector2(600, 70),\r\n            background: '#80808070',\r\n        })\r\n        this.dom.appendChild(this.bar.dom);\r\n\r\n        this.text = new DomText({\r\n            text: '',\r\n            fontSize: 35,\r\n            fontWeight: 900,\r\n            color: 'white',\r\n            size: new Vector2(600, 70),\r\n            position: new Vector2(30, -10),\r\n            fontFamily: 'monospace',\r\n        });\r\n        this.dom.appendChild(this.text.dom);\r\n    }\r\n\r\n    public update(value: number, total: number){\r\n        this.text.text = `loaded ${total - value} out of ${total} assets`;\r\n        this.bar.width = 600 * (total - value) / total;\r\n    }\r\n}", "import { Renderer } from './classes/elements/renderer';\r\nimport { PadManager } from './classes/input/gamepadManager';\r\nimport { InputDevices } from './classes/input/inputDevices';\r\nimport { TestLevel } from './classes/testLevel';\r\nimport { Ticker, TickerReturnData } from './classes/ticker';\r\nimport { Events } from './classes/util/event';\r\nimport { Loader } from './classes/util/loader';\r\nimport { Scene } from './classes/webgl2/scene';\r\n\r\nexport var glob = new class {\r\n    public game: Game;\r\n    public get renderer() {\r\n        return this.game.renderer;\r\n    }\r\n    public get shaderManager() {\r\n        return this.renderer.shaderManager;\r\n    }\r\n    public device: InputDevices = new InputDevices();\r\n    public get mobile(): boolean {\r\n        return this.device.mobile;\r\n    }\r\n    public frame: number = 0;\r\n    public get ctx(): WebGL2RenderingContext {\r\n        return this.renderer.ctx;\r\n    }\r\n    public events: Record<string, Events<any>> = {};\r\n};\r\n\r\nexport class Game {\r\n    public ticker: Ticker;\r\n    public renderer: Renderer;\r\n    public readyToStart: boolean = false;\r\n    private _waitCount: number = 0;\r\n    private started: boolean = false;\r\n    private loader: Loader;\r\n    \r\n    public total: number = 0;\r\n\r\n    public levels: Record<string, Scene> = {};\r\n    public active: Scene;\r\n\r\n    public padManager: PadManager = new PadManager();\r\n    test2d: HTMLDivElement;\r\n    get t(): TickerReturnData {\r\n        return this.renderer.tickerData;\r\n    }\r\n    public get waitCount(): number {\r\n        return this._waitCount;\r\n    }\r\n    public set waitCount(value: number) {\r\n        if (value > this._waitCount) {\r\n            this.total++;\r\n        }\r\n        if (!this.started) {\r\n            if (value === 0 && this.readyToStart) {\r\n                this.start();\r\n            } else {\r\n                this.loader.update(value, this.total);\r\n            }\r\n        }\r\n        this._waitCount = value;\r\n\r\n    }\r\n\r\n    public constructor() {\r\n        glob.game = this;\r\n        this.init();\r\n        glob.device.ready();\r\n    }\r\n\r\n\r\n    init() {\r\n        this.renderer = new Renderer();\r\n\r\n        this.loader = new Loader();\r\n        this.renderer.addChild(this.loader);\r\n\r\n        this.ticker = new Ticker();\r\n        this.ticker.add(this.tick.bind(this));\r\n\r\n        this.test2d = document.createElement('div');\r\n        this.test2d.style.cssText = `\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100px;\r\n            background-color: #ff0000cc;\r\n            margin-left: -50px;\r\n            text-align: center;\r\n            font-size: 20px;\r\n            color: white;\r\n            z-index: 9;\r\n            pointer-events: none;\r\n        `;\r\n        \r\n        document.body.appendChild(this.test2d);\r\n\r\n        this.addLevel('test', new TestLevel());\r\n        if (this.waitCount === 0) {\r\n            this.start();\r\n        } else {\r\n            this.readyToStart = true;\r\n        }\r\n    }\r\n\r\n    public tick(obj: TickerReturnData) {\r\n        this.renderer.tick(obj);\r\n    }\r\n\r\n    protected addLevel(s: string, level: Scene) {\r\n        this.levels[s] = level;\r\n        // if (level.interface) {\r\n        //     document.body.appendChild(level.interface.dom)\r\n        // }\r\n        this.active = level;\r\n    }\r\n\r\n    public get level(): Scene {\r\n        return this.active;\r\n    }\r\n\r\n    public start() {\r\n        this.started = true;\r\n        this.loader.visible = false;\r\n        this.ticker.start();\r\n    }\r\n}\r\n\r\n\r\n", "\r\nimport { Game } from './game';\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n\r\n    if (location.hostname !== 'localhost') {\r\n        const base = document.createElement('base');\r\n        base.href = \"https://basamols.github.io/BWGL2/dist/\";\r\n        document.head.appendChild(base);\r\n    }\r\n\r\n    const g = new Game();\r\n    document.body.appendChild(g.renderer.dom);\r\n\r\n    \r\n});"],
  "mappings": "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",
  "names": ["length", "zero", "len", "dist", "length", "len", "len", "zero", "len", "str", "copy", "len", "str", "len", "max", "require_deflate", "len", "dist", "len", "min", "max", "copy", "dist", "len", "require_inflate", "parseBinary", "_i", "_a", "d", "b", "FBXReaderNode", "FBXReader", "require_lib", "max", "min", "Buffer", "location", "location", "min", "max", "len", "max", "min", "len", "len", "scale", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "scale", "len", "rotateX", "rotateY", "rotateZ", "str", "exactEquals", "equals", "sub", "mul", "angle", "angle", "scale", "p", "q", "length", "v2", "v3", "angle", "length", "v2", "v3", "v2"]
}
